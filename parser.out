Grammar:

Rule 0     S' -> program
Rule 1     program -> empty
Rule 2     program -> statement
Rule 3     program -> program statement
Rule 4     statement -> sandbox
Rule 5     statement -> import_statement
Rule 6     statement -> variable_operation
Rule 7     statement -> return_statement
Rule 8     statement -> delete_statement
Rule 9     statement -> for_loop
Rule 10    statement -> break_statement
Rule 11    statement -> variable_assignment
Rule 12    statement -> python_code_statement
Rule 13    statement -> while_loop
Rule 14    statement -> conditional
Rule 15    statement -> class_attribute_assignment
Rule 16    statement -> function_call_statement
Rule 17    statement -> class_declaration
Rule 18    statement -> function_declaration
Rule 19    sandbox -> SANDBOX { program }
Rule 20    sandbox -> LIMPORT expression ;
Rule 21    function_call_statement -> function_call ;
Rule 22    python_code_statement -> python_code ;
Rule 23    break_statement -> DEBUG ;
Rule 24    break_statement -> SKIP ;
Rule 25    break_statement -> BREAK ;
Rule 26    return_statement -> RETURN expression ;
Rule 27    function_call -> . ENV FROM ID { program }
Rule 28    function_call -> . ENV { program }
Rule 29    function_call -> expression ( empty ) FARROW { program }
Rule 30    function_call -> < ID > expression  [precedence=left, level=7]
Rule 31    function_call -> ID TARROW ID
Rule 32    function_call -> # DEPENDS expression
Rule 33    function_call -> # ID expression
Rule 34    function_call -> expression : : expression ( empty )
Rule 35    function_call -> expression : : expression ( function_arguments )
Rule 36    function_call -> expression ( empty )
Rule 37    function_call -> expression ( function_arguments )
Rule 38    variable_assignment -> get_index = expression ;
Rule 39    variable_assignment -> @ ID ID = expression ;
Rule 40    variable_assignment -> ID = expression ;
Rule 41    variable_assignment -> ID < ID > ID = expression ;
Rule 42    variable_assignment -> ID ID = [ HEX , ID ] ;
Rule 43    variable_assignment -> ID ID = expression ;
Rule 44    variable_assignment -> ID - - ;
Rule 45    variable_assignment -> ID + + ;
Rule 46    variable_assignment -> [ HEX , ID ] = expression ;
Rule 47    function_declaration -> FUNC ID ( empty ) expression { program }
Rule 48    function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
Rule 49    function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
Rule 50    function_declaration -> FUNC ID ( function_arguments ) expression { program }
Rule 51    function_arguments -> kwargs
Rule 52    function_arguments -> positional_args , kwargs  [precedence=left, level=2]
Rule 53    function_arguments -> positional_args
Rule 54    class_declaration -> # EMBED [ ID , ID ] string
Rule 55    class_declaration -> # EMBED [ ID ] string
Rule 56    class_declaration -> NAMESPACE ID { program }
Rule 57    class_declaration -> CLASS ID { program }
Rule 58    for_loop -> ! FOR expression IN expression { program }
Rule 59    for_loop -> FOR expression IN expression { program }
Rule 60    while_loop -> WHILE ( expression ) { program }
Rule 61    positional_args -> expression
Rule 62    positional_args -> positional_args , expression  [precedence=left, level=2]
Rule 63    kwargs -> ID = expression  [precedence=right, level=3]
Rule 64    kwargs -> kwargs , id = expression  [precedence=right, level=3]
Rule 65    variable_operation -> get_index EQ_DIV expression ;
Rule 66    variable_operation -> ID EQ_DIV expression ;
Rule 67    variable_operation -> get_index EQ_MOD expression ;
Rule 68    variable_operation -> ID EQ_MOD expression ;
Rule 69    variable_operation -> get_index EQ_MUL expression ;
Rule 70    variable_operation -> ID EQ_MUL expression ;
Rule 71    variable_operation -> get_index EQ_SUB expression ;
Rule 72    variable_operation -> ID EQ_SUB expression ;
Rule 73    variable_operation -> get_index EQ_ADD expression ;
Rule 74    variable_operation -> ID EQ_ADD expression ;
Rule 75    class_attribute_assignment -> ? !  [precedence=right, level=11]
Rule 76    conditional -> if_statement else_statement
Rule 77    conditional -> if_statement else_if_loop else_statement
Rule 78    conditional -> if_statement else_if_loop
Rule 79    conditional -> if_statement
Rule 80    if_statement -> IF ( expression ) { program }
Rule 81    else_if_loop -> else_if_statement
Rule 82    else_if_loop -> else_if_loop else_if_statement
Rule 83    else_if_statement -> ELSE IF ( expression ) { program }
Rule 84    else_statement -> ELSE { program }
Rule 85    delete_statement -> DEL ID ;
Rule 86    import_statement -> . SELFISH ;
Rule 87    import_statement -> . GLOBAL ;
Rule 88    import_statement -> IMPORT expression ;
Rule 89    expression -> assoc_array
Rule 90    expression -> _numpy
Rule 91    expression -> _list
Rule 92    expression -> _tuple
Rule 93    expression -> class_attribute
Rule 94    expression -> id
Rule 95    expression -> string
Rule 96    expression -> bool
Rule 97    expression -> float
Rule 98    expression -> hex
Rule 99    expression -> int
Rule 100   expression -> null
Rule 101   expression -> get_index
Rule 102   expression -> function_call
Rule 103   expression -> python_code
Rule 104   expression -> ( expression )
Rule 105   expression -> expression > > expression  [precedence=left, level=7]
Rule 106   expression -> expression < < expression  [precedence=left, level=7]
Rule 107   expression -> expression > expression  [precedence=left, level=7]
Rule 108   expression -> expression < expression  [precedence=left, level=7]
Rule 109   expression -> ! expression  [precedence=right, level=11]
Rule 110   expression -> expression & expression  [precedence=left, level=5]
Rule 111   expression -> expression ^ expression
Rule 112   expression -> expression | expression  [precedence=left, level=4]
Rule 113   expression -> expression EQ_GREATER expression  [precedence=left, level=7]
Rule 114   expression -> expression EQ_LESS expression  [precedence=left, level=7]
Rule 115   expression -> expression NOT_EQEQ expression  [precedence=left, level=6]
Rule 116   expression -> expression EQEQ expression  [precedence=left, level=6]
Rule 117   expression -> expression % expression  [precedence=left, level=9]
Rule 118   expression -> expression * expression  [precedence=left, level=9]
Rule 119   expression -> expression / expression  [precedence=left, level=9]
Rule 120   expression -> expression - expression  [precedence=left, level=8]
Rule 121   expression -> expression + expression  [precedence=left, level=8]
Rule 122   expression -> + expression  [precedence=right, level=10]
Rule 123   expression -> - expression  [precedence=right, level=10]
Rule 124   expression -> * ID
Rule 125   expression -> & ID
Rule 126   expression -> ID ID [ expression ]
Rule 127   expression -> ID ID
Rule 128   null -> NULL
Rule 129   get_index -> expression [ expression ]
Rule 130   _tuple -> { positional_args , }
Rule 131   _tuple -> { positional_args }
Rule 132   _list -> [ positional_args , ]
Rule 133   _list -> [ positional_args ]
Rule 134   _numpy -> ( , )
Rule 135   _numpy -> ( )
Rule 136   _numpy -> ( expression , )
Rule 137   _numpy -> ( items , )
Rule 138   _numpy -> ( items )
Rule 139   items -> expression , expression  [precedence=left, level=2]
Rule 140   items -> items , expression  [precedence=left, level=2]
Rule 141   int -> INT
Rule 142   hex -> HEX
Rule 143   string -> CHAR
Rule 144   string -> STRING
Rule 145   float -> FLOAT
Rule 146   bool -> FALSE
Rule 147   bool -> TRUE
Rule 148   class_attribute -> ! expression ? ID
Rule 149   id -> ID
Rule 150   assoc_array -> { assoc_array_items }
Rule 151   assoc_array_items -> expression : expression
Rule 152   assoc_array_items -> assoc_array_items , expression : expression
Rule 153   python_code -> PYTHON_CODE_EXEC
Rule 154   python_code -> PYTHON_CODE
Rule 155   empty -> <empty>  [precedence=left, level=1]

Unused terminals:

    DEFINE
    TELSE
    ARRAY
    LET
    OF

Terminals, with rules where they appear:

!                    : 58 75 109 148
#                    : 32 33 54 55
%                    : 117
&                    : 110 125
(                    : 29 34 35 36 37 47 48 49 50 60 80 83 104 134 135 136 137 138
)                    : 29 34 35 36 37 47 48 49 50 60 80 83 104 134 135 136 137 138
*                    : 118 124
+                    : 45 45 121 122
,                    : 42 46 52 54 62 64 130 132 134 136 137 139 140 152
-                    : 44 44 120 123
.                    : 27 28 86 87
/                    : 119
:                    : 34 34 35 35 151 152
;                    : 20 21 22 23 24 25 26 38 39 40 41 42 43 44 45 46 65 66 67 68 69 70 71 72 73 74 85 86 87 88
<                    : 30 41 106 106 108
=                    : 38 39 40 41 42 43 46 63 64
>                    : 30 41 105 105 107
?                    : 75 148
@                    : 39
ARRAY                : 
BREAK                : 25
CHAR                 : 143
CLASS                : 57
COLON_COLON          : 48 49
DEBUG                : 23
DEFINE               : 
DEL                  : 85
DEPENDS              : 32
ELSE                 : 83 84
EMBED                : 54 55
ENV                  : 27 28
EQEQ                 : 116
EQ_ADD               : 73 74
EQ_DIV               : 65 66
EQ_GREATER           : 113
EQ_LESS              : 114
EQ_MOD               : 67 68
EQ_MUL               : 69 70
EQ_SUB               : 71 72
FALSE                : 146
FARROW               : 29
FLOAT                : 145
FOR                  : 58 59
FROM                 : 27
FUNC                 : 47 48 49 50
GLOBAL               : 87
HEX                  : 42 46 142
ID                   : 27 30 31 31 33 39 39 40 41 41 41 42 42 42 43 43 44 45 46 47 48 48 49 49 50 54 54 55 56 57 63 66 68 70 72 74 85 124 125 126 126 127 127 148 149
IF                   : 80 83
IMPORT               : 88
IN                   : 58 59
INT                  : 141
LET                  : 
LIMPORT              : 20
NAMESPACE            : 56
NOT_EQEQ             : 115
NULL                 : 128
OF                   : 
PYTHON_CODE          : 154
PYTHON_CODE_EXEC     : 153
RETURN               : 26
SANDBOX              : 19
SELFISH              : 86
SKIP                 : 24
STRING               : 144
TARROW               : 31 48 49
TELSE                : 
TRUE                 : 147
WHILE                : 60
[                    : 42 46 54 55 126 129 132 133
]                    : 42 46 54 55 126 129 132 133
^                    : 111
error                : 
{                    : 19 27 28 29 47 48 49 50 56 57 58 59 60 80 83 84 130 131 150
|                    : 112
}                    : 19 27 28 29 47 48 49 50 56 57 58 59 60 80 83 84 130 131 150

Nonterminals, with rules where they appear:

_list                : 91
_numpy               : 90
_tuple               : 92
assoc_array          : 89
assoc_array_items    : 150 152
bool                 : 96
break_statement      : 10
class_attribute      : 93
class_attribute_assignment : 15
class_declaration    : 17
conditional          : 14
delete_statement     : 8
else_if_loop         : 77 78 82
else_if_statement    : 81 82
else_statement       : 76 77
empty                : 1 29 34 36 47 48
expression           : 20 26 29 30 32 33 34 34 35 35 36 37 38 39 40 41 43 46 47 48 49 50 58 58 59 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 80 83 88 104 105 105 106 106 107 107 108 108 109 110 110 111 111 112 112 113 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 121 122 123 126 129 129 136 139 139 140 148 151 151 152 152
float                : 97
for_loop             : 9
function_arguments   : 35 37 49 50
function_call        : 21 102
function_call_statement : 16
function_declaration : 18
get_index            : 38 65 67 69 71 73 101
hex                  : 98
id                   : 64 94
if_statement         : 76 77 78 79
import_statement     : 5
int                  : 99
items                : 137 138 140
kwargs               : 51 52 64
null                 : 100
positional_args      : 52 53 62 130 131 132 133
program              : 3 19 27 28 29 47 48 49 50 56 57 58 59 60 80 83 84 0
python_code          : 22 103
python_code_statement : 12
return_statement     : 7
sandbox              : 4
statement            : 2 3
string               : 54 55 95
variable_assignment  : 11
variable_operation   : 6
while_loop           : 13


state 0

    (0) S' -> . program
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    $end            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    program                        shift and go to state 1
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 1

    (0) S' -> program .
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 2

    (1) program -> empty .
    SANDBOX         reduce using rule 1 (program -> empty .)
    LIMPORT         reduce using rule 1 (program -> empty .)
    .               reduce using rule 1 (program -> empty .)
    IMPORT          reduce using rule 1 (program -> empty .)
    ID              reduce using rule 1 (program -> empty .)
    RETURN          reduce using rule 1 (program -> empty .)
    DEL             reduce using rule 1 (program -> empty .)
    !               reduce using rule 1 (program -> empty .)
    FOR             reduce using rule 1 (program -> empty .)
    DEBUG           reduce using rule 1 (program -> empty .)
    SKIP            reduce using rule 1 (program -> empty .)
    BREAK           reduce using rule 1 (program -> empty .)
    @               reduce using rule 1 (program -> empty .)
    [               reduce using rule 1 (program -> empty .)
    WHILE           reduce using rule 1 (program -> empty .)
    ?               reduce using rule 1 (program -> empty .)
    #               reduce using rule 1 (program -> empty .)
    NAMESPACE       reduce using rule 1 (program -> empty .)
    CLASS           reduce using rule 1 (program -> empty .)
    FUNC            reduce using rule 1 (program -> empty .)
    PYTHON_CODE_EXEC reduce using rule 1 (program -> empty .)
    PYTHON_CODE     reduce using rule 1 (program -> empty .)
    IF              reduce using rule 1 (program -> empty .)
    <               reduce using rule 1 (program -> empty .)
    (               reduce using rule 1 (program -> empty .)
    +               reduce using rule 1 (program -> empty .)
    -               reduce using rule 1 (program -> empty .)
    *               reduce using rule 1 (program -> empty .)
    &               reduce using rule 1 (program -> empty .)
    {               reduce using rule 1 (program -> empty .)
    CHAR            reduce using rule 1 (program -> empty .)
    STRING          reduce using rule 1 (program -> empty .)
    FALSE           reduce using rule 1 (program -> empty .)
    TRUE            reduce using rule 1 (program -> empty .)
    FLOAT           reduce using rule 1 (program -> empty .)
    HEX             reduce using rule 1 (program -> empty .)
    INT             reduce using rule 1 (program -> empty .)
    NULL            reduce using rule 1 (program -> empty .)
    $end            reduce using rule 1 (program -> empty .)
    }               reduce using rule 1 (program -> empty .)


state 3

    (2) program -> statement .
    SANDBOX         reduce using rule 2 (program -> statement .)
    LIMPORT         reduce using rule 2 (program -> statement .)
    .               reduce using rule 2 (program -> statement .)
    IMPORT          reduce using rule 2 (program -> statement .)
    ID              reduce using rule 2 (program -> statement .)
    RETURN          reduce using rule 2 (program -> statement .)
    DEL             reduce using rule 2 (program -> statement .)
    !               reduce using rule 2 (program -> statement .)
    FOR             reduce using rule 2 (program -> statement .)
    DEBUG           reduce using rule 2 (program -> statement .)
    SKIP            reduce using rule 2 (program -> statement .)
    BREAK           reduce using rule 2 (program -> statement .)
    @               reduce using rule 2 (program -> statement .)
    [               reduce using rule 2 (program -> statement .)
    WHILE           reduce using rule 2 (program -> statement .)
    ?               reduce using rule 2 (program -> statement .)
    #               reduce using rule 2 (program -> statement .)
    NAMESPACE       reduce using rule 2 (program -> statement .)
    CLASS           reduce using rule 2 (program -> statement .)
    FUNC            reduce using rule 2 (program -> statement .)
    PYTHON_CODE_EXEC reduce using rule 2 (program -> statement .)
    PYTHON_CODE     reduce using rule 2 (program -> statement .)
    IF              reduce using rule 2 (program -> statement .)
    <               reduce using rule 2 (program -> statement .)
    (               reduce using rule 2 (program -> statement .)
    +               reduce using rule 2 (program -> statement .)
    -               reduce using rule 2 (program -> statement .)
    *               reduce using rule 2 (program -> statement .)
    &               reduce using rule 2 (program -> statement .)
    {               reduce using rule 2 (program -> statement .)
    CHAR            reduce using rule 2 (program -> statement .)
    STRING          reduce using rule 2 (program -> statement .)
    FALSE           reduce using rule 2 (program -> statement .)
    TRUE            reduce using rule 2 (program -> statement .)
    FLOAT           reduce using rule 2 (program -> statement .)
    HEX             reduce using rule 2 (program -> statement .)
    INT             reduce using rule 2 (program -> statement .)
    NULL            reduce using rule 2 (program -> statement .)
    $end            reduce using rule 2 (program -> statement .)
    }               reduce using rule 2 (program -> statement .)


state 4

    (4) statement -> sandbox .
    SANDBOX         reduce using rule 4 (statement -> sandbox .)
    LIMPORT         reduce using rule 4 (statement -> sandbox .)
    .               reduce using rule 4 (statement -> sandbox .)
    IMPORT          reduce using rule 4 (statement -> sandbox .)
    ID              reduce using rule 4 (statement -> sandbox .)
    RETURN          reduce using rule 4 (statement -> sandbox .)
    DEL             reduce using rule 4 (statement -> sandbox .)
    !               reduce using rule 4 (statement -> sandbox .)
    FOR             reduce using rule 4 (statement -> sandbox .)
    DEBUG           reduce using rule 4 (statement -> sandbox .)
    SKIP            reduce using rule 4 (statement -> sandbox .)
    BREAK           reduce using rule 4 (statement -> sandbox .)
    @               reduce using rule 4 (statement -> sandbox .)
    [               reduce using rule 4 (statement -> sandbox .)
    WHILE           reduce using rule 4 (statement -> sandbox .)
    ?               reduce using rule 4 (statement -> sandbox .)
    #               reduce using rule 4 (statement -> sandbox .)
    NAMESPACE       reduce using rule 4 (statement -> sandbox .)
    CLASS           reduce using rule 4 (statement -> sandbox .)
    FUNC            reduce using rule 4 (statement -> sandbox .)
    PYTHON_CODE_EXEC reduce using rule 4 (statement -> sandbox .)
    PYTHON_CODE     reduce using rule 4 (statement -> sandbox .)
    IF              reduce using rule 4 (statement -> sandbox .)
    <               reduce using rule 4 (statement -> sandbox .)
    (               reduce using rule 4 (statement -> sandbox .)
    +               reduce using rule 4 (statement -> sandbox .)
    -               reduce using rule 4 (statement -> sandbox .)
    *               reduce using rule 4 (statement -> sandbox .)
    &               reduce using rule 4 (statement -> sandbox .)
    {               reduce using rule 4 (statement -> sandbox .)
    CHAR            reduce using rule 4 (statement -> sandbox .)
    STRING          reduce using rule 4 (statement -> sandbox .)
    FALSE           reduce using rule 4 (statement -> sandbox .)
    TRUE            reduce using rule 4 (statement -> sandbox .)
    FLOAT           reduce using rule 4 (statement -> sandbox .)
    HEX             reduce using rule 4 (statement -> sandbox .)
    INT             reduce using rule 4 (statement -> sandbox .)
    NULL            reduce using rule 4 (statement -> sandbox .)
    $end            reduce using rule 4 (statement -> sandbox .)
    }               reduce using rule 4 (statement -> sandbox .)


state 5

    (5) statement -> import_statement .
    SANDBOX         reduce using rule 5 (statement -> import_statement .)
    LIMPORT         reduce using rule 5 (statement -> import_statement .)
    .               reduce using rule 5 (statement -> import_statement .)
    IMPORT          reduce using rule 5 (statement -> import_statement .)
    ID              reduce using rule 5 (statement -> import_statement .)
    RETURN          reduce using rule 5 (statement -> import_statement .)
    DEL             reduce using rule 5 (statement -> import_statement .)
    !               reduce using rule 5 (statement -> import_statement .)
    FOR             reduce using rule 5 (statement -> import_statement .)
    DEBUG           reduce using rule 5 (statement -> import_statement .)
    SKIP            reduce using rule 5 (statement -> import_statement .)
    BREAK           reduce using rule 5 (statement -> import_statement .)
    @               reduce using rule 5 (statement -> import_statement .)
    [               reduce using rule 5 (statement -> import_statement .)
    WHILE           reduce using rule 5 (statement -> import_statement .)
    ?               reduce using rule 5 (statement -> import_statement .)
    #               reduce using rule 5 (statement -> import_statement .)
    NAMESPACE       reduce using rule 5 (statement -> import_statement .)
    CLASS           reduce using rule 5 (statement -> import_statement .)
    FUNC            reduce using rule 5 (statement -> import_statement .)
    PYTHON_CODE_EXEC reduce using rule 5 (statement -> import_statement .)
    PYTHON_CODE     reduce using rule 5 (statement -> import_statement .)
    IF              reduce using rule 5 (statement -> import_statement .)
    <               reduce using rule 5 (statement -> import_statement .)
    (               reduce using rule 5 (statement -> import_statement .)
    +               reduce using rule 5 (statement -> import_statement .)
    -               reduce using rule 5 (statement -> import_statement .)
    *               reduce using rule 5 (statement -> import_statement .)
    &               reduce using rule 5 (statement -> import_statement .)
    {               reduce using rule 5 (statement -> import_statement .)
    CHAR            reduce using rule 5 (statement -> import_statement .)
    STRING          reduce using rule 5 (statement -> import_statement .)
    FALSE           reduce using rule 5 (statement -> import_statement .)
    TRUE            reduce using rule 5 (statement -> import_statement .)
    FLOAT           reduce using rule 5 (statement -> import_statement .)
    HEX             reduce using rule 5 (statement -> import_statement .)
    INT             reduce using rule 5 (statement -> import_statement .)
    NULL            reduce using rule 5 (statement -> import_statement .)
    $end            reduce using rule 5 (statement -> import_statement .)
    }               reduce using rule 5 (statement -> import_statement .)


state 6

    (6) statement -> variable_operation .
    SANDBOX         reduce using rule 6 (statement -> variable_operation .)
    LIMPORT         reduce using rule 6 (statement -> variable_operation .)
    .               reduce using rule 6 (statement -> variable_operation .)
    IMPORT          reduce using rule 6 (statement -> variable_operation .)
    ID              reduce using rule 6 (statement -> variable_operation .)
    RETURN          reduce using rule 6 (statement -> variable_operation .)
    DEL             reduce using rule 6 (statement -> variable_operation .)
    !               reduce using rule 6 (statement -> variable_operation .)
    FOR             reduce using rule 6 (statement -> variable_operation .)
    DEBUG           reduce using rule 6 (statement -> variable_operation .)
    SKIP            reduce using rule 6 (statement -> variable_operation .)
    BREAK           reduce using rule 6 (statement -> variable_operation .)
    @               reduce using rule 6 (statement -> variable_operation .)
    [               reduce using rule 6 (statement -> variable_operation .)
    WHILE           reduce using rule 6 (statement -> variable_operation .)
    ?               reduce using rule 6 (statement -> variable_operation .)
    #               reduce using rule 6 (statement -> variable_operation .)
    NAMESPACE       reduce using rule 6 (statement -> variable_operation .)
    CLASS           reduce using rule 6 (statement -> variable_operation .)
    FUNC            reduce using rule 6 (statement -> variable_operation .)
    PYTHON_CODE_EXEC reduce using rule 6 (statement -> variable_operation .)
    PYTHON_CODE     reduce using rule 6 (statement -> variable_operation .)
    IF              reduce using rule 6 (statement -> variable_operation .)
    <               reduce using rule 6 (statement -> variable_operation .)
    (               reduce using rule 6 (statement -> variable_operation .)
    +               reduce using rule 6 (statement -> variable_operation .)
    -               reduce using rule 6 (statement -> variable_operation .)
    *               reduce using rule 6 (statement -> variable_operation .)
    &               reduce using rule 6 (statement -> variable_operation .)
    {               reduce using rule 6 (statement -> variable_operation .)
    CHAR            reduce using rule 6 (statement -> variable_operation .)
    STRING          reduce using rule 6 (statement -> variable_operation .)
    FALSE           reduce using rule 6 (statement -> variable_operation .)
    TRUE            reduce using rule 6 (statement -> variable_operation .)
    FLOAT           reduce using rule 6 (statement -> variable_operation .)
    HEX             reduce using rule 6 (statement -> variable_operation .)
    INT             reduce using rule 6 (statement -> variable_operation .)
    NULL            reduce using rule 6 (statement -> variable_operation .)
    $end            reduce using rule 6 (statement -> variable_operation .)
    }               reduce using rule 6 (statement -> variable_operation .)


state 7

    (7) statement -> return_statement .
    SANDBOX         reduce using rule 7 (statement -> return_statement .)
    LIMPORT         reduce using rule 7 (statement -> return_statement .)
    .               reduce using rule 7 (statement -> return_statement .)
    IMPORT          reduce using rule 7 (statement -> return_statement .)
    ID              reduce using rule 7 (statement -> return_statement .)
    RETURN          reduce using rule 7 (statement -> return_statement .)
    DEL             reduce using rule 7 (statement -> return_statement .)
    !               reduce using rule 7 (statement -> return_statement .)
    FOR             reduce using rule 7 (statement -> return_statement .)
    DEBUG           reduce using rule 7 (statement -> return_statement .)
    SKIP            reduce using rule 7 (statement -> return_statement .)
    BREAK           reduce using rule 7 (statement -> return_statement .)
    @               reduce using rule 7 (statement -> return_statement .)
    [               reduce using rule 7 (statement -> return_statement .)
    WHILE           reduce using rule 7 (statement -> return_statement .)
    ?               reduce using rule 7 (statement -> return_statement .)
    #               reduce using rule 7 (statement -> return_statement .)
    NAMESPACE       reduce using rule 7 (statement -> return_statement .)
    CLASS           reduce using rule 7 (statement -> return_statement .)
    FUNC            reduce using rule 7 (statement -> return_statement .)
    PYTHON_CODE_EXEC reduce using rule 7 (statement -> return_statement .)
    PYTHON_CODE     reduce using rule 7 (statement -> return_statement .)
    IF              reduce using rule 7 (statement -> return_statement .)
    <               reduce using rule 7 (statement -> return_statement .)
    (               reduce using rule 7 (statement -> return_statement .)
    +               reduce using rule 7 (statement -> return_statement .)
    -               reduce using rule 7 (statement -> return_statement .)
    *               reduce using rule 7 (statement -> return_statement .)
    &               reduce using rule 7 (statement -> return_statement .)
    {               reduce using rule 7 (statement -> return_statement .)
    CHAR            reduce using rule 7 (statement -> return_statement .)
    STRING          reduce using rule 7 (statement -> return_statement .)
    FALSE           reduce using rule 7 (statement -> return_statement .)
    TRUE            reduce using rule 7 (statement -> return_statement .)
    FLOAT           reduce using rule 7 (statement -> return_statement .)
    HEX             reduce using rule 7 (statement -> return_statement .)
    INT             reduce using rule 7 (statement -> return_statement .)
    NULL            reduce using rule 7 (statement -> return_statement .)
    $end            reduce using rule 7 (statement -> return_statement .)
    }               reduce using rule 7 (statement -> return_statement .)


state 8

    (8) statement -> delete_statement .
    SANDBOX         reduce using rule 8 (statement -> delete_statement .)
    LIMPORT         reduce using rule 8 (statement -> delete_statement .)
    .               reduce using rule 8 (statement -> delete_statement .)
    IMPORT          reduce using rule 8 (statement -> delete_statement .)
    ID              reduce using rule 8 (statement -> delete_statement .)
    RETURN          reduce using rule 8 (statement -> delete_statement .)
    DEL             reduce using rule 8 (statement -> delete_statement .)
    !               reduce using rule 8 (statement -> delete_statement .)
    FOR             reduce using rule 8 (statement -> delete_statement .)
    DEBUG           reduce using rule 8 (statement -> delete_statement .)
    SKIP            reduce using rule 8 (statement -> delete_statement .)
    BREAK           reduce using rule 8 (statement -> delete_statement .)
    @               reduce using rule 8 (statement -> delete_statement .)
    [               reduce using rule 8 (statement -> delete_statement .)
    WHILE           reduce using rule 8 (statement -> delete_statement .)
    ?               reduce using rule 8 (statement -> delete_statement .)
    #               reduce using rule 8 (statement -> delete_statement .)
    NAMESPACE       reduce using rule 8 (statement -> delete_statement .)
    CLASS           reduce using rule 8 (statement -> delete_statement .)
    FUNC            reduce using rule 8 (statement -> delete_statement .)
    PYTHON_CODE_EXEC reduce using rule 8 (statement -> delete_statement .)
    PYTHON_CODE     reduce using rule 8 (statement -> delete_statement .)
    IF              reduce using rule 8 (statement -> delete_statement .)
    <               reduce using rule 8 (statement -> delete_statement .)
    (               reduce using rule 8 (statement -> delete_statement .)
    +               reduce using rule 8 (statement -> delete_statement .)
    -               reduce using rule 8 (statement -> delete_statement .)
    *               reduce using rule 8 (statement -> delete_statement .)
    &               reduce using rule 8 (statement -> delete_statement .)
    {               reduce using rule 8 (statement -> delete_statement .)
    CHAR            reduce using rule 8 (statement -> delete_statement .)
    STRING          reduce using rule 8 (statement -> delete_statement .)
    FALSE           reduce using rule 8 (statement -> delete_statement .)
    TRUE            reduce using rule 8 (statement -> delete_statement .)
    FLOAT           reduce using rule 8 (statement -> delete_statement .)
    HEX             reduce using rule 8 (statement -> delete_statement .)
    INT             reduce using rule 8 (statement -> delete_statement .)
    NULL            reduce using rule 8 (statement -> delete_statement .)
    $end            reduce using rule 8 (statement -> delete_statement .)
    }               reduce using rule 8 (statement -> delete_statement .)


state 9

    (9) statement -> for_loop .
    SANDBOX         reduce using rule 9 (statement -> for_loop .)
    LIMPORT         reduce using rule 9 (statement -> for_loop .)
    .               reduce using rule 9 (statement -> for_loop .)
    IMPORT          reduce using rule 9 (statement -> for_loop .)
    ID              reduce using rule 9 (statement -> for_loop .)
    RETURN          reduce using rule 9 (statement -> for_loop .)
    DEL             reduce using rule 9 (statement -> for_loop .)
    !               reduce using rule 9 (statement -> for_loop .)
    FOR             reduce using rule 9 (statement -> for_loop .)
    DEBUG           reduce using rule 9 (statement -> for_loop .)
    SKIP            reduce using rule 9 (statement -> for_loop .)
    BREAK           reduce using rule 9 (statement -> for_loop .)
    @               reduce using rule 9 (statement -> for_loop .)
    [               reduce using rule 9 (statement -> for_loop .)
    WHILE           reduce using rule 9 (statement -> for_loop .)
    ?               reduce using rule 9 (statement -> for_loop .)
    #               reduce using rule 9 (statement -> for_loop .)
    NAMESPACE       reduce using rule 9 (statement -> for_loop .)
    CLASS           reduce using rule 9 (statement -> for_loop .)
    FUNC            reduce using rule 9 (statement -> for_loop .)
    PYTHON_CODE_EXEC reduce using rule 9 (statement -> for_loop .)
    PYTHON_CODE     reduce using rule 9 (statement -> for_loop .)
    IF              reduce using rule 9 (statement -> for_loop .)
    <               reduce using rule 9 (statement -> for_loop .)
    (               reduce using rule 9 (statement -> for_loop .)
    +               reduce using rule 9 (statement -> for_loop .)
    -               reduce using rule 9 (statement -> for_loop .)
    *               reduce using rule 9 (statement -> for_loop .)
    &               reduce using rule 9 (statement -> for_loop .)
    {               reduce using rule 9 (statement -> for_loop .)
    CHAR            reduce using rule 9 (statement -> for_loop .)
    STRING          reduce using rule 9 (statement -> for_loop .)
    FALSE           reduce using rule 9 (statement -> for_loop .)
    TRUE            reduce using rule 9 (statement -> for_loop .)
    FLOAT           reduce using rule 9 (statement -> for_loop .)
    HEX             reduce using rule 9 (statement -> for_loop .)
    INT             reduce using rule 9 (statement -> for_loop .)
    NULL            reduce using rule 9 (statement -> for_loop .)
    $end            reduce using rule 9 (statement -> for_loop .)
    }               reduce using rule 9 (statement -> for_loop .)


state 10

    (10) statement -> break_statement .
    SANDBOX         reduce using rule 10 (statement -> break_statement .)
    LIMPORT         reduce using rule 10 (statement -> break_statement .)
    .               reduce using rule 10 (statement -> break_statement .)
    IMPORT          reduce using rule 10 (statement -> break_statement .)
    ID              reduce using rule 10 (statement -> break_statement .)
    RETURN          reduce using rule 10 (statement -> break_statement .)
    DEL             reduce using rule 10 (statement -> break_statement .)
    !               reduce using rule 10 (statement -> break_statement .)
    FOR             reduce using rule 10 (statement -> break_statement .)
    DEBUG           reduce using rule 10 (statement -> break_statement .)
    SKIP            reduce using rule 10 (statement -> break_statement .)
    BREAK           reduce using rule 10 (statement -> break_statement .)
    @               reduce using rule 10 (statement -> break_statement .)
    [               reduce using rule 10 (statement -> break_statement .)
    WHILE           reduce using rule 10 (statement -> break_statement .)
    ?               reduce using rule 10 (statement -> break_statement .)
    #               reduce using rule 10 (statement -> break_statement .)
    NAMESPACE       reduce using rule 10 (statement -> break_statement .)
    CLASS           reduce using rule 10 (statement -> break_statement .)
    FUNC            reduce using rule 10 (statement -> break_statement .)
    PYTHON_CODE_EXEC reduce using rule 10 (statement -> break_statement .)
    PYTHON_CODE     reduce using rule 10 (statement -> break_statement .)
    IF              reduce using rule 10 (statement -> break_statement .)
    <               reduce using rule 10 (statement -> break_statement .)
    (               reduce using rule 10 (statement -> break_statement .)
    +               reduce using rule 10 (statement -> break_statement .)
    -               reduce using rule 10 (statement -> break_statement .)
    *               reduce using rule 10 (statement -> break_statement .)
    &               reduce using rule 10 (statement -> break_statement .)
    {               reduce using rule 10 (statement -> break_statement .)
    CHAR            reduce using rule 10 (statement -> break_statement .)
    STRING          reduce using rule 10 (statement -> break_statement .)
    FALSE           reduce using rule 10 (statement -> break_statement .)
    TRUE            reduce using rule 10 (statement -> break_statement .)
    FLOAT           reduce using rule 10 (statement -> break_statement .)
    HEX             reduce using rule 10 (statement -> break_statement .)
    INT             reduce using rule 10 (statement -> break_statement .)
    NULL            reduce using rule 10 (statement -> break_statement .)
    $end            reduce using rule 10 (statement -> break_statement .)
    }               reduce using rule 10 (statement -> break_statement .)


state 11

    (11) statement -> variable_assignment .
    SANDBOX         reduce using rule 11 (statement -> variable_assignment .)
    LIMPORT         reduce using rule 11 (statement -> variable_assignment .)
    .               reduce using rule 11 (statement -> variable_assignment .)
    IMPORT          reduce using rule 11 (statement -> variable_assignment .)
    ID              reduce using rule 11 (statement -> variable_assignment .)
    RETURN          reduce using rule 11 (statement -> variable_assignment .)
    DEL             reduce using rule 11 (statement -> variable_assignment .)
    !               reduce using rule 11 (statement -> variable_assignment .)
    FOR             reduce using rule 11 (statement -> variable_assignment .)
    DEBUG           reduce using rule 11 (statement -> variable_assignment .)
    SKIP            reduce using rule 11 (statement -> variable_assignment .)
    BREAK           reduce using rule 11 (statement -> variable_assignment .)
    @               reduce using rule 11 (statement -> variable_assignment .)
    [               reduce using rule 11 (statement -> variable_assignment .)
    WHILE           reduce using rule 11 (statement -> variable_assignment .)
    ?               reduce using rule 11 (statement -> variable_assignment .)
    #               reduce using rule 11 (statement -> variable_assignment .)
    NAMESPACE       reduce using rule 11 (statement -> variable_assignment .)
    CLASS           reduce using rule 11 (statement -> variable_assignment .)
    FUNC            reduce using rule 11 (statement -> variable_assignment .)
    PYTHON_CODE_EXEC reduce using rule 11 (statement -> variable_assignment .)
    PYTHON_CODE     reduce using rule 11 (statement -> variable_assignment .)
    IF              reduce using rule 11 (statement -> variable_assignment .)
    <               reduce using rule 11 (statement -> variable_assignment .)
    (               reduce using rule 11 (statement -> variable_assignment .)
    +               reduce using rule 11 (statement -> variable_assignment .)
    -               reduce using rule 11 (statement -> variable_assignment .)
    *               reduce using rule 11 (statement -> variable_assignment .)
    &               reduce using rule 11 (statement -> variable_assignment .)
    {               reduce using rule 11 (statement -> variable_assignment .)
    CHAR            reduce using rule 11 (statement -> variable_assignment .)
    STRING          reduce using rule 11 (statement -> variable_assignment .)
    FALSE           reduce using rule 11 (statement -> variable_assignment .)
    TRUE            reduce using rule 11 (statement -> variable_assignment .)
    FLOAT           reduce using rule 11 (statement -> variable_assignment .)
    HEX             reduce using rule 11 (statement -> variable_assignment .)
    INT             reduce using rule 11 (statement -> variable_assignment .)
    NULL            reduce using rule 11 (statement -> variable_assignment .)
    $end            reduce using rule 11 (statement -> variable_assignment .)
    }               reduce using rule 11 (statement -> variable_assignment .)


state 12

    (12) statement -> python_code_statement .
    SANDBOX         reduce using rule 12 (statement -> python_code_statement .)
    LIMPORT         reduce using rule 12 (statement -> python_code_statement .)
    .               reduce using rule 12 (statement -> python_code_statement .)
    IMPORT          reduce using rule 12 (statement -> python_code_statement .)
    ID              reduce using rule 12 (statement -> python_code_statement .)
    RETURN          reduce using rule 12 (statement -> python_code_statement .)
    DEL             reduce using rule 12 (statement -> python_code_statement .)
    !               reduce using rule 12 (statement -> python_code_statement .)
    FOR             reduce using rule 12 (statement -> python_code_statement .)
    DEBUG           reduce using rule 12 (statement -> python_code_statement .)
    SKIP            reduce using rule 12 (statement -> python_code_statement .)
    BREAK           reduce using rule 12 (statement -> python_code_statement .)
    @               reduce using rule 12 (statement -> python_code_statement .)
    [               reduce using rule 12 (statement -> python_code_statement .)
    WHILE           reduce using rule 12 (statement -> python_code_statement .)
    ?               reduce using rule 12 (statement -> python_code_statement .)
    #               reduce using rule 12 (statement -> python_code_statement .)
    NAMESPACE       reduce using rule 12 (statement -> python_code_statement .)
    CLASS           reduce using rule 12 (statement -> python_code_statement .)
    FUNC            reduce using rule 12 (statement -> python_code_statement .)
    PYTHON_CODE_EXEC reduce using rule 12 (statement -> python_code_statement .)
    PYTHON_CODE     reduce using rule 12 (statement -> python_code_statement .)
    IF              reduce using rule 12 (statement -> python_code_statement .)
    <               reduce using rule 12 (statement -> python_code_statement .)
    (               reduce using rule 12 (statement -> python_code_statement .)
    +               reduce using rule 12 (statement -> python_code_statement .)
    -               reduce using rule 12 (statement -> python_code_statement .)
    *               reduce using rule 12 (statement -> python_code_statement .)
    &               reduce using rule 12 (statement -> python_code_statement .)
    {               reduce using rule 12 (statement -> python_code_statement .)
    CHAR            reduce using rule 12 (statement -> python_code_statement .)
    STRING          reduce using rule 12 (statement -> python_code_statement .)
    FALSE           reduce using rule 12 (statement -> python_code_statement .)
    TRUE            reduce using rule 12 (statement -> python_code_statement .)
    FLOAT           reduce using rule 12 (statement -> python_code_statement .)
    HEX             reduce using rule 12 (statement -> python_code_statement .)
    INT             reduce using rule 12 (statement -> python_code_statement .)
    NULL            reduce using rule 12 (statement -> python_code_statement .)
    $end            reduce using rule 12 (statement -> python_code_statement .)
    }               reduce using rule 12 (statement -> python_code_statement .)


state 13

    (13) statement -> while_loop .
    SANDBOX         reduce using rule 13 (statement -> while_loop .)
    LIMPORT         reduce using rule 13 (statement -> while_loop .)
    .               reduce using rule 13 (statement -> while_loop .)
    IMPORT          reduce using rule 13 (statement -> while_loop .)
    ID              reduce using rule 13 (statement -> while_loop .)
    RETURN          reduce using rule 13 (statement -> while_loop .)
    DEL             reduce using rule 13 (statement -> while_loop .)
    !               reduce using rule 13 (statement -> while_loop .)
    FOR             reduce using rule 13 (statement -> while_loop .)
    DEBUG           reduce using rule 13 (statement -> while_loop .)
    SKIP            reduce using rule 13 (statement -> while_loop .)
    BREAK           reduce using rule 13 (statement -> while_loop .)
    @               reduce using rule 13 (statement -> while_loop .)
    [               reduce using rule 13 (statement -> while_loop .)
    WHILE           reduce using rule 13 (statement -> while_loop .)
    ?               reduce using rule 13 (statement -> while_loop .)
    #               reduce using rule 13 (statement -> while_loop .)
    NAMESPACE       reduce using rule 13 (statement -> while_loop .)
    CLASS           reduce using rule 13 (statement -> while_loop .)
    FUNC            reduce using rule 13 (statement -> while_loop .)
    PYTHON_CODE_EXEC reduce using rule 13 (statement -> while_loop .)
    PYTHON_CODE     reduce using rule 13 (statement -> while_loop .)
    IF              reduce using rule 13 (statement -> while_loop .)
    <               reduce using rule 13 (statement -> while_loop .)
    (               reduce using rule 13 (statement -> while_loop .)
    +               reduce using rule 13 (statement -> while_loop .)
    -               reduce using rule 13 (statement -> while_loop .)
    *               reduce using rule 13 (statement -> while_loop .)
    &               reduce using rule 13 (statement -> while_loop .)
    {               reduce using rule 13 (statement -> while_loop .)
    CHAR            reduce using rule 13 (statement -> while_loop .)
    STRING          reduce using rule 13 (statement -> while_loop .)
    FALSE           reduce using rule 13 (statement -> while_loop .)
    TRUE            reduce using rule 13 (statement -> while_loop .)
    FLOAT           reduce using rule 13 (statement -> while_loop .)
    HEX             reduce using rule 13 (statement -> while_loop .)
    INT             reduce using rule 13 (statement -> while_loop .)
    NULL            reduce using rule 13 (statement -> while_loop .)
    $end            reduce using rule 13 (statement -> while_loop .)
    }               reduce using rule 13 (statement -> while_loop .)


state 14

    (14) statement -> conditional .
    SANDBOX         reduce using rule 14 (statement -> conditional .)
    LIMPORT         reduce using rule 14 (statement -> conditional .)
    .               reduce using rule 14 (statement -> conditional .)
    IMPORT          reduce using rule 14 (statement -> conditional .)
    ID              reduce using rule 14 (statement -> conditional .)
    RETURN          reduce using rule 14 (statement -> conditional .)
    DEL             reduce using rule 14 (statement -> conditional .)
    !               reduce using rule 14 (statement -> conditional .)
    FOR             reduce using rule 14 (statement -> conditional .)
    DEBUG           reduce using rule 14 (statement -> conditional .)
    SKIP            reduce using rule 14 (statement -> conditional .)
    BREAK           reduce using rule 14 (statement -> conditional .)
    @               reduce using rule 14 (statement -> conditional .)
    [               reduce using rule 14 (statement -> conditional .)
    WHILE           reduce using rule 14 (statement -> conditional .)
    ?               reduce using rule 14 (statement -> conditional .)
    #               reduce using rule 14 (statement -> conditional .)
    NAMESPACE       reduce using rule 14 (statement -> conditional .)
    CLASS           reduce using rule 14 (statement -> conditional .)
    FUNC            reduce using rule 14 (statement -> conditional .)
    PYTHON_CODE_EXEC reduce using rule 14 (statement -> conditional .)
    PYTHON_CODE     reduce using rule 14 (statement -> conditional .)
    IF              reduce using rule 14 (statement -> conditional .)
    <               reduce using rule 14 (statement -> conditional .)
    (               reduce using rule 14 (statement -> conditional .)
    +               reduce using rule 14 (statement -> conditional .)
    -               reduce using rule 14 (statement -> conditional .)
    *               reduce using rule 14 (statement -> conditional .)
    &               reduce using rule 14 (statement -> conditional .)
    {               reduce using rule 14 (statement -> conditional .)
    CHAR            reduce using rule 14 (statement -> conditional .)
    STRING          reduce using rule 14 (statement -> conditional .)
    FALSE           reduce using rule 14 (statement -> conditional .)
    TRUE            reduce using rule 14 (statement -> conditional .)
    FLOAT           reduce using rule 14 (statement -> conditional .)
    HEX             reduce using rule 14 (statement -> conditional .)
    INT             reduce using rule 14 (statement -> conditional .)
    NULL            reduce using rule 14 (statement -> conditional .)
    $end            reduce using rule 14 (statement -> conditional .)
    }               reduce using rule 14 (statement -> conditional .)


state 15

    (15) statement -> class_attribute_assignment .
    SANDBOX         reduce using rule 15 (statement -> class_attribute_assignment .)
    LIMPORT         reduce using rule 15 (statement -> class_attribute_assignment .)
    .               reduce using rule 15 (statement -> class_attribute_assignment .)
    IMPORT          reduce using rule 15 (statement -> class_attribute_assignment .)
    ID              reduce using rule 15 (statement -> class_attribute_assignment .)
    RETURN          reduce using rule 15 (statement -> class_attribute_assignment .)
    DEL             reduce using rule 15 (statement -> class_attribute_assignment .)
    !               reduce using rule 15 (statement -> class_attribute_assignment .)
    FOR             reduce using rule 15 (statement -> class_attribute_assignment .)
    DEBUG           reduce using rule 15 (statement -> class_attribute_assignment .)
    SKIP            reduce using rule 15 (statement -> class_attribute_assignment .)
    BREAK           reduce using rule 15 (statement -> class_attribute_assignment .)
    @               reduce using rule 15 (statement -> class_attribute_assignment .)
    [               reduce using rule 15 (statement -> class_attribute_assignment .)
    WHILE           reduce using rule 15 (statement -> class_attribute_assignment .)
    ?               reduce using rule 15 (statement -> class_attribute_assignment .)
    #               reduce using rule 15 (statement -> class_attribute_assignment .)
    NAMESPACE       reduce using rule 15 (statement -> class_attribute_assignment .)
    CLASS           reduce using rule 15 (statement -> class_attribute_assignment .)
    FUNC            reduce using rule 15 (statement -> class_attribute_assignment .)
    PYTHON_CODE_EXEC reduce using rule 15 (statement -> class_attribute_assignment .)
    PYTHON_CODE     reduce using rule 15 (statement -> class_attribute_assignment .)
    IF              reduce using rule 15 (statement -> class_attribute_assignment .)
    <               reduce using rule 15 (statement -> class_attribute_assignment .)
    (               reduce using rule 15 (statement -> class_attribute_assignment .)
    +               reduce using rule 15 (statement -> class_attribute_assignment .)
    -               reduce using rule 15 (statement -> class_attribute_assignment .)
    *               reduce using rule 15 (statement -> class_attribute_assignment .)
    &               reduce using rule 15 (statement -> class_attribute_assignment .)
    {               reduce using rule 15 (statement -> class_attribute_assignment .)
    CHAR            reduce using rule 15 (statement -> class_attribute_assignment .)
    STRING          reduce using rule 15 (statement -> class_attribute_assignment .)
    FALSE           reduce using rule 15 (statement -> class_attribute_assignment .)
    TRUE            reduce using rule 15 (statement -> class_attribute_assignment .)
    FLOAT           reduce using rule 15 (statement -> class_attribute_assignment .)
    HEX             reduce using rule 15 (statement -> class_attribute_assignment .)
    INT             reduce using rule 15 (statement -> class_attribute_assignment .)
    NULL            reduce using rule 15 (statement -> class_attribute_assignment .)
    $end            reduce using rule 15 (statement -> class_attribute_assignment .)
    }               reduce using rule 15 (statement -> class_attribute_assignment .)


state 16

    (16) statement -> function_call_statement .
    SANDBOX         reduce using rule 16 (statement -> function_call_statement .)
    LIMPORT         reduce using rule 16 (statement -> function_call_statement .)
    .               reduce using rule 16 (statement -> function_call_statement .)
    IMPORT          reduce using rule 16 (statement -> function_call_statement .)
    ID              reduce using rule 16 (statement -> function_call_statement .)
    RETURN          reduce using rule 16 (statement -> function_call_statement .)
    DEL             reduce using rule 16 (statement -> function_call_statement .)
    !               reduce using rule 16 (statement -> function_call_statement .)
    FOR             reduce using rule 16 (statement -> function_call_statement .)
    DEBUG           reduce using rule 16 (statement -> function_call_statement .)
    SKIP            reduce using rule 16 (statement -> function_call_statement .)
    BREAK           reduce using rule 16 (statement -> function_call_statement .)
    @               reduce using rule 16 (statement -> function_call_statement .)
    [               reduce using rule 16 (statement -> function_call_statement .)
    WHILE           reduce using rule 16 (statement -> function_call_statement .)
    ?               reduce using rule 16 (statement -> function_call_statement .)
    #               reduce using rule 16 (statement -> function_call_statement .)
    NAMESPACE       reduce using rule 16 (statement -> function_call_statement .)
    CLASS           reduce using rule 16 (statement -> function_call_statement .)
    FUNC            reduce using rule 16 (statement -> function_call_statement .)
    PYTHON_CODE_EXEC reduce using rule 16 (statement -> function_call_statement .)
    PYTHON_CODE     reduce using rule 16 (statement -> function_call_statement .)
    IF              reduce using rule 16 (statement -> function_call_statement .)
    <               reduce using rule 16 (statement -> function_call_statement .)
    (               reduce using rule 16 (statement -> function_call_statement .)
    +               reduce using rule 16 (statement -> function_call_statement .)
    -               reduce using rule 16 (statement -> function_call_statement .)
    *               reduce using rule 16 (statement -> function_call_statement .)
    &               reduce using rule 16 (statement -> function_call_statement .)
    {               reduce using rule 16 (statement -> function_call_statement .)
    CHAR            reduce using rule 16 (statement -> function_call_statement .)
    STRING          reduce using rule 16 (statement -> function_call_statement .)
    FALSE           reduce using rule 16 (statement -> function_call_statement .)
    TRUE            reduce using rule 16 (statement -> function_call_statement .)
    FLOAT           reduce using rule 16 (statement -> function_call_statement .)
    HEX             reduce using rule 16 (statement -> function_call_statement .)
    INT             reduce using rule 16 (statement -> function_call_statement .)
    NULL            reduce using rule 16 (statement -> function_call_statement .)
    $end            reduce using rule 16 (statement -> function_call_statement .)
    }               reduce using rule 16 (statement -> function_call_statement .)


state 17

    (17) statement -> class_declaration .
    SANDBOX         reduce using rule 17 (statement -> class_declaration .)
    LIMPORT         reduce using rule 17 (statement -> class_declaration .)
    .               reduce using rule 17 (statement -> class_declaration .)
    IMPORT          reduce using rule 17 (statement -> class_declaration .)
    ID              reduce using rule 17 (statement -> class_declaration .)
    RETURN          reduce using rule 17 (statement -> class_declaration .)
    DEL             reduce using rule 17 (statement -> class_declaration .)
    !               reduce using rule 17 (statement -> class_declaration .)
    FOR             reduce using rule 17 (statement -> class_declaration .)
    DEBUG           reduce using rule 17 (statement -> class_declaration .)
    SKIP            reduce using rule 17 (statement -> class_declaration .)
    BREAK           reduce using rule 17 (statement -> class_declaration .)
    @               reduce using rule 17 (statement -> class_declaration .)
    [               reduce using rule 17 (statement -> class_declaration .)
    WHILE           reduce using rule 17 (statement -> class_declaration .)
    ?               reduce using rule 17 (statement -> class_declaration .)
    #               reduce using rule 17 (statement -> class_declaration .)
    NAMESPACE       reduce using rule 17 (statement -> class_declaration .)
    CLASS           reduce using rule 17 (statement -> class_declaration .)
    FUNC            reduce using rule 17 (statement -> class_declaration .)
    PYTHON_CODE_EXEC reduce using rule 17 (statement -> class_declaration .)
    PYTHON_CODE     reduce using rule 17 (statement -> class_declaration .)
    IF              reduce using rule 17 (statement -> class_declaration .)
    <               reduce using rule 17 (statement -> class_declaration .)
    (               reduce using rule 17 (statement -> class_declaration .)
    +               reduce using rule 17 (statement -> class_declaration .)
    -               reduce using rule 17 (statement -> class_declaration .)
    *               reduce using rule 17 (statement -> class_declaration .)
    &               reduce using rule 17 (statement -> class_declaration .)
    {               reduce using rule 17 (statement -> class_declaration .)
    CHAR            reduce using rule 17 (statement -> class_declaration .)
    STRING          reduce using rule 17 (statement -> class_declaration .)
    FALSE           reduce using rule 17 (statement -> class_declaration .)
    TRUE            reduce using rule 17 (statement -> class_declaration .)
    FLOAT           reduce using rule 17 (statement -> class_declaration .)
    HEX             reduce using rule 17 (statement -> class_declaration .)
    INT             reduce using rule 17 (statement -> class_declaration .)
    NULL            reduce using rule 17 (statement -> class_declaration .)
    $end            reduce using rule 17 (statement -> class_declaration .)
    }               reduce using rule 17 (statement -> class_declaration .)


state 18

    (18) statement -> function_declaration .
    SANDBOX         reduce using rule 18 (statement -> function_declaration .)
    LIMPORT         reduce using rule 18 (statement -> function_declaration .)
    .               reduce using rule 18 (statement -> function_declaration .)
    IMPORT          reduce using rule 18 (statement -> function_declaration .)
    ID              reduce using rule 18 (statement -> function_declaration .)
    RETURN          reduce using rule 18 (statement -> function_declaration .)
    DEL             reduce using rule 18 (statement -> function_declaration .)
    !               reduce using rule 18 (statement -> function_declaration .)
    FOR             reduce using rule 18 (statement -> function_declaration .)
    DEBUG           reduce using rule 18 (statement -> function_declaration .)
    SKIP            reduce using rule 18 (statement -> function_declaration .)
    BREAK           reduce using rule 18 (statement -> function_declaration .)
    @               reduce using rule 18 (statement -> function_declaration .)
    [               reduce using rule 18 (statement -> function_declaration .)
    WHILE           reduce using rule 18 (statement -> function_declaration .)
    ?               reduce using rule 18 (statement -> function_declaration .)
    #               reduce using rule 18 (statement -> function_declaration .)
    NAMESPACE       reduce using rule 18 (statement -> function_declaration .)
    CLASS           reduce using rule 18 (statement -> function_declaration .)
    FUNC            reduce using rule 18 (statement -> function_declaration .)
    PYTHON_CODE_EXEC reduce using rule 18 (statement -> function_declaration .)
    PYTHON_CODE     reduce using rule 18 (statement -> function_declaration .)
    IF              reduce using rule 18 (statement -> function_declaration .)
    <               reduce using rule 18 (statement -> function_declaration .)
    (               reduce using rule 18 (statement -> function_declaration .)
    +               reduce using rule 18 (statement -> function_declaration .)
    -               reduce using rule 18 (statement -> function_declaration .)
    *               reduce using rule 18 (statement -> function_declaration .)
    &               reduce using rule 18 (statement -> function_declaration .)
    {               reduce using rule 18 (statement -> function_declaration .)
    CHAR            reduce using rule 18 (statement -> function_declaration .)
    STRING          reduce using rule 18 (statement -> function_declaration .)
    FALSE           reduce using rule 18 (statement -> function_declaration .)
    TRUE            reduce using rule 18 (statement -> function_declaration .)
    FLOAT           reduce using rule 18 (statement -> function_declaration .)
    HEX             reduce using rule 18 (statement -> function_declaration .)
    INT             reduce using rule 18 (statement -> function_declaration .)
    NULL            reduce using rule 18 (statement -> function_declaration .)
    $end            reduce using rule 18 (statement -> function_declaration .)
    }               reduce using rule 18 (statement -> function_declaration .)


state 19

    (19) sandbox -> SANDBOX . { program }
    {               shift and go to state 75


state 20

    (150) assoc_array -> { . assoc_array_items }
    (130) _tuple -> { . positional_args , }
    (131) _tuple -> { . positional_args }
    (151) assoc_array_items -> . expression : expression
    (152) assoc_array_items -> . assoc_array_items , expression : expression
    (61) positional_args -> . expression
    (62) positional_args -> . positional_args , expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    assoc_array_items              shift and go to state 76
    positional_args                shift and go to state 77
    expression                     shift and go to state 78
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 21

    (20) sandbox -> LIMPORT . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 87
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 22

    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104


state 23

    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    SELFISH         shift and go to state 105
    GLOBAL          shift and go to state 106
    ENV             shift and go to state 107


state 24

    (88) import_statement -> IMPORT . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 108
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 25

    (65) variable_operation -> get_index . EQ_DIV expression ;
    (67) variable_operation -> get_index . EQ_MOD expression ;
    (69) variable_operation -> get_index . EQ_MUL expression ;
    (71) variable_operation -> get_index . EQ_SUB expression ;
    (73) variable_operation -> get_index . EQ_ADD expression ;
    (38) variable_assignment -> get_index . = expression ;
    (101) expression -> get_index .
    EQ_DIV          shift and go to state 109
    EQ_MOD          shift and go to state 110
    EQ_MUL          shift and go to state 111
    EQ_SUB          shift and go to state 112
    EQ_ADD          shift and go to state 113
    =               shift and go to state 114
    [               reduce using rule 101 (expression -> get_index .)
    (               reduce using rule 101 (expression -> get_index .)
    :               reduce using rule 101 (expression -> get_index .)
    >               reduce using rule 101 (expression -> get_index .)
    <               reduce using rule 101 (expression -> get_index .)
    &               reduce using rule 101 (expression -> get_index .)
    ^               reduce using rule 101 (expression -> get_index .)
    |               reduce using rule 101 (expression -> get_index .)
    EQ_GREATER      reduce using rule 101 (expression -> get_index .)
    EQ_LESS         reduce using rule 101 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 101 (expression -> get_index .)
    EQEQ            reduce using rule 101 (expression -> get_index .)
    %               reduce using rule 101 (expression -> get_index .)
    *               reduce using rule 101 (expression -> get_index .)
    /               reduce using rule 101 (expression -> get_index .)
    -               reduce using rule 101 (expression -> get_index .)
    +               reduce using rule 101 (expression -> get_index .)


state 26

    (66) variable_operation -> ID . EQ_DIV expression ;
    (68) variable_operation -> ID . EQ_MOD expression ;
    (70) variable_operation -> ID . EQ_MUL expression ;
    (72) variable_operation -> ID . EQ_SUB expression ;
    (74) variable_operation -> ID . EQ_ADD expression ;
    (40) variable_assignment -> ID . = expression ;
    (41) variable_assignment -> ID . < ID > ID = expression ;
    (42) variable_assignment -> ID . ID = [ HEX , ID ] ;
    (43) variable_assignment -> ID . ID = expression ;
    (44) variable_assignment -> ID . - - ;
    (45) variable_assignment -> ID . + + ;
    (31) function_call -> ID . TARROW ID
    (126) expression -> ID . ID [ expression ]
    (127) expression -> ID . ID
    (149) id -> ID .
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    EQ_DIV          shift and go to state 116
    EQ_MOD          shift and go to state 117
    EQ_MUL          shift and go to state 118
    EQ_SUB          shift and go to state 119
    EQ_ADD          shift and go to state 120
    =               shift and go to state 121
    <               shift and go to state 122
    ID              shift and go to state 115
    -               shift and go to state 123
    +               shift and go to state 124
    TARROW          shift and go to state 125
    [               reduce using rule 149 (id -> ID .)
    (               reduce using rule 149 (id -> ID .)
    :               reduce using rule 149 (id -> ID .)
    >               reduce using rule 149 (id -> ID .)
    &               reduce using rule 149 (id -> ID .)
    ^               reduce using rule 149 (id -> ID .)
    |               reduce using rule 149 (id -> ID .)
    EQ_GREATER      reduce using rule 149 (id -> ID .)
    EQ_LESS         reduce using rule 149 (id -> ID .)
    NOT_EQEQ        reduce using rule 149 (id -> ID .)
    EQEQ            reduce using rule 149 (id -> ID .)
    %               reduce using rule 149 (id -> ID .)
    *               reduce using rule 149 (id -> ID .)
    /               reduce using rule 149 (id -> ID .)


state 27

    (26) return_statement -> RETURN . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 126
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 28

    (85) delete_statement -> DEL . ID ;
    ID              shift and go to state 127


state 29

    (58) for_loop -> ! . FOR expression IN expression { program }
    (109) expression -> ! . expression
    (148) class_attribute -> ! . expression ? ID
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    FOR             shift and go to state 128
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 129
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 30

    (59) for_loop -> FOR . expression IN expression { program }
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 130
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 31

    (23) break_statement -> DEBUG . ;
    ;               shift and go to state 131


state 32

    (24) break_statement -> SKIP . ;
    ;               shift and go to state 132


state 33

    (25) break_statement -> BREAK . ;
    ;               shift and go to state 133


state 34

    (39) variable_assignment -> @ . ID ID = expression ;
    ID              shift and go to state 134


state 35

    (30) function_call -> < . ID > expression
    ID              shift and go to state 135


state 36

    (46) variable_assignment -> [ . HEX , ID ] = expression ;
    (132) _list -> [ . positional_args , ]
    (133) _list -> [ . positional_args ]
    (61) positional_args -> . expression
    (62) positional_args -> . positional_args , expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    HEX             shift and go to state 136
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 137
    positional_args                shift and go to state 138
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 37

    (142) hex -> HEX .
    [               reduce using rule 142 (hex -> HEX .)
    (               reduce using rule 142 (hex -> HEX .)
    :               reduce using rule 142 (hex -> HEX .)
    >               reduce using rule 142 (hex -> HEX .)
    <               reduce using rule 142 (hex -> HEX .)
    &               reduce using rule 142 (hex -> HEX .)
    ^               reduce using rule 142 (hex -> HEX .)
    |               reduce using rule 142 (hex -> HEX .)
    EQ_GREATER      reduce using rule 142 (hex -> HEX .)
    EQ_LESS         reduce using rule 142 (hex -> HEX .)
    NOT_EQEQ        reduce using rule 142 (hex -> HEX .)
    EQEQ            reduce using rule 142 (hex -> HEX .)
    %               reduce using rule 142 (hex -> HEX .)
    *               reduce using rule 142 (hex -> HEX .)
    /               reduce using rule 142 (hex -> HEX .)
    -               reduce using rule 142 (hex -> HEX .)
    +               reduce using rule 142 (hex -> HEX .)
    ,               reduce using rule 142 (hex -> HEX .)
    }               reduce using rule 142 (hex -> HEX .)
    ;               reduce using rule 142 (hex -> HEX .)
    ?               reduce using rule 142 (hex -> HEX .)
    IN              reduce using rule 142 (hex -> HEX .)
    ]               reduce using rule 142 (hex -> HEX .)
    )               reduce using rule 142 (hex -> HEX .)
    {               reduce using rule 142 (hex -> HEX .)
    SANDBOX         reduce using rule 142 (hex -> HEX .)
    LIMPORT         reduce using rule 142 (hex -> HEX .)
    .               reduce using rule 142 (hex -> HEX .)
    IMPORT          reduce using rule 142 (hex -> HEX .)
    ID              reduce using rule 142 (hex -> HEX .)
    RETURN          reduce using rule 142 (hex -> HEX .)
    DEL             reduce using rule 142 (hex -> HEX .)
    !               reduce using rule 142 (hex -> HEX .)
    FOR             reduce using rule 142 (hex -> HEX .)
    DEBUG           reduce using rule 142 (hex -> HEX .)
    SKIP            reduce using rule 142 (hex -> HEX .)
    BREAK           reduce using rule 142 (hex -> HEX .)
    @               reduce using rule 142 (hex -> HEX .)
    WHILE           reduce using rule 142 (hex -> HEX .)
    #               reduce using rule 142 (hex -> HEX .)
    NAMESPACE       reduce using rule 142 (hex -> HEX .)
    CLASS           reduce using rule 142 (hex -> HEX .)
    FUNC            reduce using rule 142 (hex -> HEX .)
    PYTHON_CODE_EXEC reduce using rule 142 (hex -> HEX .)
    PYTHON_CODE     reduce using rule 142 (hex -> HEX .)
    IF              reduce using rule 142 (hex -> HEX .)
    CHAR            reduce using rule 142 (hex -> HEX .)
    STRING          reduce using rule 142 (hex -> HEX .)
    FALSE           reduce using rule 142 (hex -> HEX .)
    TRUE            reduce using rule 142 (hex -> HEX .)
    FLOAT           reduce using rule 142 (hex -> HEX .)
    HEX             reduce using rule 142 (hex -> HEX .)
    INT             reduce using rule 142 (hex -> HEX .)
    NULL            reduce using rule 142 (hex -> HEX .)
    $end            reduce using rule 142 (hex -> HEX .)


state 38

    (123) expression -> - . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 139
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 39

    (122) expression -> + . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 140
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 40

    (22) python_code_statement -> python_code . ;
    (103) expression -> python_code .
    ;               shift and go to state 141
    [               reduce using rule 103 (expression -> python_code .)
    (               reduce using rule 103 (expression -> python_code .)
    :               reduce using rule 103 (expression -> python_code .)
    >               reduce using rule 103 (expression -> python_code .)
    <               reduce using rule 103 (expression -> python_code .)
    &               reduce using rule 103 (expression -> python_code .)
    ^               reduce using rule 103 (expression -> python_code .)
    |               reduce using rule 103 (expression -> python_code .)
    EQ_GREATER      reduce using rule 103 (expression -> python_code .)
    EQ_LESS         reduce using rule 103 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 103 (expression -> python_code .)
    EQEQ            reduce using rule 103 (expression -> python_code .)
    %               reduce using rule 103 (expression -> python_code .)
    *               reduce using rule 103 (expression -> python_code .)
    /               reduce using rule 103 (expression -> python_code .)
    -               reduce using rule 103 (expression -> python_code .)
    +               reduce using rule 103 (expression -> python_code .)


state 41

    (60) while_loop -> WHILE . ( expression ) { program }
    (               shift and go to state 142


state 42

    (104) expression -> ( . expression )
    (134) _numpy -> ( . , )
    (135) _numpy -> ( . )
    (136) _numpy -> ( . expression , )
    (137) _numpy -> ( . items , )
    (138) _numpy -> ( . items )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (139) items -> . expression , expression
    (140) items -> . items , expression
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    ,               shift and go to state 145
    )               shift and go to state 144
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 143
    items                          shift and go to state 146
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 43

    (76) conditional -> if_statement . else_statement
    (77) conditional -> if_statement . else_if_loop else_statement
    (78) conditional -> if_statement . else_if_loop
    (79) conditional -> if_statement .
    (84) else_statement -> . ELSE { program }
    (81) else_if_loop -> . else_if_statement
    (82) else_if_loop -> . else_if_loop else_if_statement
    (83) else_if_statement -> . ELSE IF ( expression ) { program }
    SANDBOX         reduce using rule 79 (conditional -> if_statement .)
    LIMPORT         reduce using rule 79 (conditional -> if_statement .)
    .               reduce using rule 79 (conditional -> if_statement .)
    IMPORT          reduce using rule 79 (conditional -> if_statement .)
    ID              reduce using rule 79 (conditional -> if_statement .)
    RETURN          reduce using rule 79 (conditional -> if_statement .)
    DEL             reduce using rule 79 (conditional -> if_statement .)
    !               reduce using rule 79 (conditional -> if_statement .)
    FOR             reduce using rule 79 (conditional -> if_statement .)
    DEBUG           reduce using rule 79 (conditional -> if_statement .)
    SKIP            reduce using rule 79 (conditional -> if_statement .)
    BREAK           reduce using rule 79 (conditional -> if_statement .)
    @               reduce using rule 79 (conditional -> if_statement .)
    [               reduce using rule 79 (conditional -> if_statement .)
    WHILE           reduce using rule 79 (conditional -> if_statement .)
    ?               reduce using rule 79 (conditional -> if_statement .)
    #               reduce using rule 79 (conditional -> if_statement .)
    NAMESPACE       reduce using rule 79 (conditional -> if_statement .)
    CLASS           reduce using rule 79 (conditional -> if_statement .)
    FUNC            reduce using rule 79 (conditional -> if_statement .)
    PYTHON_CODE_EXEC reduce using rule 79 (conditional -> if_statement .)
    PYTHON_CODE     reduce using rule 79 (conditional -> if_statement .)
    IF              reduce using rule 79 (conditional -> if_statement .)
    <               reduce using rule 79 (conditional -> if_statement .)
    (               reduce using rule 79 (conditional -> if_statement .)
    +               reduce using rule 79 (conditional -> if_statement .)
    -               reduce using rule 79 (conditional -> if_statement .)
    *               reduce using rule 79 (conditional -> if_statement .)
    &               reduce using rule 79 (conditional -> if_statement .)
    {               reduce using rule 79 (conditional -> if_statement .)
    CHAR            reduce using rule 79 (conditional -> if_statement .)
    STRING          reduce using rule 79 (conditional -> if_statement .)
    FALSE           reduce using rule 79 (conditional -> if_statement .)
    TRUE            reduce using rule 79 (conditional -> if_statement .)
    FLOAT           reduce using rule 79 (conditional -> if_statement .)
    HEX             reduce using rule 79 (conditional -> if_statement .)
    INT             reduce using rule 79 (conditional -> if_statement .)
    NULL            reduce using rule 79 (conditional -> if_statement .)
    $end            reduce using rule 79 (conditional -> if_statement .)
    }               reduce using rule 79 (conditional -> if_statement .)
    ELSE            shift and go to state 149

    else_statement                 shift and go to state 147
    else_if_loop                   shift and go to state 148
    else_if_statement              shift and go to state 150

state 44

    (75) class_attribute_assignment -> ? . !
    !               shift and go to state 151


state 45

    (21) function_call_statement -> function_call . ;
    (102) expression -> function_call .
    ;               shift and go to state 152
    [               reduce using rule 102 (expression -> function_call .)
    (               reduce using rule 102 (expression -> function_call .)
    :               reduce using rule 102 (expression -> function_call .)
    >               reduce using rule 102 (expression -> function_call .)
    <               reduce using rule 102 (expression -> function_call .)
    &               reduce using rule 102 (expression -> function_call .)
    ^               reduce using rule 102 (expression -> function_call .)
    |               reduce using rule 102 (expression -> function_call .)
    EQ_GREATER      reduce using rule 102 (expression -> function_call .)
    EQ_LESS         reduce using rule 102 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 102 (expression -> function_call .)
    EQEQ            reduce using rule 102 (expression -> function_call .)
    %               reduce using rule 102 (expression -> function_call .)
    *               reduce using rule 102 (expression -> function_call .)
    /               reduce using rule 102 (expression -> function_call .)
    -               reduce using rule 102 (expression -> function_call .)
    +               reduce using rule 102 (expression -> function_call .)


state 46

    (54) class_declaration -> # . EMBED [ ID , ID ] string
    (55) class_declaration -> # . EMBED [ ID ] string
    (32) function_call -> # . DEPENDS expression
    (33) function_call -> # . ID expression
    EMBED           shift and go to state 153
    DEPENDS         shift and go to state 155
    ID              shift and go to state 154


state 47

    (95) expression -> string .
    [               reduce using rule 95 (expression -> string .)
    (               reduce using rule 95 (expression -> string .)
    :               reduce using rule 95 (expression -> string .)
    >               reduce using rule 95 (expression -> string .)
    <               reduce using rule 95 (expression -> string .)
    &               reduce using rule 95 (expression -> string .)
    ^               reduce using rule 95 (expression -> string .)
    |               reduce using rule 95 (expression -> string .)
    EQ_GREATER      reduce using rule 95 (expression -> string .)
    EQ_LESS         reduce using rule 95 (expression -> string .)
    NOT_EQEQ        reduce using rule 95 (expression -> string .)
    EQEQ            reduce using rule 95 (expression -> string .)
    %               reduce using rule 95 (expression -> string .)
    *               reduce using rule 95 (expression -> string .)
    /               reduce using rule 95 (expression -> string .)
    -               reduce using rule 95 (expression -> string .)
    +               reduce using rule 95 (expression -> string .)
    ,               reduce using rule 95 (expression -> string .)
    }               reduce using rule 95 (expression -> string .)
    ;               reduce using rule 95 (expression -> string .)
    ?               reduce using rule 95 (expression -> string .)
    IN              reduce using rule 95 (expression -> string .)
    ]               reduce using rule 95 (expression -> string .)
    )               reduce using rule 95 (expression -> string .)
    {               reduce using rule 95 (expression -> string .)
    SANDBOX         reduce using rule 95 (expression -> string .)
    LIMPORT         reduce using rule 95 (expression -> string .)
    .               reduce using rule 95 (expression -> string .)
    IMPORT          reduce using rule 95 (expression -> string .)
    ID              reduce using rule 95 (expression -> string .)
    RETURN          reduce using rule 95 (expression -> string .)
    DEL             reduce using rule 95 (expression -> string .)
    !               reduce using rule 95 (expression -> string .)
    FOR             reduce using rule 95 (expression -> string .)
    DEBUG           reduce using rule 95 (expression -> string .)
    SKIP            reduce using rule 95 (expression -> string .)
    BREAK           reduce using rule 95 (expression -> string .)
    @               reduce using rule 95 (expression -> string .)
    WHILE           reduce using rule 95 (expression -> string .)
    #               reduce using rule 95 (expression -> string .)
    NAMESPACE       reduce using rule 95 (expression -> string .)
    CLASS           reduce using rule 95 (expression -> string .)
    FUNC            reduce using rule 95 (expression -> string .)
    PYTHON_CODE_EXEC reduce using rule 95 (expression -> string .)
    PYTHON_CODE     reduce using rule 95 (expression -> string .)
    IF              reduce using rule 95 (expression -> string .)
    CHAR            reduce using rule 95 (expression -> string .)
    STRING          reduce using rule 95 (expression -> string .)
    FALSE           reduce using rule 95 (expression -> string .)
    TRUE            reduce using rule 95 (expression -> string .)
    FLOAT           reduce using rule 95 (expression -> string .)
    HEX             reduce using rule 95 (expression -> string .)
    INT             reduce using rule 95 (expression -> string .)
    NULL            reduce using rule 95 (expression -> string .)
    $end            reduce using rule 95 (expression -> string .)


state 48

    (56) class_declaration -> NAMESPACE . ID { program }
    ID              shift and go to state 156


state 49

    (57) class_declaration -> CLASS . ID { program }
    ID              shift and go to state 157


state 50

    (47) function_declaration -> FUNC . ID ( empty ) expression { program }
    (48) function_declaration -> FUNC . ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> FUNC . ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> FUNC . ID ( function_arguments ) expression { program }
    ID              shift and go to state 158


state 51

    (153) python_code -> PYTHON_CODE_EXEC .
    ;               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    [               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    (               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    :               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    >               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    <               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    &               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    ^               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    |               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    EQ_GREATER      reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    EQ_LESS         reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    NOT_EQEQ        reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    EQEQ            reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    %               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    *               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    /               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    -               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    +               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    ,               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    }               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    ?               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    IN              reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    ]               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    )               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    {               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    SANDBOX         reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    LIMPORT         reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    .               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    IMPORT          reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    ID              reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    RETURN          reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    DEL             reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    !               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    FOR             reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    DEBUG           reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    SKIP            reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    BREAK           reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    @               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    WHILE           reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    #               reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    NAMESPACE       reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    CLASS           reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    FUNC            reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    PYTHON_CODE_EXEC reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    PYTHON_CODE     reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    IF              reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    CHAR            reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    STRING          reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    FALSE           reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    TRUE            reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    FLOAT           reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    HEX             reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    INT             reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    NULL            reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)
    $end            reduce using rule 153 (python_code -> PYTHON_CODE_EXEC .)


state 52

    (154) python_code -> PYTHON_CODE .
    ;               reduce using rule 154 (python_code -> PYTHON_CODE .)
    [               reduce using rule 154 (python_code -> PYTHON_CODE .)
    (               reduce using rule 154 (python_code -> PYTHON_CODE .)
    :               reduce using rule 154 (python_code -> PYTHON_CODE .)
    >               reduce using rule 154 (python_code -> PYTHON_CODE .)
    <               reduce using rule 154 (python_code -> PYTHON_CODE .)
    &               reduce using rule 154 (python_code -> PYTHON_CODE .)
    ^               reduce using rule 154 (python_code -> PYTHON_CODE .)
    |               reduce using rule 154 (python_code -> PYTHON_CODE .)
    EQ_GREATER      reduce using rule 154 (python_code -> PYTHON_CODE .)
    EQ_LESS         reduce using rule 154 (python_code -> PYTHON_CODE .)
    NOT_EQEQ        reduce using rule 154 (python_code -> PYTHON_CODE .)
    EQEQ            reduce using rule 154 (python_code -> PYTHON_CODE .)
    %               reduce using rule 154 (python_code -> PYTHON_CODE .)
    *               reduce using rule 154 (python_code -> PYTHON_CODE .)
    /               reduce using rule 154 (python_code -> PYTHON_CODE .)
    -               reduce using rule 154 (python_code -> PYTHON_CODE .)
    +               reduce using rule 154 (python_code -> PYTHON_CODE .)
    ,               reduce using rule 154 (python_code -> PYTHON_CODE .)
    }               reduce using rule 154 (python_code -> PYTHON_CODE .)
    ?               reduce using rule 154 (python_code -> PYTHON_CODE .)
    IN              reduce using rule 154 (python_code -> PYTHON_CODE .)
    ]               reduce using rule 154 (python_code -> PYTHON_CODE .)
    )               reduce using rule 154 (python_code -> PYTHON_CODE .)
    {               reduce using rule 154 (python_code -> PYTHON_CODE .)
    SANDBOX         reduce using rule 154 (python_code -> PYTHON_CODE .)
    LIMPORT         reduce using rule 154 (python_code -> PYTHON_CODE .)
    .               reduce using rule 154 (python_code -> PYTHON_CODE .)
    IMPORT          reduce using rule 154 (python_code -> PYTHON_CODE .)
    ID              reduce using rule 154 (python_code -> PYTHON_CODE .)
    RETURN          reduce using rule 154 (python_code -> PYTHON_CODE .)
    DEL             reduce using rule 154 (python_code -> PYTHON_CODE .)
    !               reduce using rule 154 (python_code -> PYTHON_CODE .)
    FOR             reduce using rule 154 (python_code -> PYTHON_CODE .)
    DEBUG           reduce using rule 154 (python_code -> PYTHON_CODE .)
    SKIP            reduce using rule 154 (python_code -> PYTHON_CODE .)
    BREAK           reduce using rule 154 (python_code -> PYTHON_CODE .)
    @               reduce using rule 154 (python_code -> PYTHON_CODE .)
    WHILE           reduce using rule 154 (python_code -> PYTHON_CODE .)
    #               reduce using rule 154 (python_code -> PYTHON_CODE .)
    NAMESPACE       reduce using rule 154 (python_code -> PYTHON_CODE .)
    CLASS           reduce using rule 154 (python_code -> PYTHON_CODE .)
    FUNC            reduce using rule 154 (python_code -> PYTHON_CODE .)
    PYTHON_CODE_EXEC reduce using rule 154 (python_code -> PYTHON_CODE .)
    PYTHON_CODE     reduce using rule 154 (python_code -> PYTHON_CODE .)
    IF              reduce using rule 154 (python_code -> PYTHON_CODE .)
    CHAR            reduce using rule 154 (python_code -> PYTHON_CODE .)
    STRING          reduce using rule 154 (python_code -> PYTHON_CODE .)
    FALSE           reduce using rule 154 (python_code -> PYTHON_CODE .)
    TRUE            reduce using rule 154 (python_code -> PYTHON_CODE .)
    FLOAT           reduce using rule 154 (python_code -> PYTHON_CODE .)
    HEX             reduce using rule 154 (python_code -> PYTHON_CODE .)
    INT             reduce using rule 154 (python_code -> PYTHON_CODE .)
    NULL            reduce using rule 154 (python_code -> PYTHON_CODE .)
    $end            reduce using rule 154 (python_code -> PYTHON_CODE .)


state 53

    (80) if_statement -> IF . ( expression ) { program }
    (               shift and go to state 159


state 54

    (89) expression -> assoc_array .
    [               reduce using rule 89 (expression -> assoc_array .)
    (               reduce using rule 89 (expression -> assoc_array .)
    :               reduce using rule 89 (expression -> assoc_array .)
    >               reduce using rule 89 (expression -> assoc_array .)
    <               reduce using rule 89 (expression -> assoc_array .)
    &               reduce using rule 89 (expression -> assoc_array .)
    ^               reduce using rule 89 (expression -> assoc_array .)
    |               reduce using rule 89 (expression -> assoc_array .)
    EQ_GREATER      reduce using rule 89 (expression -> assoc_array .)
    EQ_LESS         reduce using rule 89 (expression -> assoc_array .)
    NOT_EQEQ        reduce using rule 89 (expression -> assoc_array .)
    EQEQ            reduce using rule 89 (expression -> assoc_array .)
    %               reduce using rule 89 (expression -> assoc_array .)
    *               reduce using rule 89 (expression -> assoc_array .)
    /               reduce using rule 89 (expression -> assoc_array .)
    -               reduce using rule 89 (expression -> assoc_array .)
    +               reduce using rule 89 (expression -> assoc_array .)
    ,               reduce using rule 89 (expression -> assoc_array .)
    }               reduce using rule 89 (expression -> assoc_array .)
    ;               reduce using rule 89 (expression -> assoc_array .)
    ?               reduce using rule 89 (expression -> assoc_array .)
    IN              reduce using rule 89 (expression -> assoc_array .)
    ]               reduce using rule 89 (expression -> assoc_array .)
    )               reduce using rule 89 (expression -> assoc_array .)
    {               reduce using rule 89 (expression -> assoc_array .)
    SANDBOX         reduce using rule 89 (expression -> assoc_array .)
    LIMPORT         reduce using rule 89 (expression -> assoc_array .)
    .               reduce using rule 89 (expression -> assoc_array .)
    IMPORT          reduce using rule 89 (expression -> assoc_array .)
    ID              reduce using rule 89 (expression -> assoc_array .)
    RETURN          reduce using rule 89 (expression -> assoc_array .)
    DEL             reduce using rule 89 (expression -> assoc_array .)
    !               reduce using rule 89 (expression -> assoc_array .)
    FOR             reduce using rule 89 (expression -> assoc_array .)
    DEBUG           reduce using rule 89 (expression -> assoc_array .)
    SKIP            reduce using rule 89 (expression -> assoc_array .)
    BREAK           reduce using rule 89 (expression -> assoc_array .)
    @               reduce using rule 89 (expression -> assoc_array .)
    WHILE           reduce using rule 89 (expression -> assoc_array .)
    #               reduce using rule 89 (expression -> assoc_array .)
    NAMESPACE       reduce using rule 89 (expression -> assoc_array .)
    CLASS           reduce using rule 89 (expression -> assoc_array .)
    FUNC            reduce using rule 89 (expression -> assoc_array .)
    PYTHON_CODE_EXEC reduce using rule 89 (expression -> assoc_array .)
    PYTHON_CODE     reduce using rule 89 (expression -> assoc_array .)
    IF              reduce using rule 89 (expression -> assoc_array .)
    CHAR            reduce using rule 89 (expression -> assoc_array .)
    STRING          reduce using rule 89 (expression -> assoc_array .)
    FALSE           reduce using rule 89 (expression -> assoc_array .)
    TRUE            reduce using rule 89 (expression -> assoc_array .)
    FLOAT           reduce using rule 89 (expression -> assoc_array .)
    HEX             reduce using rule 89 (expression -> assoc_array .)
    INT             reduce using rule 89 (expression -> assoc_array .)
    NULL            reduce using rule 89 (expression -> assoc_array .)
    $end            reduce using rule 89 (expression -> assoc_array .)


state 55

    (90) expression -> _numpy .
    [               reduce using rule 90 (expression -> _numpy .)
    (               reduce using rule 90 (expression -> _numpy .)
    :               reduce using rule 90 (expression -> _numpy .)
    >               reduce using rule 90 (expression -> _numpy .)
    <               reduce using rule 90 (expression -> _numpy .)
    &               reduce using rule 90 (expression -> _numpy .)
    ^               reduce using rule 90 (expression -> _numpy .)
    |               reduce using rule 90 (expression -> _numpy .)
    EQ_GREATER      reduce using rule 90 (expression -> _numpy .)
    EQ_LESS         reduce using rule 90 (expression -> _numpy .)
    NOT_EQEQ        reduce using rule 90 (expression -> _numpy .)
    EQEQ            reduce using rule 90 (expression -> _numpy .)
    %               reduce using rule 90 (expression -> _numpy .)
    *               reduce using rule 90 (expression -> _numpy .)
    /               reduce using rule 90 (expression -> _numpy .)
    -               reduce using rule 90 (expression -> _numpy .)
    +               reduce using rule 90 (expression -> _numpy .)
    ,               reduce using rule 90 (expression -> _numpy .)
    }               reduce using rule 90 (expression -> _numpy .)
    ;               reduce using rule 90 (expression -> _numpy .)
    ?               reduce using rule 90 (expression -> _numpy .)
    IN              reduce using rule 90 (expression -> _numpy .)
    ]               reduce using rule 90 (expression -> _numpy .)
    )               reduce using rule 90 (expression -> _numpy .)
    {               reduce using rule 90 (expression -> _numpy .)
    SANDBOX         reduce using rule 90 (expression -> _numpy .)
    LIMPORT         reduce using rule 90 (expression -> _numpy .)
    .               reduce using rule 90 (expression -> _numpy .)
    IMPORT          reduce using rule 90 (expression -> _numpy .)
    ID              reduce using rule 90 (expression -> _numpy .)
    RETURN          reduce using rule 90 (expression -> _numpy .)
    DEL             reduce using rule 90 (expression -> _numpy .)
    !               reduce using rule 90 (expression -> _numpy .)
    FOR             reduce using rule 90 (expression -> _numpy .)
    DEBUG           reduce using rule 90 (expression -> _numpy .)
    SKIP            reduce using rule 90 (expression -> _numpy .)
    BREAK           reduce using rule 90 (expression -> _numpy .)
    @               reduce using rule 90 (expression -> _numpy .)
    WHILE           reduce using rule 90 (expression -> _numpy .)
    #               reduce using rule 90 (expression -> _numpy .)
    NAMESPACE       reduce using rule 90 (expression -> _numpy .)
    CLASS           reduce using rule 90 (expression -> _numpy .)
    FUNC            reduce using rule 90 (expression -> _numpy .)
    PYTHON_CODE_EXEC reduce using rule 90 (expression -> _numpy .)
    PYTHON_CODE     reduce using rule 90 (expression -> _numpy .)
    IF              reduce using rule 90 (expression -> _numpy .)
    CHAR            reduce using rule 90 (expression -> _numpy .)
    STRING          reduce using rule 90 (expression -> _numpy .)
    FALSE           reduce using rule 90 (expression -> _numpy .)
    TRUE            reduce using rule 90 (expression -> _numpy .)
    FLOAT           reduce using rule 90 (expression -> _numpy .)
    HEX             reduce using rule 90 (expression -> _numpy .)
    INT             reduce using rule 90 (expression -> _numpy .)
    NULL            reduce using rule 90 (expression -> _numpy .)
    $end            reduce using rule 90 (expression -> _numpy .)


state 56

    (91) expression -> _list .
    [               reduce using rule 91 (expression -> _list .)
    (               reduce using rule 91 (expression -> _list .)
    :               reduce using rule 91 (expression -> _list .)
    >               reduce using rule 91 (expression -> _list .)
    <               reduce using rule 91 (expression -> _list .)
    &               reduce using rule 91 (expression -> _list .)
    ^               reduce using rule 91 (expression -> _list .)
    |               reduce using rule 91 (expression -> _list .)
    EQ_GREATER      reduce using rule 91 (expression -> _list .)
    EQ_LESS         reduce using rule 91 (expression -> _list .)
    NOT_EQEQ        reduce using rule 91 (expression -> _list .)
    EQEQ            reduce using rule 91 (expression -> _list .)
    %               reduce using rule 91 (expression -> _list .)
    *               reduce using rule 91 (expression -> _list .)
    /               reduce using rule 91 (expression -> _list .)
    -               reduce using rule 91 (expression -> _list .)
    +               reduce using rule 91 (expression -> _list .)
    ,               reduce using rule 91 (expression -> _list .)
    }               reduce using rule 91 (expression -> _list .)
    ;               reduce using rule 91 (expression -> _list .)
    ?               reduce using rule 91 (expression -> _list .)
    IN              reduce using rule 91 (expression -> _list .)
    ]               reduce using rule 91 (expression -> _list .)
    )               reduce using rule 91 (expression -> _list .)
    {               reduce using rule 91 (expression -> _list .)
    SANDBOX         reduce using rule 91 (expression -> _list .)
    LIMPORT         reduce using rule 91 (expression -> _list .)
    .               reduce using rule 91 (expression -> _list .)
    IMPORT          reduce using rule 91 (expression -> _list .)
    ID              reduce using rule 91 (expression -> _list .)
    RETURN          reduce using rule 91 (expression -> _list .)
    DEL             reduce using rule 91 (expression -> _list .)
    !               reduce using rule 91 (expression -> _list .)
    FOR             reduce using rule 91 (expression -> _list .)
    DEBUG           reduce using rule 91 (expression -> _list .)
    SKIP            reduce using rule 91 (expression -> _list .)
    BREAK           reduce using rule 91 (expression -> _list .)
    @               reduce using rule 91 (expression -> _list .)
    WHILE           reduce using rule 91 (expression -> _list .)
    #               reduce using rule 91 (expression -> _list .)
    NAMESPACE       reduce using rule 91 (expression -> _list .)
    CLASS           reduce using rule 91 (expression -> _list .)
    FUNC            reduce using rule 91 (expression -> _list .)
    PYTHON_CODE_EXEC reduce using rule 91 (expression -> _list .)
    PYTHON_CODE     reduce using rule 91 (expression -> _list .)
    IF              reduce using rule 91 (expression -> _list .)
    CHAR            reduce using rule 91 (expression -> _list .)
    STRING          reduce using rule 91 (expression -> _list .)
    FALSE           reduce using rule 91 (expression -> _list .)
    TRUE            reduce using rule 91 (expression -> _list .)
    FLOAT           reduce using rule 91 (expression -> _list .)
    HEX             reduce using rule 91 (expression -> _list .)
    INT             reduce using rule 91 (expression -> _list .)
    NULL            reduce using rule 91 (expression -> _list .)
    $end            reduce using rule 91 (expression -> _list .)


state 57

    (92) expression -> _tuple .
    [               reduce using rule 92 (expression -> _tuple .)
    (               reduce using rule 92 (expression -> _tuple .)
    :               reduce using rule 92 (expression -> _tuple .)
    >               reduce using rule 92 (expression -> _tuple .)
    <               reduce using rule 92 (expression -> _tuple .)
    &               reduce using rule 92 (expression -> _tuple .)
    ^               reduce using rule 92 (expression -> _tuple .)
    |               reduce using rule 92 (expression -> _tuple .)
    EQ_GREATER      reduce using rule 92 (expression -> _tuple .)
    EQ_LESS         reduce using rule 92 (expression -> _tuple .)
    NOT_EQEQ        reduce using rule 92 (expression -> _tuple .)
    EQEQ            reduce using rule 92 (expression -> _tuple .)
    %               reduce using rule 92 (expression -> _tuple .)
    *               reduce using rule 92 (expression -> _tuple .)
    /               reduce using rule 92 (expression -> _tuple .)
    -               reduce using rule 92 (expression -> _tuple .)
    +               reduce using rule 92 (expression -> _tuple .)
    ,               reduce using rule 92 (expression -> _tuple .)
    }               reduce using rule 92 (expression -> _tuple .)
    ;               reduce using rule 92 (expression -> _tuple .)
    ?               reduce using rule 92 (expression -> _tuple .)
    IN              reduce using rule 92 (expression -> _tuple .)
    ]               reduce using rule 92 (expression -> _tuple .)
    )               reduce using rule 92 (expression -> _tuple .)
    {               reduce using rule 92 (expression -> _tuple .)
    SANDBOX         reduce using rule 92 (expression -> _tuple .)
    LIMPORT         reduce using rule 92 (expression -> _tuple .)
    .               reduce using rule 92 (expression -> _tuple .)
    IMPORT          reduce using rule 92 (expression -> _tuple .)
    ID              reduce using rule 92 (expression -> _tuple .)
    RETURN          reduce using rule 92 (expression -> _tuple .)
    DEL             reduce using rule 92 (expression -> _tuple .)
    !               reduce using rule 92 (expression -> _tuple .)
    FOR             reduce using rule 92 (expression -> _tuple .)
    DEBUG           reduce using rule 92 (expression -> _tuple .)
    SKIP            reduce using rule 92 (expression -> _tuple .)
    BREAK           reduce using rule 92 (expression -> _tuple .)
    @               reduce using rule 92 (expression -> _tuple .)
    WHILE           reduce using rule 92 (expression -> _tuple .)
    #               reduce using rule 92 (expression -> _tuple .)
    NAMESPACE       reduce using rule 92 (expression -> _tuple .)
    CLASS           reduce using rule 92 (expression -> _tuple .)
    FUNC            reduce using rule 92 (expression -> _tuple .)
    PYTHON_CODE_EXEC reduce using rule 92 (expression -> _tuple .)
    PYTHON_CODE     reduce using rule 92 (expression -> _tuple .)
    IF              reduce using rule 92 (expression -> _tuple .)
    CHAR            reduce using rule 92 (expression -> _tuple .)
    STRING          reduce using rule 92 (expression -> _tuple .)
    FALSE           reduce using rule 92 (expression -> _tuple .)
    TRUE            reduce using rule 92 (expression -> _tuple .)
    FLOAT           reduce using rule 92 (expression -> _tuple .)
    HEX             reduce using rule 92 (expression -> _tuple .)
    INT             reduce using rule 92 (expression -> _tuple .)
    NULL            reduce using rule 92 (expression -> _tuple .)
    $end            reduce using rule 92 (expression -> _tuple .)


state 58

    (93) expression -> class_attribute .
    [               reduce using rule 93 (expression -> class_attribute .)
    (               reduce using rule 93 (expression -> class_attribute .)
    :               reduce using rule 93 (expression -> class_attribute .)
    >               reduce using rule 93 (expression -> class_attribute .)
    <               reduce using rule 93 (expression -> class_attribute .)
    &               reduce using rule 93 (expression -> class_attribute .)
    ^               reduce using rule 93 (expression -> class_attribute .)
    |               reduce using rule 93 (expression -> class_attribute .)
    EQ_GREATER      reduce using rule 93 (expression -> class_attribute .)
    EQ_LESS         reduce using rule 93 (expression -> class_attribute .)
    NOT_EQEQ        reduce using rule 93 (expression -> class_attribute .)
    EQEQ            reduce using rule 93 (expression -> class_attribute .)
    %               reduce using rule 93 (expression -> class_attribute .)
    *               reduce using rule 93 (expression -> class_attribute .)
    /               reduce using rule 93 (expression -> class_attribute .)
    -               reduce using rule 93 (expression -> class_attribute .)
    +               reduce using rule 93 (expression -> class_attribute .)
    ,               reduce using rule 93 (expression -> class_attribute .)
    }               reduce using rule 93 (expression -> class_attribute .)
    ;               reduce using rule 93 (expression -> class_attribute .)
    ?               reduce using rule 93 (expression -> class_attribute .)
    IN              reduce using rule 93 (expression -> class_attribute .)
    ]               reduce using rule 93 (expression -> class_attribute .)
    )               reduce using rule 93 (expression -> class_attribute .)
    {               reduce using rule 93 (expression -> class_attribute .)
    SANDBOX         reduce using rule 93 (expression -> class_attribute .)
    LIMPORT         reduce using rule 93 (expression -> class_attribute .)
    .               reduce using rule 93 (expression -> class_attribute .)
    IMPORT          reduce using rule 93 (expression -> class_attribute .)
    ID              reduce using rule 93 (expression -> class_attribute .)
    RETURN          reduce using rule 93 (expression -> class_attribute .)
    DEL             reduce using rule 93 (expression -> class_attribute .)
    !               reduce using rule 93 (expression -> class_attribute .)
    FOR             reduce using rule 93 (expression -> class_attribute .)
    DEBUG           reduce using rule 93 (expression -> class_attribute .)
    SKIP            reduce using rule 93 (expression -> class_attribute .)
    BREAK           reduce using rule 93 (expression -> class_attribute .)
    @               reduce using rule 93 (expression -> class_attribute .)
    WHILE           reduce using rule 93 (expression -> class_attribute .)
    #               reduce using rule 93 (expression -> class_attribute .)
    NAMESPACE       reduce using rule 93 (expression -> class_attribute .)
    CLASS           reduce using rule 93 (expression -> class_attribute .)
    FUNC            reduce using rule 93 (expression -> class_attribute .)
    PYTHON_CODE_EXEC reduce using rule 93 (expression -> class_attribute .)
    PYTHON_CODE     reduce using rule 93 (expression -> class_attribute .)
    IF              reduce using rule 93 (expression -> class_attribute .)
    CHAR            reduce using rule 93 (expression -> class_attribute .)
    STRING          reduce using rule 93 (expression -> class_attribute .)
    FALSE           reduce using rule 93 (expression -> class_attribute .)
    TRUE            reduce using rule 93 (expression -> class_attribute .)
    FLOAT           reduce using rule 93 (expression -> class_attribute .)
    HEX             reduce using rule 93 (expression -> class_attribute .)
    INT             reduce using rule 93 (expression -> class_attribute .)
    NULL            reduce using rule 93 (expression -> class_attribute .)
    $end            reduce using rule 93 (expression -> class_attribute .)


state 59

    (94) expression -> id .
    [               reduce using rule 94 (expression -> id .)
    (               reduce using rule 94 (expression -> id .)
    :               reduce using rule 94 (expression -> id .)
    >               reduce using rule 94 (expression -> id .)
    <               reduce using rule 94 (expression -> id .)
    &               reduce using rule 94 (expression -> id .)
    ^               reduce using rule 94 (expression -> id .)
    |               reduce using rule 94 (expression -> id .)
    EQ_GREATER      reduce using rule 94 (expression -> id .)
    EQ_LESS         reduce using rule 94 (expression -> id .)
    NOT_EQEQ        reduce using rule 94 (expression -> id .)
    EQEQ            reduce using rule 94 (expression -> id .)
    %               reduce using rule 94 (expression -> id .)
    *               reduce using rule 94 (expression -> id .)
    /               reduce using rule 94 (expression -> id .)
    -               reduce using rule 94 (expression -> id .)
    +               reduce using rule 94 (expression -> id .)
    ,               reduce using rule 94 (expression -> id .)
    }               reduce using rule 94 (expression -> id .)
    ;               reduce using rule 94 (expression -> id .)
    ?               reduce using rule 94 (expression -> id .)
    IN              reduce using rule 94 (expression -> id .)
    ]               reduce using rule 94 (expression -> id .)
    )               reduce using rule 94 (expression -> id .)
    {               reduce using rule 94 (expression -> id .)
    SANDBOX         reduce using rule 94 (expression -> id .)
    LIMPORT         reduce using rule 94 (expression -> id .)
    .               reduce using rule 94 (expression -> id .)
    IMPORT          reduce using rule 94 (expression -> id .)
    ID              reduce using rule 94 (expression -> id .)
    RETURN          reduce using rule 94 (expression -> id .)
    DEL             reduce using rule 94 (expression -> id .)
    !               reduce using rule 94 (expression -> id .)
    FOR             reduce using rule 94 (expression -> id .)
    DEBUG           reduce using rule 94 (expression -> id .)
    SKIP            reduce using rule 94 (expression -> id .)
    BREAK           reduce using rule 94 (expression -> id .)
    @               reduce using rule 94 (expression -> id .)
    WHILE           reduce using rule 94 (expression -> id .)
    #               reduce using rule 94 (expression -> id .)
    NAMESPACE       reduce using rule 94 (expression -> id .)
    CLASS           reduce using rule 94 (expression -> id .)
    FUNC            reduce using rule 94 (expression -> id .)
    PYTHON_CODE_EXEC reduce using rule 94 (expression -> id .)
    PYTHON_CODE     reduce using rule 94 (expression -> id .)
    IF              reduce using rule 94 (expression -> id .)
    CHAR            reduce using rule 94 (expression -> id .)
    STRING          reduce using rule 94 (expression -> id .)
    FALSE           reduce using rule 94 (expression -> id .)
    TRUE            reduce using rule 94 (expression -> id .)
    FLOAT           reduce using rule 94 (expression -> id .)
    HEX             reduce using rule 94 (expression -> id .)
    INT             reduce using rule 94 (expression -> id .)
    NULL            reduce using rule 94 (expression -> id .)
    $end            reduce using rule 94 (expression -> id .)


state 60

    (96) expression -> bool .
    [               reduce using rule 96 (expression -> bool .)
    (               reduce using rule 96 (expression -> bool .)
    :               reduce using rule 96 (expression -> bool .)
    >               reduce using rule 96 (expression -> bool .)
    <               reduce using rule 96 (expression -> bool .)
    &               reduce using rule 96 (expression -> bool .)
    ^               reduce using rule 96 (expression -> bool .)
    |               reduce using rule 96 (expression -> bool .)
    EQ_GREATER      reduce using rule 96 (expression -> bool .)
    EQ_LESS         reduce using rule 96 (expression -> bool .)
    NOT_EQEQ        reduce using rule 96 (expression -> bool .)
    EQEQ            reduce using rule 96 (expression -> bool .)
    %               reduce using rule 96 (expression -> bool .)
    *               reduce using rule 96 (expression -> bool .)
    /               reduce using rule 96 (expression -> bool .)
    -               reduce using rule 96 (expression -> bool .)
    +               reduce using rule 96 (expression -> bool .)
    ,               reduce using rule 96 (expression -> bool .)
    }               reduce using rule 96 (expression -> bool .)
    ;               reduce using rule 96 (expression -> bool .)
    ?               reduce using rule 96 (expression -> bool .)
    IN              reduce using rule 96 (expression -> bool .)
    ]               reduce using rule 96 (expression -> bool .)
    )               reduce using rule 96 (expression -> bool .)
    {               reduce using rule 96 (expression -> bool .)
    SANDBOX         reduce using rule 96 (expression -> bool .)
    LIMPORT         reduce using rule 96 (expression -> bool .)
    .               reduce using rule 96 (expression -> bool .)
    IMPORT          reduce using rule 96 (expression -> bool .)
    ID              reduce using rule 96 (expression -> bool .)
    RETURN          reduce using rule 96 (expression -> bool .)
    DEL             reduce using rule 96 (expression -> bool .)
    !               reduce using rule 96 (expression -> bool .)
    FOR             reduce using rule 96 (expression -> bool .)
    DEBUG           reduce using rule 96 (expression -> bool .)
    SKIP            reduce using rule 96 (expression -> bool .)
    BREAK           reduce using rule 96 (expression -> bool .)
    @               reduce using rule 96 (expression -> bool .)
    WHILE           reduce using rule 96 (expression -> bool .)
    #               reduce using rule 96 (expression -> bool .)
    NAMESPACE       reduce using rule 96 (expression -> bool .)
    CLASS           reduce using rule 96 (expression -> bool .)
    FUNC            reduce using rule 96 (expression -> bool .)
    PYTHON_CODE_EXEC reduce using rule 96 (expression -> bool .)
    PYTHON_CODE     reduce using rule 96 (expression -> bool .)
    IF              reduce using rule 96 (expression -> bool .)
    CHAR            reduce using rule 96 (expression -> bool .)
    STRING          reduce using rule 96 (expression -> bool .)
    FALSE           reduce using rule 96 (expression -> bool .)
    TRUE            reduce using rule 96 (expression -> bool .)
    FLOAT           reduce using rule 96 (expression -> bool .)
    HEX             reduce using rule 96 (expression -> bool .)
    INT             reduce using rule 96 (expression -> bool .)
    NULL            reduce using rule 96 (expression -> bool .)
    $end            reduce using rule 96 (expression -> bool .)


state 61

    (97) expression -> float .
    [               reduce using rule 97 (expression -> float .)
    (               reduce using rule 97 (expression -> float .)
    :               reduce using rule 97 (expression -> float .)
    >               reduce using rule 97 (expression -> float .)
    <               reduce using rule 97 (expression -> float .)
    &               reduce using rule 97 (expression -> float .)
    ^               reduce using rule 97 (expression -> float .)
    |               reduce using rule 97 (expression -> float .)
    EQ_GREATER      reduce using rule 97 (expression -> float .)
    EQ_LESS         reduce using rule 97 (expression -> float .)
    NOT_EQEQ        reduce using rule 97 (expression -> float .)
    EQEQ            reduce using rule 97 (expression -> float .)
    %               reduce using rule 97 (expression -> float .)
    *               reduce using rule 97 (expression -> float .)
    /               reduce using rule 97 (expression -> float .)
    -               reduce using rule 97 (expression -> float .)
    +               reduce using rule 97 (expression -> float .)
    ,               reduce using rule 97 (expression -> float .)
    }               reduce using rule 97 (expression -> float .)
    ;               reduce using rule 97 (expression -> float .)
    ?               reduce using rule 97 (expression -> float .)
    IN              reduce using rule 97 (expression -> float .)
    ]               reduce using rule 97 (expression -> float .)
    )               reduce using rule 97 (expression -> float .)
    {               reduce using rule 97 (expression -> float .)
    SANDBOX         reduce using rule 97 (expression -> float .)
    LIMPORT         reduce using rule 97 (expression -> float .)
    .               reduce using rule 97 (expression -> float .)
    IMPORT          reduce using rule 97 (expression -> float .)
    ID              reduce using rule 97 (expression -> float .)
    RETURN          reduce using rule 97 (expression -> float .)
    DEL             reduce using rule 97 (expression -> float .)
    !               reduce using rule 97 (expression -> float .)
    FOR             reduce using rule 97 (expression -> float .)
    DEBUG           reduce using rule 97 (expression -> float .)
    SKIP            reduce using rule 97 (expression -> float .)
    BREAK           reduce using rule 97 (expression -> float .)
    @               reduce using rule 97 (expression -> float .)
    WHILE           reduce using rule 97 (expression -> float .)
    #               reduce using rule 97 (expression -> float .)
    NAMESPACE       reduce using rule 97 (expression -> float .)
    CLASS           reduce using rule 97 (expression -> float .)
    FUNC            reduce using rule 97 (expression -> float .)
    PYTHON_CODE_EXEC reduce using rule 97 (expression -> float .)
    PYTHON_CODE     reduce using rule 97 (expression -> float .)
    IF              reduce using rule 97 (expression -> float .)
    CHAR            reduce using rule 97 (expression -> float .)
    STRING          reduce using rule 97 (expression -> float .)
    FALSE           reduce using rule 97 (expression -> float .)
    TRUE            reduce using rule 97 (expression -> float .)
    FLOAT           reduce using rule 97 (expression -> float .)
    HEX             reduce using rule 97 (expression -> float .)
    INT             reduce using rule 97 (expression -> float .)
    NULL            reduce using rule 97 (expression -> float .)
    $end            reduce using rule 97 (expression -> float .)


state 62

    (98) expression -> hex .
    [               reduce using rule 98 (expression -> hex .)
    (               reduce using rule 98 (expression -> hex .)
    :               reduce using rule 98 (expression -> hex .)
    >               reduce using rule 98 (expression -> hex .)
    <               reduce using rule 98 (expression -> hex .)
    &               reduce using rule 98 (expression -> hex .)
    ^               reduce using rule 98 (expression -> hex .)
    |               reduce using rule 98 (expression -> hex .)
    EQ_GREATER      reduce using rule 98 (expression -> hex .)
    EQ_LESS         reduce using rule 98 (expression -> hex .)
    NOT_EQEQ        reduce using rule 98 (expression -> hex .)
    EQEQ            reduce using rule 98 (expression -> hex .)
    %               reduce using rule 98 (expression -> hex .)
    *               reduce using rule 98 (expression -> hex .)
    /               reduce using rule 98 (expression -> hex .)
    -               reduce using rule 98 (expression -> hex .)
    +               reduce using rule 98 (expression -> hex .)
    ,               reduce using rule 98 (expression -> hex .)
    }               reduce using rule 98 (expression -> hex .)
    ;               reduce using rule 98 (expression -> hex .)
    ?               reduce using rule 98 (expression -> hex .)
    IN              reduce using rule 98 (expression -> hex .)
    ]               reduce using rule 98 (expression -> hex .)
    )               reduce using rule 98 (expression -> hex .)
    {               reduce using rule 98 (expression -> hex .)
    SANDBOX         reduce using rule 98 (expression -> hex .)
    LIMPORT         reduce using rule 98 (expression -> hex .)
    .               reduce using rule 98 (expression -> hex .)
    IMPORT          reduce using rule 98 (expression -> hex .)
    ID              reduce using rule 98 (expression -> hex .)
    RETURN          reduce using rule 98 (expression -> hex .)
    DEL             reduce using rule 98 (expression -> hex .)
    !               reduce using rule 98 (expression -> hex .)
    FOR             reduce using rule 98 (expression -> hex .)
    DEBUG           reduce using rule 98 (expression -> hex .)
    SKIP            reduce using rule 98 (expression -> hex .)
    BREAK           reduce using rule 98 (expression -> hex .)
    @               reduce using rule 98 (expression -> hex .)
    WHILE           reduce using rule 98 (expression -> hex .)
    #               reduce using rule 98 (expression -> hex .)
    NAMESPACE       reduce using rule 98 (expression -> hex .)
    CLASS           reduce using rule 98 (expression -> hex .)
    FUNC            reduce using rule 98 (expression -> hex .)
    PYTHON_CODE_EXEC reduce using rule 98 (expression -> hex .)
    PYTHON_CODE     reduce using rule 98 (expression -> hex .)
    IF              reduce using rule 98 (expression -> hex .)
    CHAR            reduce using rule 98 (expression -> hex .)
    STRING          reduce using rule 98 (expression -> hex .)
    FALSE           reduce using rule 98 (expression -> hex .)
    TRUE            reduce using rule 98 (expression -> hex .)
    FLOAT           reduce using rule 98 (expression -> hex .)
    HEX             reduce using rule 98 (expression -> hex .)
    INT             reduce using rule 98 (expression -> hex .)
    NULL            reduce using rule 98 (expression -> hex .)
    $end            reduce using rule 98 (expression -> hex .)


state 63

    (99) expression -> int .
    [               reduce using rule 99 (expression -> int .)
    (               reduce using rule 99 (expression -> int .)
    :               reduce using rule 99 (expression -> int .)
    >               reduce using rule 99 (expression -> int .)
    <               reduce using rule 99 (expression -> int .)
    &               reduce using rule 99 (expression -> int .)
    ^               reduce using rule 99 (expression -> int .)
    |               reduce using rule 99 (expression -> int .)
    EQ_GREATER      reduce using rule 99 (expression -> int .)
    EQ_LESS         reduce using rule 99 (expression -> int .)
    NOT_EQEQ        reduce using rule 99 (expression -> int .)
    EQEQ            reduce using rule 99 (expression -> int .)
    %               reduce using rule 99 (expression -> int .)
    *               reduce using rule 99 (expression -> int .)
    /               reduce using rule 99 (expression -> int .)
    -               reduce using rule 99 (expression -> int .)
    +               reduce using rule 99 (expression -> int .)
    ,               reduce using rule 99 (expression -> int .)
    }               reduce using rule 99 (expression -> int .)
    ;               reduce using rule 99 (expression -> int .)
    ?               reduce using rule 99 (expression -> int .)
    IN              reduce using rule 99 (expression -> int .)
    ]               reduce using rule 99 (expression -> int .)
    )               reduce using rule 99 (expression -> int .)
    {               reduce using rule 99 (expression -> int .)
    SANDBOX         reduce using rule 99 (expression -> int .)
    LIMPORT         reduce using rule 99 (expression -> int .)
    .               reduce using rule 99 (expression -> int .)
    IMPORT          reduce using rule 99 (expression -> int .)
    ID              reduce using rule 99 (expression -> int .)
    RETURN          reduce using rule 99 (expression -> int .)
    DEL             reduce using rule 99 (expression -> int .)
    !               reduce using rule 99 (expression -> int .)
    FOR             reduce using rule 99 (expression -> int .)
    DEBUG           reduce using rule 99 (expression -> int .)
    SKIP            reduce using rule 99 (expression -> int .)
    BREAK           reduce using rule 99 (expression -> int .)
    @               reduce using rule 99 (expression -> int .)
    WHILE           reduce using rule 99 (expression -> int .)
    #               reduce using rule 99 (expression -> int .)
    NAMESPACE       reduce using rule 99 (expression -> int .)
    CLASS           reduce using rule 99 (expression -> int .)
    FUNC            reduce using rule 99 (expression -> int .)
    PYTHON_CODE_EXEC reduce using rule 99 (expression -> int .)
    PYTHON_CODE     reduce using rule 99 (expression -> int .)
    IF              reduce using rule 99 (expression -> int .)
    CHAR            reduce using rule 99 (expression -> int .)
    STRING          reduce using rule 99 (expression -> int .)
    FALSE           reduce using rule 99 (expression -> int .)
    TRUE            reduce using rule 99 (expression -> int .)
    FLOAT           reduce using rule 99 (expression -> int .)
    HEX             reduce using rule 99 (expression -> int .)
    INT             reduce using rule 99 (expression -> int .)
    NULL            reduce using rule 99 (expression -> int .)
    $end            reduce using rule 99 (expression -> int .)


state 64

    (100) expression -> null .
    [               reduce using rule 100 (expression -> null .)
    (               reduce using rule 100 (expression -> null .)
    :               reduce using rule 100 (expression -> null .)
    >               reduce using rule 100 (expression -> null .)
    <               reduce using rule 100 (expression -> null .)
    &               reduce using rule 100 (expression -> null .)
    ^               reduce using rule 100 (expression -> null .)
    |               reduce using rule 100 (expression -> null .)
    EQ_GREATER      reduce using rule 100 (expression -> null .)
    EQ_LESS         reduce using rule 100 (expression -> null .)
    NOT_EQEQ        reduce using rule 100 (expression -> null .)
    EQEQ            reduce using rule 100 (expression -> null .)
    %               reduce using rule 100 (expression -> null .)
    *               reduce using rule 100 (expression -> null .)
    /               reduce using rule 100 (expression -> null .)
    -               reduce using rule 100 (expression -> null .)
    +               reduce using rule 100 (expression -> null .)
    ,               reduce using rule 100 (expression -> null .)
    }               reduce using rule 100 (expression -> null .)
    ;               reduce using rule 100 (expression -> null .)
    ?               reduce using rule 100 (expression -> null .)
    IN              reduce using rule 100 (expression -> null .)
    ]               reduce using rule 100 (expression -> null .)
    )               reduce using rule 100 (expression -> null .)
    {               reduce using rule 100 (expression -> null .)
    SANDBOX         reduce using rule 100 (expression -> null .)
    LIMPORT         reduce using rule 100 (expression -> null .)
    .               reduce using rule 100 (expression -> null .)
    IMPORT          reduce using rule 100 (expression -> null .)
    ID              reduce using rule 100 (expression -> null .)
    RETURN          reduce using rule 100 (expression -> null .)
    DEL             reduce using rule 100 (expression -> null .)
    !               reduce using rule 100 (expression -> null .)
    FOR             reduce using rule 100 (expression -> null .)
    DEBUG           reduce using rule 100 (expression -> null .)
    SKIP            reduce using rule 100 (expression -> null .)
    BREAK           reduce using rule 100 (expression -> null .)
    @               reduce using rule 100 (expression -> null .)
    WHILE           reduce using rule 100 (expression -> null .)
    #               reduce using rule 100 (expression -> null .)
    NAMESPACE       reduce using rule 100 (expression -> null .)
    CLASS           reduce using rule 100 (expression -> null .)
    FUNC            reduce using rule 100 (expression -> null .)
    PYTHON_CODE_EXEC reduce using rule 100 (expression -> null .)
    PYTHON_CODE     reduce using rule 100 (expression -> null .)
    IF              reduce using rule 100 (expression -> null .)
    CHAR            reduce using rule 100 (expression -> null .)
    STRING          reduce using rule 100 (expression -> null .)
    FALSE           reduce using rule 100 (expression -> null .)
    TRUE            reduce using rule 100 (expression -> null .)
    FLOAT           reduce using rule 100 (expression -> null .)
    HEX             reduce using rule 100 (expression -> null .)
    INT             reduce using rule 100 (expression -> null .)
    NULL            reduce using rule 100 (expression -> null .)
    $end            reduce using rule 100 (expression -> null .)


state 65

    (125) expression -> & . ID
    ID              shift and go to state 160


state 66

    (124) expression -> * . ID
    ID              shift and go to state 161


state 67

    (143) string -> CHAR .
    [               reduce using rule 143 (string -> CHAR .)
    (               reduce using rule 143 (string -> CHAR .)
    :               reduce using rule 143 (string -> CHAR .)
    >               reduce using rule 143 (string -> CHAR .)
    <               reduce using rule 143 (string -> CHAR .)
    &               reduce using rule 143 (string -> CHAR .)
    ^               reduce using rule 143 (string -> CHAR .)
    |               reduce using rule 143 (string -> CHAR .)
    EQ_GREATER      reduce using rule 143 (string -> CHAR .)
    EQ_LESS         reduce using rule 143 (string -> CHAR .)
    NOT_EQEQ        reduce using rule 143 (string -> CHAR .)
    EQEQ            reduce using rule 143 (string -> CHAR .)
    %               reduce using rule 143 (string -> CHAR .)
    *               reduce using rule 143 (string -> CHAR .)
    /               reduce using rule 143 (string -> CHAR .)
    -               reduce using rule 143 (string -> CHAR .)
    +               reduce using rule 143 (string -> CHAR .)
    ,               reduce using rule 143 (string -> CHAR .)
    }               reduce using rule 143 (string -> CHAR .)
    ;               reduce using rule 143 (string -> CHAR .)
    ?               reduce using rule 143 (string -> CHAR .)
    IN              reduce using rule 143 (string -> CHAR .)
    ]               reduce using rule 143 (string -> CHAR .)
    )               reduce using rule 143 (string -> CHAR .)
    {               reduce using rule 143 (string -> CHAR .)
    SANDBOX         reduce using rule 143 (string -> CHAR .)
    LIMPORT         reduce using rule 143 (string -> CHAR .)
    .               reduce using rule 143 (string -> CHAR .)
    IMPORT          reduce using rule 143 (string -> CHAR .)
    ID              reduce using rule 143 (string -> CHAR .)
    RETURN          reduce using rule 143 (string -> CHAR .)
    DEL             reduce using rule 143 (string -> CHAR .)
    !               reduce using rule 143 (string -> CHAR .)
    FOR             reduce using rule 143 (string -> CHAR .)
    DEBUG           reduce using rule 143 (string -> CHAR .)
    SKIP            reduce using rule 143 (string -> CHAR .)
    BREAK           reduce using rule 143 (string -> CHAR .)
    @               reduce using rule 143 (string -> CHAR .)
    WHILE           reduce using rule 143 (string -> CHAR .)
    #               reduce using rule 143 (string -> CHAR .)
    NAMESPACE       reduce using rule 143 (string -> CHAR .)
    CLASS           reduce using rule 143 (string -> CHAR .)
    FUNC            reduce using rule 143 (string -> CHAR .)
    PYTHON_CODE_EXEC reduce using rule 143 (string -> CHAR .)
    PYTHON_CODE     reduce using rule 143 (string -> CHAR .)
    IF              reduce using rule 143 (string -> CHAR .)
    CHAR            reduce using rule 143 (string -> CHAR .)
    STRING          reduce using rule 143 (string -> CHAR .)
    FALSE           reduce using rule 143 (string -> CHAR .)
    TRUE            reduce using rule 143 (string -> CHAR .)
    FLOAT           reduce using rule 143 (string -> CHAR .)
    HEX             reduce using rule 143 (string -> CHAR .)
    INT             reduce using rule 143 (string -> CHAR .)
    NULL            reduce using rule 143 (string -> CHAR .)
    $end            reduce using rule 143 (string -> CHAR .)


state 68

    (144) string -> STRING .
    [               reduce using rule 144 (string -> STRING .)
    (               reduce using rule 144 (string -> STRING .)
    :               reduce using rule 144 (string -> STRING .)
    >               reduce using rule 144 (string -> STRING .)
    <               reduce using rule 144 (string -> STRING .)
    &               reduce using rule 144 (string -> STRING .)
    ^               reduce using rule 144 (string -> STRING .)
    |               reduce using rule 144 (string -> STRING .)
    EQ_GREATER      reduce using rule 144 (string -> STRING .)
    EQ_LESS         reduce using rule 144 (string -> STRING .)
    NOT_EQEQ        reduce using rule 144 (string -> STRING .)
    EQEQ            reduce using rule 144 (string -> STRING .)
    %               reduce using rule 144 (string -> STRING .)
    *               reduce using rule 144 (string -> STRING .)
    /               reduce using rule 144 (string -> STRING .)
    -               reduce using rule 144 (string -> STRING .)
    +               reduce using rule 144 (string -> STRING .)
    ,               reduce using rule 144 (string -> STRING .)
    }               reduce using rule 144 (string -> STRING .)
    ;               reduce using rule 144 (string -> STRING .)
    ?               reduce using rule 144 (string -> STRING .)
    IN              reduce using rule 144 (string -> STRING .)
    ]               reduce using rule 144 (string -> STRING .)
    )               reduce using rule 144 (string -> STRING .)
    {               reduce using rule 144 (string -> STRING .)
    SANDBOX         reduce using rule 144 (string -> STRING .)
    LIMPORT         reduce using rule 144 (string -> STRING .)
    .               reduce using rule 144 (string -> STRING .)
    IMPORT          reduce using rule 144 (string -> STRING .)
    ID              reduce using rule 144 (string -> STRING .)
    RETURN          reduce using rule 144 (string -> STRING .)
    DEL             reduce using rule 144 (string -> STRING .)
    !               reduce using rule 144 (string -> STRING .)
    FOR             reduce using rule 144 (string -> STRING .)
    DEBUG           reduce using rule 144 (string -> STRING .)
    SKIP            reduce using rule 144 (string -> STRING .)
    BREAK           reduce using rule 144 (string -> STRING .)
    @               reduce using rule 144 (string -> STRING .)
    WHILE           reduce using rule 144 (string -> STRING .)
    #               reduce using rule 144 (string -> STRING .)
    NAMESPACE       reduce using rule 144 (string -> STRING .)
    CLASS           reduce using rule 144 (string -> STRING .)
    FUNC            reduce using rule 144 (string -> STRING .)
    PYTHON_CODE_EXEC reduce using rule 144 (string -> STRING .)
    PYTHON_CODE     reduce using rule 144 (string -> STRING .)
    IF              reduce using rule 144 (string -> STRING .)
    CHAR            reduce using rule 144 (string -> STRING .)
    STRING          reduce using rule 144 (string -> STRING .)
    FALSE           reduce using rule 144 (string -> STRING .)
    TRUE            reduce using rule 144 (string -> STRING .)
    FLOAT           reduce using rule 144 (string -> STRING .)
    HEX             reduce using rule 144 (string -> STRING .)
    INT             reduce using rule 144 (string -> STRING .)
    NULL            reduce using rule 144 (string -> STRING .)
    $end            reduce using rule 144 (string -> STRING .)


state 69

    (146) bool -> FALSE .
    [               reduce using rule 146 (bool -> FALSE .)
    (               reduce using rule 146 (bool -> FALSE .)
    :               reduce using rule 146 (bool -> FALSE .)
    >               reduce using rule 146 (bool -> FALSE .)
    <               reduce using rule 146 (bool -> FALSE .)
    &               reduce using rule 146 (bool -> FALSE .)
    ^               reduce using rule 146 (bool -> FALSE .)
    |               reduce using rule 146 (bool -> FALSE .)
    EQ_GREATER      reduce using rule 146 (bool -> FALSE .)
    EQ_LESS         reduce using rule 146 (bool -> FALSE .)
    NOT_EQEQ        reduce using rule 146 (bool -> FALSE .)
    EQEQ            reduce using rule 146 (bool -> FALSE .)
    %               reduce using rule 146 (bool -> FALSE .)
    *               reduce using rule 146 (bool -> FALSE .)
    /               reduce using rule 146 (bool -> FALSE .)
    -               reduce using rule 146 (bool -> FALSE .)
    +               reduce using rule 146 (bool -> FALSE .)
    ,               reduce using rule 146 (bool -> FALSE .)
    }               reduce using rule 146 (bool -> FALSE .)
    ;               reduce using rule 146 (bool -> FALSE .)
    ?               reduce using rule 146 (bool -> FALSE .)
    IN              reduce using rule 146 (bool -> FALSE .)
    ]               reduce using rule 146 (bool -> FALSE .)
    )               reduce using rule 146 (bool -> FALSE .)
    {               reduce using rule 146 (bool -> FALSE .)
    SANDBOX         reduce using rule 146 (bool -> FALSE .)
    LIMPORT         reduce using rule 146 (bool -> FALSE .)
    .               reduce using rule 146 (bool -> FALSE .)
    IMPORT          reduce using rule 146 (bool -> FALSE .)
    ID              reduce using rule 146 (bool -> FALSE .)
    RETURN          reduce using rule 146 (bool -> FALSE .)
    DEL             reduce using rule 146 (bool -> FALSE .)
    !               reduce using rule 146 (bool -> FALSE .)
    FOR             reduce using rule 146 (bool -> FALSE .)
    DEBUG           reduce using rule 146 (bool -> FALSE .)
    SKIP            reduce using rule 146 (bool -> FALSE .)
    BREAK           reduce using rule 146 (bool -> FALSE .)
    @               reduce using rule 146 (bool -> FALSE .)
    WHILE           reduce using rule 146 (bool -> FALSE .)
    #               reduce using rule 146 (bool -> FALSE .)
    NAMESPACE       reduce using rule 146 (bool -> FALSE .)
    CLASS           reduce using rule 146 (bool -> FALSE .)
    FUNC            reduce using rule 146 (bool -> FALSE .)
    PYTHON_CODE_EXEC reduce using rule 146 (bool -> FALSE .)
    PYTHON_CODE     reduce using rule 146 (bool -> FALSE .)
    IF              reduce using rule 146 (bool -> FALSE .)
    CHAR            reduce using rule 146 (bool -> FALSE .)
    STRING          reduce using rule 146 (bool -> FALSE .)
    FALSE           reduce using rule 146 (bool -> FALSE .)
    TRUE            reduce using rule 146 (bool -> FALSE .)
    FLOAT           reduce using rule 146 (bool -> FALSE .)
    HEX             reduce using rule 146 (bool -> FALSE .)
    INT             reduce using rule 146 (bool -> FALSE .)
    NULL            reduce using rule 146 (bool -> FALSE .)
    $end            reduce using rule 146 (bool -> FALSE .)


state 70

    (147) bool -> TRUE .
    [               reduce using rule 147 (bool -> TRUE .)
    (               reduce using rule 147 (bool -> TRUE .)
    :               reduce using rule 147 (bool -> TRUE .)
    >               reduce using rule 147 (bool -> TRUE .)
    <               reduce using rule 147 (bool -> TRUE .)
    &               reduce using rule 147 (bool -> TRUE .)
    ^               reduce using rule 147 (bool -> TRUE .)
    |               reduce using rule 147 (bool -> TRUE .)
    EQ_GREATER      reduce using rule 147 (bool -> TRUE .)
    EQ_LESS         reduce using rule 147 (bool -> TRUE .)
    NOT_EQEQ        reduce using rule 147 (bool -> TRUE .)
    EQEQ            reduce using rule 147 (bool -> TRUE .)
    %               reduce using rule 147 (bool -> TRUE .)
    *               reduce using rule 147 (bool -> TRUE .)
    /               reduce using rule 147 (bool -> TRUE .)
    -               reduce using rule 147 (bool -> TRUE .)
    +               reduce using rule 147 (bool -> TRUE .)
    ,               reduce using rule 147 (bool -> TRUE .)
    }               reduce using rule 147 (bool -> TRUE .)
    ;               reduce using rule 147 (bool -> TRUE .)
    ?               reduce using rule 147 (bool -> TRUE .)
    IN              reduce using rule 147 (bool -> TRUE .)
    ]               reduce using rule 147 (bool -> TRUE .)
    )               reduce using rule 147 (bool -> TRUE .)
    {               reduce using rule 147 (bool -> TRUE .)
    SANDBOX         reduce using rule 147 (bool -> TRUE .)
    LIMPORT         reduce using rule 147 (bool -> TRUE .)
    .               reduce using rule 147 (bool -> TRUE .)
    IMPORT          reduce using rule 147 (bool -> TRUE .)
    ID              reduce using rule 147 (bool -> TRUE .)
    RETURN          reduce using rule 147 (bool -> TRUE .)
    DEL             reduce using rule 147 (bool -> TRUE .)
    !               reduce using rule 147 (bool -> TRUE .)
    FOR             reduce using rule 147 (bool -> TRUE .)
    DEBUG           reduce using rule 147 (bool -> TRUE .)
    SKIP            reduce using rule 147 (bool -> TRUE .)
    BREAK           reduce using rule 147 (bool -> TRUE .)
    @               reduce using rule 147 (bool -> TRUE .)
    WHILE           reduce using rule 147 (bool -> TRUE .)
    #               reduce using rule 147 (bool -> TRUE .)
    NAMESPACE       reduce using rule 147 (bool -> TRUE .)
    CLASS           reduce using rule 147 (bool -> TRUE .)
    FUNC            reduce using rule 147 (bool -> TRUE .)
    PYTHON_CODE_EXEC reduce using rule 147 (bool -> TRUE .)
    PYTHON_CODE     reduce using rule 147 (bool -> TRUE .)
    IF              reduce using rule 147 (bool -> TRUE .)
    CHAR            reduce using rule 147 (bool -> TRUE .)
    STRING          reduce using rule 147 (bool -> TRUE .)
    FALSE           reduce using rule 147 (bool -> TRUE .)
    TRUE            reduce using rule 147 (bool -> TRUE .)
    FLOAT           reduce using rule 147 (bool -> TRUE .)
    HEX             reduce using rule 147 (bool -> TRUE .)
    INT             reduce using rule 147 (bool -> TRUE .)
    NULL            reduce using rule 147 (bool -> TRUE .)
    $end            reduce using rule 147 (bool -> TRUE .)


state 71

    (145) float -> FLOAT .
    [               reduce using rule 145 (float -> FLOAT .)
    (               reduce using rule 145 (float -> FLOAT .)
    :               reduce using rule 145 (float -> FLOAT .)
    >               reduce using rule 145 (float -> FLOAT .)
    <               reduce using rule 145 (float -> FLOAT .)
    &               reduce using rule 145 (float -> FLOAT .)
    ^               reduce using rule 145 (float -> FLOAT .)
    |               reduce using rule 145 (float -> FLOAT .)
    EQ_GREATER      reduce using rule 145 (float -> FLOAT .)
    EQ_LESS         reduce using rule 145 (float -> FLOAT .)
    NOT_EQEQ        reduce using rule 145 (float -> FLOAT .)
    EQEQ            reduce using rule 145 (float -> FLOAT .)
    %               reduce using rule 145 (float -> FLOAT .)
    *               reduce using rule 145 (float -> FLOAT .)
    /               reduce using rule 145 (float -> FLOAT .)
    -               reduce using rule 145 (float -> FLOAT .)
    +               reduce using rule 145 (float -> FLOAT .)
    ,               reduce using rule 145 (float -> FLOAT .)
    }               reduce using rule 145 (float -> FLOAT .)
    ;               reduce using rule 145 (float -> FLOAT .)
    ?               reduce using rule 145 (float -> FLOAT .)
    IN              reduce using rule 145 (float -> FLOAT .)
    ]               reduce using rule 145 (float -> FLOAT .)
    )               reduce using rule 145 (float -> FLOAT .)
    {               reduce using rule 145 (float -> FLOAT .)
    SANDBOX         reduce using rule 145 (float -> FLOAT .)
    LIMPORT         reduce using rule 145 (float -> FLOAT .)
    .               reduce using rule 145 (float -> FLOAT .)
    IMPORT          reduce using rule 145 (float -> FLOAT .)
    ID              reduce using rule 145 (float -> FLOAT .)
    RETURN          reduce using rule 145 (float -> FLOAT .)
    DEL             reduce using rule 145 (float -> FLOAT .)
    !               reduce using rule 145 (float -> FLOAT .)
    FOR             reduce using rule 145 (float -> FLOAT .)
    DEBUG           reduce using rule 145 (float -> FLOAT .)
    SKIP            reduce using rule 145 (float -> FLOAT .)
    BREAK           reduce using rule 145 (float -> FLOAT .)
    @               reduce using rule 145 (float -> FLOAT .)
    WHILE           reduce using rule 145 (float -> FLOAT .)
    #               reduce using rule 145 (float -> FLOAT .)
    NAMESPACE       reduce using rule 145 (float -> FLOAT .)
    CLASS           reduce using rule 145 (float -> FLOAT .)
    FUNC            reduce using rule 145 (float -> FLOAT .)
    PYTHON_CODE_EXEC reduce using rule 145 (float -> FLOAT .)
    PYTHON_CODE     reduce using rule 145 (float -> FLOAT .)
    IF              reduce using rule 145 (float -> FLOAT .)
    CHAR            reduce using rule 145 (float -> FLOAT .)
    STRING          reduce using rule 145 (float -> FLOAT .)
    FALSE           reduce using rule 145 (float -> FLOAT .)
    TRUE            reduce using rule 145 (float -> FLOAT .)
    FLOAT           reduce using rule 145 (float -> FLOAT .)
    HEX             reduce using rule 145 (float -> FLOAT .)
    INT             reduce using rule 145 (float -> FLOAT .)
    NULL            reduce using rule 145 (float -> FLOAT .)
    $end            reduce using rule 145 (float -> FLOAT .)


state 72

    (141) int -> INT .
    [               reduce using rule 141 (int -> INT .)
    (               reduce using rule 141 (int -> INT .)
    :               reduce using rule 141 (int -> INT .)
    >               reduce using rule 141 (int -> INT .)
    <               reduce using rule 141 (int -> INT .)
    &               reduce using rule 141 (int -> INT .)
    ^               reduce using rule 141 (int -> INT .)
    |               reduce using rule 141 (int -> INT .)
    EQ_GREATER      reduce using rule 141 (int -> INT .)
    EQ_LESS         reduce using rule 141 (int -> INT .)
    NOT_EQEQ        reduce using rule 141 (int -> INT .)
    EQEQ            reduce using rule 141 (int -> INT .)
    %               reduce using rule 141 (int -> INT .)
    *               reduce using rule 141 (int -> INT .)
    /               reduce using rule 141 (int -> INT .)
    -               reduce using rule 141 (int -> INT .)
    +               reduce using rule 141 (int -> INT .)
    ,               reduce using rule 141 (int -> INT .)
    }               reduce using rule 141 (int -> INT .)
    ;               reduce using rule 141 (int -> INT .)
    ?               reduce using rule 141 (int -> INT .)
    IN              reduce using rule 141 (int -> INT .)
    ]               reduce using rule 141 (int -> INT .)
    )               reduce using rule 141 (int -> INT .)
    {               reduce using rule 141 (int -> INT .)
    SANDBOX         reduce using rule 141 (int -> INT .)
    LIMPORT         reduce using rule 141 (int -> INT .)
    .               reduce using rule 141 (int -> INT .)
    IMPORT          reduce using rule 141 (int -> INT .)
    ID              reduce using rule 141 (int -> INT .)
    RETURN          reduce using rule 141 (int -> INT .)
    DEL             reduce using rule 141 (int -> INT .)
    !               reduce using rule 141 (int -> INT .)
    FOR             reduce using rule 141 (int -> INT .)
    DEBUG           reduce using rule 141 (int -> INT .)
    SKIP            reduce using rule 141 (int -> INT .)
    BREAK           reduce using rule 141 (int -> INT .)
    @               reduce using rule 141 (int -> INT .)
    WHILE           reduce using rule 141 (int -> INT .)
    #               reduce using rule 141 (int -> INT .)
    NAMESPACE       reduce using rule 141 (int -> INT .)
    CLASS           reduce using rule 141 (int -> INT .)
    FUNC            reduce using rule 141 (int -> INT .)
    PYTHON_CODE_EXEC reduce using rule 141 (int -> INT .)
    PYTHON_CODE     reduce using rule 141 (int -> INT .)
    IF              reduce using rule 141 (int -> INT .)
    CHAR            reduce using rule 141 (int -> INT .)
    STRING          reduce using rule 141 (int -> INT .)
    FALSE           reduce using rule 141 (int -> INT .)
    TRUE            reduce using rule 141 (int -> INT .)
    FLOAT           reduce using rule 141 (int -> INT .)
    HEX             reduce using rule 141 (int -> INT .)
    INT             reduce using rule 141 (int -> INT .)
    NULL            reduce using rule 141 (int -> INT .)
    $end            reduce using rule 141 (int -> INT .)


state 73

    (128) null -> NULL .
    [               reduce using rule 128 (null -> NULL .)
    (               reduce using rule 128 (null -> NULL .)
    :               reduce using rule 128 (null -> NULL .)
    >               reduce using rule 128 (null -> NULL .)
    <               reduce using rule 128 (null -> NULL .)
    &               reduce using rule 128 (null -> NULL .)
    ^               reduce using rule 128 (null -> NULL .)
    |               reduce using rule 128 (null -> NULL .)
    EQ_GREATER      reduce using rule 128 (null -> NULL .)
    EQ_LESS         reduce using rule 128 (null -> NULL .)
    NOT_EQEQ        reduce using rule 128 (null -> NULL .)
    EQEQ            reduce using rule 128 (null -> NULL .)
    %               reduce using rule 128 (null -> NULL .)
    *               reduce using rule 128 (null -> NULL .)
    /               reduce using rule 128 (null -> NULL .)
    -               reduce using rule 128 (null -> NULL .)
    +               reduce using rule 128 (null -> NULL .)
    ,               reduce using rule 128 (null -> NULL .)
    }               reduce using rule 128 (null -> NULL .)
    ;               reduce using rule 128 (null -> NULL .)
    ?               reduce using rule 128 (null -> NULL .)
    IN              reduce using rule 128 (null -> NULL .)
    ]               reduce using rule 128 (null -> NULL .)
    )               reduce using rule 128 (null -> NULL .)
    {               reduce using rule 128 (null -> NULL .)
    SANDBOX         reduce using rule 128 (null -> NULL .)
    LIMPORT         reduce using rule 128 (null -> NULL .)
    .               reduce using rule 128 (null -> NULL .)
    IMPORT          reduce using rule 128 (null -> NULL .)
    ID              reduce using rule 128 (null -> NULL .)
    RETURN          reduce using rule 128 (null -> NULL .)
    DEL             reduce using rule 128 (null -> NULL .)
    !               reduce using rule 128 (null -> NULL .)
    FOR             reduce using rule 128 (null -> NULL .)
    DEBUG           reduce using rule 128 (null -> NULL .)
    SKIP            reduce using rule 128 (null -> NULL .)
    BREAK           reduce using rule 128 (null -> NULL .)
    @               reduce using rule 128 (null -> NULL .)
    WHILE           reduce using rule 128 (null -> NULL .)
    #               reduce using rule 128 (null -> NULL .)
    NAMESPACE       reduce using rule 128 (null -> NULL .)
    CLASS           reduce using rule 128 (null -> NULL .)
    FUNC            reduce using rule 128 (null -> NULL .)
    PYTHON_CODE_EXEC reduce using rule 128 (null -> NULL .)
    PYTHON_CODE     reduce using rule 128 (null -> NULL .)
    IF              reduce using rule 128 (null -> NULL .)
    CHAR            reduce using rule 128 (null -> NULL .)
    STRING          reduce using rule 128 (null -> NULL .)
    FALSE           reduce using rule 128 (null -> NULL .)
    TRUE            reduce using rule 128 (null -> NULL .)
    FLOAT           reduce using rule 128 (null -> NULL .)
    HEX             reduce using rule 128 (null -> NULL .)
    INT             reduce using rule 128 (null -> NULL .)
    NULL            reduce using rule 128 (null -> NULL .)
    $end            reduce using rule 128 (null -> NULL .)


state 74

    (3) program -> program statement .
    SANDBOX         reduce using rule 3 (program -> program statement .)
    LIMPORT         reduce using rule 3 (program -> program statement .)
    .               reduce using rule 3 (program -> program statement .)
    IMPORT          reduce using rule 3 (program -> program statement .)
    ID              reduce using rule 3 (program -> program statement .)
    RETURN          reduce using rule 3 (program -> program statement .)
    DEL             reduce using rule 3 (program -> program statement .)
    !               reduce using rule 3 (program -> program statement .)
    FOR             reduce using rule 3 (program -> program statement .)
    DEBUG           reduce using rule 3 (program -> program statement .)
    SKIP            reduce using rule 3 (program -> program statement .)
    BREAK           reduce using rule 3 (program -> program statement .)
    @               reduce using rule 3 (program -> program statement .)
    [               reduce using rule 3 (program -> program statement .)
    WHILE           reduce using rule 3 (program -> program statement .)
    ?               reduce using rule 3 (program -> program statement .)
    #               reduce using rule 3 (program -> program statement .)
    NAMESPACE       reduce using rule 3 (program -> program statement .)
    CLASS           reduce using rule 3 (program -> program statement .)
    FUNC            reduce using rule 3 (program -> program statement .)
    PYTHON_CODE_EXEC reduce using rule 3 (program -> program statement .)
    PYTHON_CODE     reduce using rule 3 (program -> program statement .)
    IF              reduce using rule 3 (program -> program statement .)
    <               reduce using rule 3 (program -> program statement .)
    (               reduce using rule 3 (program -> program statement .)
    +               reduce using rule 3 (program -> program statement .)
    -               reduce using rule 3 (program -> program statement .)
    *               reduce using rule 3 (program -> program statement .)
    &               reduce using rule 3 (program -> program statement .)
    {               reduce using rule 3 (program -> program statement .)
    CHAR            reduce using rule 3 (program -> program statement .)
    STRING          reduce using rule 3 (program -> program statement .)
    FALSE           reduce using rule 3 (program -> program statement .)
    TRUE            reduce using rule 3 (program -> program statement .)
    FLOAT           reduce using rule 3 (program -> program statement .)
    HEX             reduce using rule 3 (program -> program statement .)
    INT             reduce using rule 3 (program -> program statement .)
    NULL            reduce using rule 3 (program -> program statement .)
    $end            reduce using rule 3 (program -> program statement .)
    }               reduce using rule 3 (program -> program statement .)


state 75

    (19) sandbox -> SANDBOX { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    program                        shift and go to state 162
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 76

    (150) assoc_array -> { assoc_array_items . }
    (152) assoc_array_items -> assoc_array_items . , expression : expression
    }               shift and go to state 163
    ,               shift and go to state 164


state 77

    (130) _tuple -> { positional_args . , }
    (131) _tuple -> { positional_args . }
    (62) positional_args -> positional_args . , expression
    ,               shift and go to state 165
    }               shift and go to state 166


state 78

    (151) assoc_array_items -> expression . : expression
    (61) positional_args -> expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    :               shift and go to state 167
    ,               reduce using rule 61 (positional_args -> expression .)
    }               reduce using rule 61 (positional_args -> expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89


state 79

    (101) expression -> get_index .
    :               reduce using rule 101 (expression -> get_index .)
    >               reduce using rule 101 (expression -> get_index .)
    <               reduce using rule 101 (expression -> get_index .)
    &               reduce using rule 101 (expression -> get_index .)
    ^               reduce using rule 101 (expression -> get_index .)
    |               reduce using rule 101 (expression -> get_index .)
    EQ_GREATER      reduce using rule 101 (expression -> get_index .)
    EQ_LESS         reduce using rule 101 (expression -> get_index .)
    NOT_EQEQ        reduce using rule 101 (expression -> get_index .)
    EQEQ            reduce using rule 101 (expression -> get_index .)
    %               reduce using rule 101 (expression -> get_index .)
    *               reduce using rule 101 (expression -> get_index .)
    /               reduce using rule 101 (expression -> get_index .)
    -               reduce using rule 101 (expression -> get_index .)
    +               reduce using rule 101 (expression -> get_index .)
    [               reduce using rule 101 (expression -> get_index .)
    (               reduce using rule 101 (expression -> get_index .)
    ,               reduce using rule 101 (expression -> get_index .)
    }               reduce using rule 101 (expression -> get_index .)
    ;               reduce using rule 101 (expression -> get_index .)
    ?               reduce using rule 101 (expression -> get_index .)
    IN              reduce using rule 101 (expression -> get_index .)
    ]               reduce using rule 101 (expression -> get_index .)
    )               reduce using rule 101 (expression -> get_index .)
    {               reduce using rule 101 (expression -> get_index .)
    SANDBOX         reduce using rule 101 (expression -> get_index .)
    LIMPORT         reduce using rule 101 (expression -> get_index .)
    .               reduce using rule 101 (expression -> get_index .)
    IMPORT          reduce using rule 101 (expression -> get_index .)
    ID              reduce using rule 101 (expression -> get_index .)
    RETURN          reduce using rule 101 (expression -> get_index .)
    DEL             reduce using rule 101 (expression -> get_index .)
    !               reduce using rule 101 (expression -> get_index .)
    FOR             reduce using rule 101 (expression -> get_index .)
    DEBUG           reduce using rule 101 (expression -> get_index .)
    SKIP            reduce using rule 101 (expression -> get_index .)
    BREAK           reduce using rule 101 (expression -> get_index .)
    @               reduce using rule 101 (expression -> get_index .)
    WHILE           reduce using rule 101 (expression -> get_index .)
    #               reduce using rule 101 (expression -> get_index .)
    NAMESPACE       reduce using rule 101 (expression -> get_index .)
    CLASS           reduce using rule 101 (expression -> get_index .)
    FUNC            reduce using rule 101 (expression -> get_index .)
    PYTHON_CODE_EXEC reduce using rule 101 (expression -> get_index .)
    PYTHON_CODE     reduce using rule 101 (expression -> get_index .)
    IF              reduce using rule 101 (expression -> get_index .)
    CHAR            reduce using rule 101 (expression -> get_index .)
    STRING          reduce using rule 101 (expression -> get_index .)
    FALSE           reduce using rule 101 (expression -> get_index .)
    TRUE            reduce using rule 101 (expression -> get_index .)
    FLOAT           reduce using rule 101 (expression -> get_index .)
    HEX             reduce using rule 101 (expression -> get_index .)
    INT             reduce using rule 101 (expression -> get_index .)
    NULL            reduce using rule 101 (expression -> get_index .)
    $end            reduce using rule 101 (expression -> get_index .)


state 80

    (102) expression -> function_call .
    :               reduce using rule 102 (expression -> function_call .)
    >               reduce using rule 102 (expression -> function_call .)
    <               reduce using rule 102 (expression -> function_call .)
    &               reduce using rule 102 (expression -> function_call .)
    ^               reduce using rule 102 (expression -> function_call .)
    |               reduce using rule 102 (expression -> function_call .)
    EQ_GREATER      reduce using rule 102 (expression -> function_call .)
    EQ_LESS         reduce using rule 102 (expression -> function_call .)
    NOT_EQEQ        reduce using rule 102 (expression -> function_call .)
    EQEQ            reduce using rule 102 (expression -> function_call .)
    %               reduce using rule 102 (expression -> function_call .)
    *               reduce using rule 102 (expression -> function_call .)
    /               reduce using rule 102 (expression -> function_call .)
    -               reduce using rule 102 (expression -> function_call .)
    +               reduce using rule 102 (expression -> function_call .)
    [               reduce using rule 102 (expression -> function_call .)
    (               reduce using rule 102 (expression -> function_call .)
    ,               reduce using rule 102 (expression -> function_call .)
    }               reduce using rule 102 (expression -> function_call .)
    ;               reduce using rule 102 (expression -> function_call .)
    ?               reduce using rule 102 (expression -> function_call .)
    IN              reduce using rule 102 (expression -> function_call .)
    ]               reduce using rule 102 (expression -> function_call .)
    )               reduce using rule 102 (expression -> function_call .)
    {               reduce using rule 102 (expression -> function_call .)
    SANDBOX         reduce using rule 102 (expression -> function_call .)
    LIMPORT         reduce using rule 102 (expression -> function_call .)
    .               reduce using rule 102 (expression -> function_call .)
    IMPORT          reduce using rule 102 (expression -> function_call .)
    ID              reduce using rule 102 (expression -> function_call .)
    RETURN          reduce using rule 102 (expression -> function_call .)
    DEL             reduce using rule 102 (expression -> function_call .)
    !               reduce using rule 102 (expression -> function_call .)
    FOR             reduce using rule 102 (expression -> function_call .)
    DEBUG           reduce using rule 102 (expression -> function_call .)
    SKIP            reduce using rule 102 (expression -> function_call .)
    BREAK           reduce using rule 102 (expression -> function_call .)
    @               reduce using rule 102 (expression -> function_call .)
    WHILE           reduce using rule 102 (expression -> function_call .)
    #               reduce using rule 102 (expression -> function_call .)
    NAMESPACE       reduce using rule 102 (expression -> function_call .)
    CLASS           reduce using rule 102 (expression -> function_call .)
    FUNC            reduce using rule 102 (expression -> function_call .)
    PYTHON_CODE_EXEC reduce using rule 102 (expression -> function_call .)
    PYTHON_CODE     reduce using rule 102 (expression -> function_call .)
    IF              reduce using rule 102 (expression -> function_call .)
    CHAR            reduce using rule 102 (expression -> function_call .)
    STRING          reduce using rule 102 (expression -> function_call .)
    FALSE           reduce using rule 102 (expression -> function_call .)
    TRUE            reduce using rule 102 (expression -> function_call .)
    FLOAT           reduce using rule 102 (expression -> function_call .)
    HEX             reduce using rule 102 (expression -> function_call .)
    INT             reduce using rule 102 (expression -> function_call .)
    NULL            reduce using rule 102 (expression -> function_call .)
    $end            reduce using rule 102 (expression -> function_call .)


state 81

    (103) expression -> python_code .
    :               reduce using rule 103 (expression -> python_code .)
    >               reduce using rule 103 (expression -> python_code .)
    <               reduce using rule 103 (expression -> python_code .)
    &               reduce using rule 103 (expression -> python_code .)
    ^               reduce using rule 103 (expression -> python_code .)
    |               reduce using rule 103 (expression -> python_code .)
    EQ_GREATER      reduce using rule 103 (expression -> python_code .)
    EQ_LESS         reduce using rule 103 (expression -> python_code .)
    NOT_EQEQ        reduce using rule 103 (expression -> python_code .)
    EQEQ            reduce using rule 103 (expression -> python_code .)
    %               reduce using rule 103 (expression -> python_code .)
    *               reduce using rule 103 (expression -> python_code .)
    /               reduce using rule 103 (expression -> python_code .)
    -               reduce using rule 103 (expression -> python_code .)
    +               reduce using rule 103 (expression -> python_code .)
    [               reduce using rule 103 (expression -> python_code .)
    (               reduce using rule 103 (expression -> python_code .)
    ,               reduce using rule 103 (expression -> python_code .)
    }               reduce using rule 103 (expression -> python_code .)
    ;               reduce using rule 103 (expression -> python_code .)
    ?               reduce using rule 103 (expression -> python_code .)
    IN              reduce using rule 103 (expression -> python_code .)
    ]               reduce using rule 103 (expression -> python_code .)
    )               reduce using rule 103 (expression -> python_code .)
    {               reduce using rule 103 (expression -> python_code .)
    SANDBOX         reduce using rule 103 (expression -> python_code .)
    LIMPORT         reduce using rule 103 (expression -> python_code .)
    .               reduce using rule 103 (expression -> python_code .)
    IMPORT          reduce using rule 103 (expression -> python_code .)
    ID              reduce using rule 103 (expression -> python_code .)
    RETURN          reduce using rule 103 (expression -> python_code .)
    DEL             reduce using rule 103 (expression -> python_code .)
    !               reduce using rule 103 (expression -> python_code .)
    FOR             reduce using rule 103 (expression -> python_code .)
    DEBUG           reduce using rule 103 (expression -> python_code .)
    SKIP            reduce using rule 103 (expression -> python_code .)
    BREAK           reduce using rule 103 (expression -> python_code .)
    @               reduce using rule 103 (expression -> python_code .)
    WHILE           reduce using rule 103 (expression -> python_code .)
    #               reduce using rule 103 (expression -> python_code .)
    NAMESPACE       reduce using rule 103 (expression -> python_code .)
    CLASS           reduce using rule 103 (expression -> python_code .)
    FUNC            reduce using rule 103 (expression -> python_code .)
    PYTHON_CODE_EXEC reduce using rule 103 (expression -> python_code .)
    PYTHON_CODE     reduce using rule 103 (expression -> python_code .)
    IF              reduce using rule 103 (expression -> python_code .)
    CHAR            reduce using rule 103 (expression -> python_code .)
    STRING          reduce using rule 103 (expression -> python_code .)
    FALSE           reduce using rule 103 (expression -> python_code .)
    TRUE            reduce using rule 103 (expression -> python_code .)
    FLOAT           reduce using rule 103 (expression -> python_code .)
    HEX             reduce using rule 103 (expression -> python_code .)
    INT             reduce using rule 103 (expression -> python_code .)
    NULL            reduce using rule 103 (expression -> python_code .)
    $end            reduce using rule 103 (expression -> python_code .)


state 82

    (109) expression -> ! . expression
    (148) class_attribute -> ! . expression ? ID
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 129
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 83

    (126) expression -> ID . ID [ expression ]
    (127) expression -> ID . ID
    (149) id -> ID .
    (31) function_call -> ID . TARROW ID
  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 168
    :               reduce using rule 149 (id -> ID .)
    >               reduce using rule 149 (id -> ID .)
    <               reduce using rule 149 (id -> ID .)
    &               reduce using rule 149 (id -> ID .)
    ^               reduce using rule 149 (id -> ID .)
    |               reduce using rule 149 (id -> ID .)
    EQ_GREATER      reduce using rule 149 (id -> ID .)
    EQ_LESS         reduce using rule 149 (id -> ID .)
    NOT_EQEQ        reduce using rule 149 (id -> ID .)
    EQEQ            reduce using rule 149 (id -> ID .)
    %               reduce using rule 149 (id -> ID .)
    *               reduce using rule 149 (id -> ID .)
    /               reduce using rule 149 (id -> ID .)
    -               reduce using rule 149 (id -> ID .)
    +               reduce using rule 149 (id -> ID .)
    [               reduce using rule 149 (id -> ID .)
    (               reduce using rule 149 (id -> ID .)
    ,               reduce using rule 149 (id -> ID .)
    }               reduce using rule 149 (id -> ID .)
    ;               reduce using rule 149 (id -> ID .)
    ?               reduce using rule 149 (id -> ID .)
    IN              reduce using rule 149 (id -> ID .)
    ]               reduce using rule 149 (id -> ID .)
    )               reduce using rule 149 (id -> ID .)
    {               reduce using rule 149 (id -> ID .)
    SANDBOX         reduce using rule 149 (id -> ID .)
    LIMPORT         reduce using rule 149 (id -> ID .)
    .               reduce using rule 149 (id -> ID .)
    IMPORT          reduce using rule 149 (id -> ID .)
    RETURN          reduce using rule 149 (id -> ID .)
    DEL             reduce using rule 149 (id -> ID .)
    !               reduce using rule 149 (id -> ID .)
    FOR             reduce using rule 149 (id -> ID .)
    DEBUG           reduce using rule 149 (id -> ID .)
    SKIP            reduce using rule 149 (id -> ID .)
    BREAK           reduce using rule 149 (id -> ID .)
    @               reduce using rule 149 (id -> ID .)
    WHILE           reduce using rule 149 (id -> ID .)
    #               reduce using rule 149 (id -> ID .)
    NAMESPACE       reduce using rule 149 (id -> ID .)
    CLASS           reduce using rule 149 (id -> ID .)
    FUNC            reduce using rule 149 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 149 (id -> ID .)
    PYTHON_CODE     reduce using rule 149 (id -> ID .)
    IF              reduce using rule 149 (id -> ID .)
    CHAR            reduce using rule 149 (id -> ID .)
    STRING          reduce using rule 149 (id -> ID .)
    FALSE           reduce using rule 149 (id -> ID .)
    TRUE            reduce using rule 149 (id -> ID .)
    FLOAT           reduce using rule 149 (id -> ID .)
    HEX             reduce using rule 149 (id -> ID .)
    INT             reduce using rule 149 (id -> ID .)
    NULL            reduce using rule 149 (id -> ID .)
    $end            reduce using rule 149 (id -> ID .)
    TARROW          shift and go to state 125


state 84

    (132) _list -> [ . positional_args , ]
    (133) _list -> [ . positional_args ]
    (61) positional_args -> . expression
    (62) positional_args -> . positional_args , expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    positional_args                shift and go to state 138
    expression                     shift and go to state 137
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 85

    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    ENV             shift and go to state 107


state 86

    (32) function_call -> # . DEPENDS expression
    (33) function_call -> # . ID expression
    DEPENDS         shift and go to state 155
    ID              shift and go to state 154


state 87

    (20) sandbox -> LIMPORT expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 169
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 88

    (129) get_index -> expression [ . expression ]
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 170
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 89

    (29) function_call -> expression ( . empty ) FARROW { program }
    (36) function_call -> expression ( . empty )
    (37) function_call -> expression ( . function_arguments )
    (155) empty -> .
    (51) function_arguments -> . kwargs
    (52) function_arguments -> . positional_args , kwargs
    (53) function_arguments -> . positional_args
    (63) kwargs -> . ID = expression
    (64) kwargs -> . kwargs , id = expression
    (61) positional_args -> . expression
    (62) positional_args -> . positional_args , expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    )               reduce using rule 155 (empty -> .)
    ID              shift and go to state 175
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 137
    empty                          shift and go to state 171
    function_arguments             shift and go to state 172
    kwargs                         shift and go to state 173
    positional_args                shift and go to state 174
    id                             shift and go to state 59
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 90

    (34) function_call -> expression : . : expression ( empty )
    (35) function_call -> expression : . : expression ( function_arguments )
    :               shift and go to state 176


state 91

    (105) expression -> expression > . > expression
    (107) expression -> expression > . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    >               shift and go to state 178
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 177
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 92

    (106) expression -> expression < . < expression
    (108) expression -> expression < . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    <               shift and go to state 180
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 179
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 93

    (110) expression -> expression & . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 181
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 94

    (111) expression -> expression ^ . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 182
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 95

    (112) expression -> expression | . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 183
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 96

    (113) expression -> expression EQ_GREATER . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 184
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 97

    (114) expression -> expression EQ_LESS . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 185
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 98

    (115) expression -> expression NOT_EQEQ . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 186
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 99

    (116) expression -> expression EQEQ . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 187
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 100

    (117) expression -> expression % . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 188
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 101

    (118) expression -> expression * . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 189
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 102

    (119) expression -> expression / . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 190
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 103

    (120) expression -> expression - . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 191
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 104

    (121) expression -> expression + . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 192
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 105

    (86) import_statement -> . SELFISH . ;
    ;               shift and go to state 193


state 106

    (87) import_statement -> . GLOBAL . ;
    ;               shift and go to state 194


state 107

    (27) function_call -> . ENV . FROM ID { program }
    (28) function_call -> . ENV . { program }
    FROM            shift and go to state 195
    {               shift and go to state 196


state 108

    (88) import_statement -> IMPORT expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 197
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 109

    (65) variable_operation -> get_index EQ_DIV . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    get_index                      shift and go to state 79
    expression                     shift and go to state 198
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 110

    (67) variable_operation -> get_index EQ_MOD . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    get_index                      shift and go to state 79
    expression                     shift and go to state 199
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 111

    (69) variable_operation -> get_index EQ_MUL . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    get_index                      shift and go to state 79
    expression                     shift and go to state 200
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 112

    (71) variable_operation -> get_index EQ_SUB . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    get_index                      shift and go to state 79
    expression                     shift and go to state 201
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 113

    (73) variable_operation -> get_index EQ_ADD . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    get_index                      shift and go to state 79
    expression                     shift and go to state 202
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 114

    (38) variable_assignment -> get_index = . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    get_index                      shift and go to state 79
    expression                     shift and go to state 203
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 115

    (42) variable_assignment -> ID ID . = [ HEX , ID ] ;
    (43) variable_assignment -> ID ID . = expression ;
    (126) expression -> ID ID . [ expression ]
    (127) expression -> ID ID .
  ! shift/reduce conflict for [ resolved as shift
    =               shift and go to state 204
    [               shift and go to state 205
    (               reduce using rule 127 (expression -> ID ID .)
    :               reduce using rule 127 (expression -> ID ID .)
    >               reduce using rule 127 (expression -> ID ID .)
    <               reduce using rule 127 (expression -> ID ID .)
    &               reduce using rule 127 (expression -> ID ID .)
    ^               reduce using rule 127 (expression -> ID ID .)
    |               reduce using rule 127 (expression -> ID ID .)
    EQ_GREATER      reduce using rule 127 (expression -> ID ID .)
    EQ_LESS         reduce using rule 127 (expression -> ID ID .)
    NOT_EQEQ        reduce using rule 127 (expression -> ID ID .)
    EQEQ            reduce using rule 127 (expression -> ID ID .)
    %               reduce using rule 127 (expression -> ID ID .)
    *               reduce using rule 127 (expression -> ID ID .)
    /               reduce using rule 127 (expression -> ID ID .)
    -               reduce using rule 127 (expression -> ID ID .)
    +               reduce using rule 127 (expression -> ID ID .)


state 116

    (66) variable_operation -> ID EQ_DIV . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 206
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 117

    (68) variable_operation -> ID EQ_MOD . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 207
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 118

    (70) variable_operation -> ID EQ_MUL . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 208
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 119

    (72) variable_operation -> ID EQ_SUB . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 209
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 120

    (74) variable_operation -> ID EQ_ADD . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 210
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 121

    (40) variable_assignment -> ID = . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 211
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 122

    (41) variable_assignment -> ID < . ID > ID = expression ;
    ID              shift and go to state 212


state 123

    (44) variable_assignment -> ID - . - ;
    -               shift and go to state 213


state 124

    (45) variable_assignment -> ID + . + ;
    +               shift and go to state 214


state 125

    (31) function_call -> ID TARROW . ID
    ID              shift and go to state 215


state 126

    (26) return_statement -> RETURN expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 216
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 127

    (85) delete_statement -> DEL ID . ;
    ;               shift and go to state 217


state 128

    (58) for_loop -> ! FOR . expression IN expression { program }
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 218
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 129

    (109) expression -> ! expression .
    (148) class_attribute -> ! expression . ? ID
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 109 (expression -> ! expression .)
    (               reduce using rule 109 (expression -> ! expression .)
    :               reduce using rule 109 (expression -> ! expression .)
    >               reduce using rule 109 (expression -> ! expression .)
    <               reduce using rule 109 (expression -> ! expression .)
    &               reduce using rule 109 (expression -> ! expression .)
    ^               reduce using rule 109 (expression -> ! expression .)
    |               reduce using rule 109 (expression -> ! expression .)
    EQ_GREATER      reduce using rule 109 (expression -> ! expression .)
    EQ_LESS         reduce using rule 109 (expression -> ! expression .)
    NOT_EQEQ        reduce using rule 109 (expression -> ! expression .)
    EQEQ            reduce using rule 109 (expression -> ! expression .)
    %               reduce using rule 109 (expression -> ! expression .)
    *               reduce using rule 109 (expression -> ! expression .)
    /               reduce using rule 109 (expression -> ! expression .)
    -               reduce using rule 109 (expression -> ! expression .)
    +               reduce using rule 109 (expression -> ! expression .)
    ,               reduce using rule 109 (expression -> ! expression .)
    }               reduce using rule 109 (expression -> ! expression .)
    ;               reduce using rule 109 (expression -> ! expression .)
    ?               reduce using rule 109 (expression -> ! expression .)
    IN              reduce using rule 109 (expression -> ! expression .)
    ]               reduce using rule 109 (expression -> ! expression .)
    )               reduce using rule 109 (expression -> ! expression .)
    {               reduce using rule 109 (expression -> ! expression .)
    SANDBOX         reduce using rule 109 (expression -> ! expression .)
    LIMPORT         reduce using rule 109 (expression -> ! expression .)
    .               reduce using rule 109 (expression -> ! expression .)
    IMPORT          reduce using rule 109 (expression -> ! expression .)
    ID              reduce using rule 109 (expression -> ! expression .)
    RETURN          reduce using rule 109 (expression -> ! expression .)
    DEL             reduce using rule 109 (expression -> ! expression .)
    !               reduce using rule 109 (expression -> ! expression .)
    FOR             reduce using rule 109 (expression -> ! expression .)
    DEBUG           reduce using rule 109 (expression -> ! expression .)
    SKIP            reduce using rule 109 (expression -> ! expression .)
    BREAK           reduce using rule 109 (expression -> ! expression .)
    @               reduce using rule 109 (expression -> ! expression .)
    WHILE           reduce using rule 109 (expression -> ! expression .)
    #               reduce using rule 109 (expression -> ! expression .)
    NAMESPACE       reduce using rule 109 (expression -> ! expression .)
    CLASS           reduce using rule 109 (expression -> ! expression .)
    FUNC            reduce using rule 109 (expression -> ! expression .)
    PYTHON_CODE_EXEC reduce using rule 109 (expression -> ! expression .)
    PYTHON_CODE     reduce using rule 109 (expression -> ! expression .)
    IF              reduce using rule 109 (expression -> ! expression .)
    CHAR            reduce using rule 109 (expression -> ! expression .)
    STRING          reduce using rule 109 (expression -> ! expression .)
    FALSE           reduce using rule 109 (expression -> ! expression .)
    TRUE            reduce using rule 109 (expression -> ! expression .)
    FLOAT           reduce using rule 109 (expression -> ! expression .)
    HEX             reduce using rule 109 (expression -> ! expression .)
    INT             reduce using rule 109 (expression -> ! expression .)
    NULL            reduce using rule 109 (expression -> ! expression .)
    $end            reduce using rule 109 (expression -> ! expression .)


state 130

    (59) for_loop -> FOR expression . IN expression { program }
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    IN              shift and go to state 220
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 131

    (23) break_statement -> DEBUG ; .
    SANDBOX         reduce using rule 23 (break_statement -> DEBUG ; .)
    LIMPORT         reduce using rule 23 (break_statement -> DEBUG ; .)
    .               reduce using rule 23 (break_statement -> DEBUG ; .)
    IMPORT          reduce using rule 23 (break_statement -> DEBUG ; .)
    ID              reduce using rule 23 (break_statement -> DEBUG ; .)
    RETURN          reduce using rule 23 (break_statement -> DEBUG ; .)
    DEL             reduce using rule 23 (break_statement -> DEBUG ; .)
    !               reduce using rule 23 (break_statement -> DEBUG ; .)
    FOR             reduce using rule 23 (break_statement -> DEBUG ; .)
    DEBUG           reduce using rule 23 (break_statement -> DEBUG ; .)
    SKIP            reduce using rule 23 (break_statement -> DEBUG ; .)
    BREAK           reduce using rule 23 (break_statement -> DEBUG ; .)
    @               reduce using rule 23 (break_statement -> DEBUG ; .)
    [               reduce using rule 23 (break_statement -> DEBUG ; .)
    WHILE           reduce using rule 23 (break_statement -> DEBUG ; .)
    ?               reduce using rule 23 (break_statement -> DEBUG ; .)
    #               reduce using rule 23 (break_statement -> DEBUG ; .)
    NAMESPACE       reduce using rule 23 (break_statement -> DEBUG ; .)
    CLASS           reduce using rule 23 (break_statement -> DEBUG ; .)
    FUNC            reduce using rule 23 (break_statement -> DEBUG ; .)
    PYTHON_CODE_EXEC reduce using rule 23 (break_statement -> DEBUG ; .)
    PYTHON_CODE     reduce using rule 23 (break_statement -> DEBUG ; .)
    IF              reduce using rule 23 (break_statement -> DEBUG ; .)
    <               reduce using rule 23 (break_statement -> DEBUG ; .)
    (               reduce using rule 23 (break_statement -> DEBUG ; .)
    +               reduce using rule 23 (break_statement -> DEBUG ; .)
    -               reduce using rule 23 (break_statement -> DEBUG ; .)
    *               reduce using rule 23 (break_statement -> DEBUG ; .)
    &               reduce using rule 23 (break_statement -> DEBUG ; .)
    {               reduce using rule 23 (break_statement -> DEBUG ; .)
    CHAR            reduce using rule 23 (break_statement -> DEBUG ; .)
    STRING          reduce using rule 23 (break_statement -> DEBUG ; .)
    FALSE           reduce using rule 23 (break_statement -> DEBUG ; .)
    TRUE            reduce using rule 23 (break_statement -> DEBUG ; .)
    FLOAT           reduce using rule 23 (break_statement -> DEBUG ; .)
    HEX             reduce using rule 23 (break_statement -> DEBUG ; .)
    INT             reduce using rule 23 (break_statement -> DEBUG ; .)
    NULL            reduce using rule 23 (break_statement -> DEBUG ; .)
    $end            reduce using rule 23 (break_statement -> DEBUG ; .)
    }               reduce using rule 23 (break_statement -> DEBUG ; .)


state 132

    (24) break_statement -> SKIP ; .
    SANDBOX         reduce using rule 24 (break_statement -> SKIP ; .)
    LIMPORT         reduce using rule 24 (break_statement -> SKIP ; .)
    .               reduce using rule 24 (break_statement -> SKIP ; .)
    IMPORT          reduce using rule 24 (break_statement -> SKIP ; .)
    ID              reduce using rule 24 (break_statement -> SKIP ; .)
    RETURN          reduce using rule 24 (break_statement -> SKIP ; .)
    DEL             reduce using rule 24 (break_statement -> SKIP ; .)
    !               reduce using rule 24 (break_statement -> SKIP ; .)
    FOR             reduce using rule 24 (break_statement -> SKIP ; .)
    DEBUG           reduce using rule 24 (break_statement -> SKIP ; .)
    SKIP            reduce using rule 24 (break_statement -> SKIP ; .)
    BREAK           reduce using rule 24 (break_statement -> SKIP ; .)
    @               reduce using rule 24 (break_statement -> SKIP ; .)
    [               reduce using rule 24 (break_statement -> SKIP ; .)
    WHILE           reduce using rule 24 (break_statement -> SKIP ; .)
    ?               reduce using rule 24 (break_statement -> SKIP ; .)
    #               reduce using rule 24 (break_statement -> SKIP ; .)
    NAMESPACE       reduce using rule 24 (break_statement -> SKIP ; .)
    CLASS           reduce using rule 24 (break_statement -> SKIP ; .)
    FUNC            reduce using rule 24 (break_statement -> SKIP ; .)
    PYTHON_CODE_EXEC reduce using rule 24 (break_statement -> SKIP ; .)
    PYTHON_CODE     reduce using rule 24 (break_statement -> SKIP ; .)
    IF              reduce using rule 24 (break_statement -> SKIP ; .)
    <               reduce using rule 24 (break_statement -> SKIP ; .)
    (               reduce using rule 24 (break_statement -> SKIP ; .)
    +               reduce using rule 24 (break_statement -> SKIP ; .)
    -               reduce using rule 24 (break_statement -> SKIP ; .)
    *               reduce using rule 24 (break_statement -> SKIP ; .)
    &               reduce using rule 24 (break_statement -> SKIP ; .)
    {               reduce using rule 24 (break_statement -> SKIP ; .)
    CHAR            reduce using rule 24 (break_statement -> SKIP ; .)
    STRING          reduce using rule 24 (break_statement -> SKIP ; .)
    FALSE           reduce using rule 24 (break_statement -> SKIP ; .)
    TRUE            reduce using rule 24 (break_statement -> SKIP ; .)
    FLOAT           reduce using rule 24 (break_statement -> SKIP ; .)
    HEX             reduce using rule 24 (break_statement -> SKIP ; .)
    INT             reduce using rule 24 (break_statement -> SKIP ; .)
    NULL            reduce using rule 24 (break_statement -> SKIP ; .)
    $end            reduce using rule 24 (break_statement -> SKIP ; .)
    }               reduce using rule 24 (break_statement -> SKIP ; .)


state 133

    (25) break_statement -> BREAK ; .
    SANDBOX         reduce using rule 25 (break_statement -> BREAK ; .)
    LIMPORT         reduce using rule 25 (break_statement -> BREAK ; .)
    .               reduce using rule 25 (break_statement -> BREAK ; .)
    IMPORT          reduce using rule 25 (break_statement -> BREAK ; .)
    ID              reduce using rule 25 (break_statement -> BREAK ; .)
    RETURN          reduce using rule 25 (break_statement -> BREAK ; .)
    DEL             reduce using rule 25 (break_statement -> BREAK ; .)
    !               reduce using rule 25 (break_statement -> BREAK ; .)
    FOR             reduce using rule 25 (break_statement -> BREAK ; .)
    DEBUG           reduce using rule 25 (break_statement -> BREAK ; .)
    SKIP            reduce using rule 25 (break_statement -> BREAK ; .)
    BREAK           reduce using rule 25 (break_statement -> BREAK ; .)
    @               reduce using rule 25 (break_statement -> BREAK ; .)
    [               reduce using rule 25 (break_statement -> BREAK ; .)
    WHILE           reduce using rule 25 (break_statement -> BREAK ; .)
    ?               reduce using rule 25 (break_statement -> BREAK ; .)
    #               reduce using rule 25 (break_statement -> BREAK ; .)
    NAMESPACE       reduce using rule 25 (break_statement -> BREAK ; .)
    CLASS           reduce using rule 25 (break_statement -> BREAK ; .)
    FUNC            reduce using rule 25 (break_statement -> BREAK ; .)
    PYTHON_CODE_EXEC reduce using rule 25 (break_statement -> BREAK ; .)
    PYTHON_CODE     reduce using rule 25 (break_statement -> BREAK ; .)
    IF              reduce using rule 25 (break_statement -> BREAK ; .)
    <               reduce using rule 25 (break_statement -> BREAK ; .)
    (               reduce using rule 25 (break_statement -> BREAK ; .)
    +               reduce using rule 25 (break_statement -> BREAK ; .)
    -               reduce using rule 25 (break_statement -> BREAK ; .)
    *               reduce using rule 25 (break_statement -> BREAK ; .)
    &               reduce using rule 25 (break_statement -> BREAK ; .)
    {               reduce using rule 25 (break_statement -> BREAK ; .)
    CHAR            reduce using rule 25 (break_statement -> BREAK ; .)
    STRING          reduce using rule 25 (break_statement -> BREAK ; .)
    FALSE           reduce using rule 25 (break_statement -> BREAK ; .)
    TRUE            reduce using rule 25 (break_statement -> BREAK ; .)
    FLOAT           reduce using rule 25 (break_statement -> BREAK ; .)
    HEX             reduce using rule 25 (break_statement -> BREAK ; .)
    INT             reduce using rule 25 (break_statement -> BREAK ; .)
    NULL            reduce using rule 25 (break_statement -> BREAK ; .)
    $end            reduce using rule 25 (break_statement -> BREAK ; .)
    }               reduce using rule 25 (break_statement -> BREAK ; .)


state 134

    (39) variable_assignment -> @ ID . ID = expression ;
    ID              shift and go to state 221


state 135

    (30) function_call -> < ID . > expression
    >               shift and go to state 222


state 136

    (46) variable_assignment -> [ HEX . , ID ] = expression ;
    (142) hex -> HEX .
  ! shift/reduce conflict for , resolved as shift
    ,               shift and go to state 223
    >               reduce using rule 142 (hex -> HEX .)
    <               reduce using rule 142 (hex -> HEX .)
    &               reduce using rule 142 (hex -> HEX .)
    ^               reduce using rule 142 (hex -> HEX .)
    |               reduce using rule 142 (hex -> HEX .)
    EQ_GREATER      reduce using rule 142 (hex -> HEX .)
    EQ_LESS         reduce using rule 142 (hex -> HEX .)
    NOT_EQEQ        reduce using rule 142 (hex -> HEX .)
    EQEQ            reduce using rule 142 (hex -> HEX .)
    %               reduce using rule 142 (hex -> HEX .)
    *               reduce using rule 142 (hex -> HEX .)
    /               reduce using rule 142 (hex -> HEX .)
    -               reduce using rule 142 (hex -> HEX .)
    +               reduce using rule 142 (hex -> HEX .)
    [               reduce using rule 142 (hex -> HEX .)
    (               reduce using rule 142 (hex -> HEX .)
    :               reduce using rule 142 (hex -> HEX .)
    ]               reduce using rule 142 (hex -> HEX .)


state 137

    (61) positional_args -> expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ,               reduce using rule 61 (positional_args -> expression .)
    ]               reduce using rule 61 (positional_args -> expression .)
    )               reduce using rule 61 (positional_args -> expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 138

    (132) _list -> [ positional_args . , ]
    (133) _list -> [ positional_args . ]
    (62) positional_args -> positional_args . , expression
    ,               shift and go to state 224
    ]               shift and go to state 225


state 139

    (123) expression -> - expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 123 (expression -> - expression .)
    (               reduce using rule 123 (expression -> - expression .)
    :               reduce using rule 123 (expression -> - expression .)
    >               reduce using rule 123 (expression -> - expression .)
    <               reduce using rule 123 (expression -> - expression .)
    &               reduce using rule 123 (expression -> - expression .)
    ^               reduce using rule 123 (expression -> - expression .)
    |               reduce using rule 123 (expression -> - expression .)
    EQ_GREATER      reduce using rule 123 (expression -> - expression .)
    EQ_LESS         reduce using rule 123 (expression -> - expression .)
    NOT_EQEQ        reduce using rule 123 (expression -> - expression .)
    EQEQ            reduce using rule 123 (expression -> - expression .)
    %               reduce using rule 123 (expression -> - expression .)
    *               reduce using rule 123 (expression -> - expression .)
    /               reduce using rule 123 (expression -> - expression .)
    -               reduce using rule 123 (expression -> - expression .)
    +               reduce using rule 123 (expression -> - expression .)
    ,               reduce using rule 123 (expression -> - expression .)
    }               reduce using rule 123 (expression -> - expression .)
    ;               reduce using rule 123 (expression -> - expression .)
    ?               reduce using rule 123 (expression -> - expression .)
    IN              reduce using rule 123 (expression -> - expression .)
    ]               reduce using rule 123 (expression -> - expression .)
    )               reduce using rule 123 (expression -> - expression .)
    {               reduce using rule 123 (expression -> - expression .)
    SANDBOX         reduce using rule 123 (expression -> - expression .)
    LIMPORT         reduce using rule 123 (expression -> - expression .)
    .               reduce using rule 123 (expression -> - expression .)
    IMPORT          reduce using rule 123 (expression -> - expression .)
    ID              reduce using rule 123 (expression -> - expression .)
    RETURN          reduce using rule 123 (expression -> - expression .)
    DEL             reduce using rule 123 (expression -> - expression .)
    !               reduce using rule 123 (expression -> - expression .)
    FOR             reduce using rule 123 (expression -> - expression .)
    DEBUG           reduce using rule 123 (expression -> - expression .)
    SKIP            reduce using rule 123 (expression -> - expression .)
    BREAK           reduce using rule 123 (expression -> - expression .)
    @               reduce using rule 123 (expression -> - expression .)
    WHILE           reduce using rule 123 (expression -> - expression .)
    #               reduce using rule 123 (expression -> - expression .)
    NAMESPACE       reduce using rule 123 (expression -> - expression .)
    CLASS           reduce using rule 123 (expression -> - expression .)
    FUNC            reduce using rule 123 (expression -> - expression .)
    PYTHON_CODE_EXEC reduce using rule 123 (expression -> - expression .)
    PYTHON_CODE     reduce using rule 123 (expression -> - expression .)
    IF              reduce using rule 123 (expression -> - expression .)
    CHAR            reduce using rule 123 (expression -> - expression .)
    STRING          reduce using rule 123 (expression -> - expression .)
    FALSE           reduce using rule 123 (expression -> - expression .)
    TRUE            reduce using rule 123 (expression -> - expression .)
    FLOAT           reduce using rule 123 (expression -> - expression .)
    HEX             reduce using rule 123 (expression -> - expression .)
    INT             reduce using rule 123 (expression -> - expression .)
    NULL            reduce using rule 123 (expression -> - expression .)
    $end            reduce using rule 123 (expression -> - expression .)


state 140

    (122) expression -> + expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 122 (expression -> + expression .)
    (               reduce using rule 122 (expression -> + expression .)
    :               reduce using rule 122 (expression -> + expression .)
    >               reduce using rule 122 (expression -> + expression .)
    <               reduce using rule 122 (expression -> + expression .)
    &               reduce using rule 122 (expression -> + expression .)
    ^               reduce using rule 122 (expression -> + expression .)
    |               reduce using rule 122 (expression -> + expression .)
    EQ_GREATER      reduce using rule 122 (expression -> + expression .)
    EQ_LESS         reduce using rule 122 (expression -> + expression .)
    NOT_EQEQ        reduce using rule 122 (expression -> + expression .)
    EQEQ            reduce using rule 122 (expression -> + expression .)
    %               reduce using rule 122 (expression -> + expression .)
    *               reduce using rule 122 (expression -> + expression .)
    /               reduce using rule 122 (expression -> + expression .)
    -               reduce using rule 122 (expression -> + expression .)
    +               reduce using rule 122 (expression -> + expression .)
    ,               reduce using rule 122 (expression -> + expression .)
    }               reduce using rule 122 (expression -> + expression .)
    ;               reduce using rule 122 (expression -> + expression .)
    ?               reduce using rule 122 (expression -> + expression .)
    IN              reduce using rule 122 (expression -> + expression .)
    ]               reduce using rule 122 (expression -> + expression .)
    )               reduce using rule 122 (expression -> + expression .)
    {               reduce using rule 122 (expression -> + expression .)
    SANDBOX         reduce using rule 122 (expression -> + expression .)
    LIMPORT         reduce using rule 122 (expression -> + expression .)
    .               reduce using rule 122 (expression -> + expression .)
    IMPORT          reduce using rule 122 (expression -> + expression .)
    ID              reduce using rule 122 (expression -> + expression .)
    RETURN          reduce using rule 122 (expression -> + expression .)
    DEL             reduce using rule 122 (expression -> + expression .)
    !               reduce using rule 122 (expression -> + expression .)
    FOR             reduce using rule 122 (expression -> + expression .)
    DEBUG           reduce using rule 122 (expression -> + expression .)
    SKIP            reduce using rule 122 (expression -> + expression .)
    BREAK           reduce using rule 122 (expression -> + expression .)
    @               reduce using rule 122 (expression -> + expression .)
    WHILE           reduce using rule 122 (expression -> + expression .)
    #               reduce using rule 122 (expression -> + expression .)
    NAMESPACE       reduce using rule 122 (expression -> + expression .)
    CLASS           reduce using rule 122 (expression -> + expression .)
    FUNC            reduce using rule 122 (expression -> + expression .)
    PYTHON_CODE_EXEC reduce using rule 122 (expression -> + expression .)
    PYTHON_CODE     reduce using rule 122 (expression -> + expression .)
    IF              reduce using rule 122 (expression -> + expression .)
    CHAR            reduce using rule 122 (expression -> + expression .)
    STRING          reduce using rule 122 (expression -> + expression .)
    FALSE           reduce using rule 122 (expression -> + expression .)
    TRUE            reduce using rule 122 (expression -> + expression .)
    FLOAT           reduce using rule 122 (expression -> + expression .)
    HEX             reduce using rule 122 (expression -> + expression .)
    INT             reduce using rule 122 (expression -> + expression .)
    NULL            reduce using rule 122 (expression -> + expression .)
    $end            reduce using rule 122 (expression -> + expression .)


state 141

    (22) python_code_statement -> python_code ; .
    SANDBOX         reduce using rule 22 (python_code_statement -> python_code ; .)
    LIMPORT         reduce using rule 22 (python_code_statement -> python_code ; .)
    .               reduce using rule 22 (python_code_statement -> python_code ; .)
    IMPORT          reduce using rule 22 (python_code_statement -> python_code ; .)
    ID              reduce using rule 22 (python_code_statement -> python_code ; .)
    RETURN          reduce using rule 22 (python_code_statement -> python_code ; .)
    DEL             reduce using rule 22 (python_code_statement -> python_code ; .)
    !               reduce using rule 22 (python_code_statement -> python_code ; .)
    FOR             reduce using rule 22 (python_code_statement -> python_code ; .)
    DEBUG           reduce using rule 22 (python_code_statement -> python_code ; .)
    SKIP            reduce using rule 22 (python_code_statement -> python_code ; .)
    BREAK           reduce using rule 22 (python_code_statement -> python_code ; .)
    @               reduce using rule 22 (python_code_statement -> python_code ; .)
    [               reduce using rule 22 (python_code_statement -> python_code ; .)
    WHILE           reduce using rule 22 (python_code_statement -> python_code ; .)
    ?               reduce using rule 22 (python_code_statement -> python_code ; .)
    #               reduce using rule 22 (python_code_statement -> python_code ; .)
    NAMESPACE       reduce using rule 22 (python_code_statement -> python_code ; .)
    CLASS           reduce using rule 22 (python_code_statement -> python_code ; .)
    FUNC            reduce using rule 22 (python_code_statement -> python_code ; .)
    PYTHON_CODE_EXEC reduce using rule 22 (python_code_statement -> python_code ; .)
    PYTHON_CODE     reduce using rule 22 (python_code_statement -> python_code ; .)
    IF              reduce using rule 22 (python_code_statement -> python_code ; .)
    <               reduce using rule 22 (python_code_statement -> python_code ; .)
    (               reduce using rule 22 (python_code_statement -> python_code ; .)
    +               reduce using rule 22 (python_code_statement -> python_code ; .)
    -               reduce using rule 22 (python_code_statement -> python_code ; .)
    *               reduce using rule 22 (python_code_statement -> python_code ; .)
    &               reduce using rule 22 (python_code_statement -> python_code ; .)
    {               reduce using rule 22 (python_code_statement -> python_code ; .)
    CHAR            reduce using rule 22 (python_code_statement -> python_code ; .)
    STRING          reduce using rule 22 (python_code_statement -> python_code ; .)
    FALSE           reduce using rule 22 (python_code_statement -> python_code ; .)
    TRUE            reduce using rule 22 (python_code_statement -> python_code ; .)
    FLOAT           reduce using rule 22 (python_code_statement -> python_code ; .)
    HEX             reduce using rule 22 (python_code_statement -> python_code ; .)
    INT             reduce using rule 22 (python_code_statement -> python_code ; .)
    NULL            reduce using rule 22 (python_code_statement -> python_code ; .)
    $end            reduce using rule 22 (python_code_statement -> python_code ; .)
    }               reduce using rule 22 (python_code_statement -> python_code ; .)


state 142

    (60) while_loop -> WHILE ( . expression ) { program }
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 226
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 143

    (104) expression -> ( expression . )
    (136) _numpy -> ( expression . , )
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (139) items -> expression . , expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    )               shift and go to state 227
    ,               shift and go to state 228
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 144

    (135) _numpy -> ( ) .
    [               reduce using rule 135 (_numpy -> ( ) .)
    (               reduce using rule 135 (_numpy -> ( ) .)
    :               reduce using rule 135 (_numpy -> ( ) .)
    >               reduce using rule 135 (_numpy -> ( ) .)
    <               reduce using rule 135 (_numpy -> ( ) .)
    &               reduce using rule 135 (_numpy -> ( ) .)
    ^               reduce using rule 135 (_numpy -> ( ) .)
    |               reduce using rule 135 (_numpy -> ( ) .)
    EQ_GREATER      reduce using rule 135 (_numpy -> ( ) .)
    EQ_LESS         reduce using rule 135 (_numpy -> ( ) .)
    NOT_EQEQ        reduce using rule 135 (_numpy -> ( ) .)
    EQEQ            reduce using rule 135 (_numpy -> ( ) .)
    %               reduce using rule 135 (_numpy -> ( ) .)
    *               reduce using rule 135 (_numpy -> ( ) .)
    /               reduce using rule 135 (_numpy -> ( ) .)
    -               reduce using rule 135 (_numpy -> ( ) .)
    +               reduce using rule 135 (_numpy -> ( ) .)
    ,               reduce using rule 135 (_numpy -> ( ) .)
    }               reduce using rule 135 (_numpy -> ( ) .)
    ;               reduce using rule 135 (_numpy -> ( ) .)
    ?               reduce using rule 135 (_numpy -> ( ) .)
    IN              reduce using rule 135 (_numpy -> ( ) .)
    ]               reduce using rule 135 (_numpy -> ( ) .)
    )               reduce using rule 135 (_numpy -> ( ) .)
    {               reduce using rule 135 (_numpy -> ( ) .)
    SANDBOX         reduce using rule 135 (_numpy -> ( ) .)
    LIMPORT         reduce using rule 135 (_numpy -> ( ) .)
    .               reduce using rule 135 (_numpy -> ( ) .)
    IMPORT          reduce using rule 135 (_numpy -> ( ) .)
    ID              reduce using rule 135 (_numpy -> ( ) .)
    RETURN          reduce using rule 135 (_numpy -> ( ) .)
    DEL             reduce using rule 135 (_numpy -> ( ) .)
    !               reduce using rule 135 (_numpy -> ( ) .)
    FOR             reduce using rule 135 (_numpy -> ( ) .)
    DEBUG           reduce using rule 135 (_numpy -> ( ) .)
    SKIP            reduce using rule 135 (_numpy -> ( ) .)
    BREAK           reduce using rule 135 (_numpy -> ( ) .)
    @               reduce using rule 135 (_numpy -> ( ) .)
    WHILE           reduce using rule 135 (_numpy -> ( ) .)
    #               reduce using rule 135 (_numpy -> ( ) .)
    NAMESPACE       reduce using rule 135 (_numpy -> ( ) .)
    CLASS           reduce using rule 135 (_numpy -> ( ) .)
    FUNC            reduce using rule 135 (_numpy -> ( ) .)
    PYTHON_CODE_EXEC reduce using rule 135 (_numpy -> ( ) .)
    PYTHON_CODE     reduce using rule 135 (_numpy -> ( ) .)
    IF              reduce using rule 135 (_numpy -> ( ) .)
    CHAR            reduce using rule 135 (_numpy -> ( ) .)
    STRING          reduce using rule 135 (_numpy -> ( ) .)
    FALSE           reduce using rule 135 (_numpy -> ( ) .)
    TRUE            reduce using rule 135 (_numpy -> ( ) .)
    FLOAT           reduce using rule 135 (_numpy -> ( ) .)
    HEX             reduce using rule 135 (_numpy -> ( ) .)
    INT             reduce using rule 135 (_numpy -> ( ) .)
    NULL            reduce using rule 135 (_numpy -> ( ) .)
    $end            reduce using rule 135 (_numpy -> ( ) .)


state 145

    (134) _numpy -> ( , . )
    )               shift and go to state 229


state 146

    (137) _numpy -> ( items . , )
    (138) _numpy -> ( items . )
    (140) items -> items . , expression
    ,               shift and go to state 230
    )               shift and go to state 231


state 147

    (76) conditional -> if_statement else_statement .
    SANDBOX         reduce using rule 76 (conditional -> if_statement else_statement .)
    LIMPORT         reduce using rule 76 (conditional -> if_statement else_statement .)
    .               reduce using rule 76 (conditional -> if_statement else_statement .)
    IMPORT          reduce using rule 76 (conditional -> if_statement else_statement .)
    ID              reduce using rule 76 (conditional -> if_statement else_statement .)
    RETURN          reduce using rule 76 (conditional -> if_statement else_statement .)
    DEL             reduce using rule 76 (conditional -> if_statement else_statement .)
    !               reduce using rule 76 (conditional -> if_statement else_statement .)
    FOR             reduce using rule 76 (conditional -> if_statement else_statement .)
    DEBUG           reduce using rule 76 (conditional -> if_statement else_statement .)
    SKIP            reduce using rule 76 (conditional -> if_statement else_statement .)
    BREAK           reduce using rule 76 (conditional -> if_statement else_statement .)
    @               reduce using rule 76 (conditional -> if_statement else_statement .)
    [               reduce using rule 76 (conditional -> if_statement else_statement .)
    WHILE           reduce using rule 76 (conditional -> if_statement else_statement .)
    ?               reduce using rule 76 (conditional -> if_statement else_statement .)
    #               reduce using rule 76 (conditional -> if_statement else_statement .)
    NAMESPACE       reduce using rule 76 (conditional -> if_statement else_statement .)
    CLASS           reduce using rule 76 (conditional -> if_statement else_statement .)
    FUNC            reduce using rule 76 (conditional -> if_statement else_statement .)
    PYTHON_CODE_EXEC reduce using rule 76 (conditional -> if_statement else_statement .)
    PYTHON_CODE     reduce using rule 76 (conditional -> if_statement else_statement .)
    IF              reduce using rule 76 (conditional -> if_statement else_statement .)
    <               reduce using rule 76 (conditional -> if_statement else_statement .)
    (               reduce using rule 76 (conditional -> if_statement else_statement .)
    +               reduce using rule 76 (conditional -> if_statement else_statement .)
    -               reduce using rule 76 (conditional -> if_statement else_statement .)
    *               reduce using rule 76 (conditional -> if_statement else_statement .)
    &               reduce using rule 76 (conditional -> if_statement else_statement .)
    {               reduce using rule 76 (conditional -> if_statement else_statement .)
    CHAR            reduce using rule 76 (conditional -> if_statement else_statement .)
    STRING          reduce using rule 76 (conditional -> if_statement else_statement .)
    FALSE           reduce using rule 76 (conditional -> if_statement else_statement .)
    TRUE            reduce using rule 76 (conditional -> if_statement else_statement .)
    FLOAT           reduce using rule 76 (conditional -> if_statement else_statement .)
    HEX             reduce using rule 76 (conditional -> if_statement else_statement .)
    INT             reduce using rule 76 (conditional -> if_statement else_statement .)
    NULL            reduce using rule 76 (conditional -> if_statement else_statement .)
    $end            reduce using rule 76 (conditional -> if_statement else_statement .)
    }               reduce using rule 76 (conditional -> if_statement else_statement .)


state 148

    (77) conditional -> if_statement else_if_loop . else_statement
    (78) conditional -> if_statement else_if_loop .
    (82) else_if_loop -> else_if_loop . else_if_statement
    (84) else_statement -> . ELSE { program }
    (83) else_if_statement -> . ELSE IF ( expression ) { program }
    SANDBOX         reduce using rule 78 (conditional -> if_statement else_if_loop .)
    LIMPORT         reduce using rule 78 (conditional -> if_statement else_if_loop .)
    .               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    IMPORT          reduce using rule 78 (conditional -> if_statement else_if_loop .)
    ID              reduce using rule 78 (conditional -> if_statement else_if_loop .)
    RETURN          reduce using rule 78 (conditional -> if_statement else_if_loop .)
    DEL             reduce using rule 78 (conditional -> if_statement else_if_loop .)
    !               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    FOR             reduce using rule 78 (conditional -> if_statement else_if_loop .)
    DEBUG           reduce using rule 78 (conditional -> if_statement else_if_loop .)
    SKIP            reduce using rule 78 (conditional -> if_statement else_if_loop .)
    BREAK           reduce using rule 78 (conditional -> if_statement else_if_loop .)
    @               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    [               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    WHILE           reduce using rule 78 (conditional -> if_statement else_if_loop .)
    ?               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    #               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    NAMESPACE       reduce using rule 78 (conditional -> if_statement else_if_loop .)
    CLASS           reduce using rule 78 (conditional -> if_statement else_if_loop .)
    FUNC            reduce using rule 78 (conditional -> if_statement else_if_loop .)
    PYTHON_CODE_EXEC reduce using rule 78 (conditional -> if_statement else_if_loop .)
    PYTHON_CODE     reduce using rule 78 (conditional -> if_statement else_if_loop .)
    IF              reduce using rule 78 (conditional -> if_statement else_if_loop .)
    <               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    (               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    +               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    -               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    *               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    &               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    {               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    CHAR            reduce using rule 78 (conditional -> if_statement else_if_loop .)
    STRING          reduce using rule 78 (conditional -> if_statement else_if_loop .)
    FALSE           reduce using rule 78 (conditional -> if_statement else_if_loop .)
    TRUE            reduce using rule 78 (conditional -> if_statement else_if_loop .)
    FLOAT           reduce using rule 78 (conditional -> if_statement else_if_loop .)
    HEX             reduce using rule 78 (conditional -> if_statement else_if_loop .)
    INT             reduce using rule 78 (conditional -> if_statement else_if_loop .)
    NULL            reduce using rule 78 (conditional -> if_statement else_if_loop .)
    $end            reduce using rule 78 (conditional -> if_statement else_if_loop .)
    }               reduce using rule 78 (conditional -> if_statement else_if_loop .)
    ELSE            shift and go to state 149

    else_statement                 shift and go to state 232
    else_if_statement              shift and go to state 233

state 149

    (84) else_statement -> ELSE . { program }
    (83) else_if_statement -> ELSE . IF ( expression ) { program }
    {               shift and go to state 234
    IF              shift and go to state 235


state 150

    (81) else_if_loop -> else_if_statement .
    ELSE            reduce using rule 81 (else_if_loop -> else_if_statement .)
    SANDBOX         reduce using rule 81 (else_if_loop -> else_if_statement .)
    LIMPORT         reduce using rule 81 (else_if_loop -> else_if_statement .)
    .               reduce using rule 81 (else_if_loop -> else_if_statement .)
    IMPORT          reduce using rule 81 (else_if_loop -> else_if_statement .)
    ID              reduce using rule 81 (else_if_loop -> else_if_statement .)
    RETURN          reduce using rule 81 (else_if_loop -> else_if_statement .)
    DEL             reduce using rule 81 (else_if_loop -> else_if_statement .)
    !               reduce using rule 81 (else_if_loop -> else_if_statement .)
    FOR             reduce using rule 81 (else_if_loop -> else_if_statement .)
    DEBUG           reduce using rule 81 (else_if_loop -> else_if_statement .)
    SKIP            reduce using rule 81 (else_if_loop -> else_if_statement .)
    BREAK           reduce using rule 81 (else_if_loop -> else_if_statement .)
    @               reduce using rule 81 (else_if_loop -> else_if_statement .)
    [               reduce using rule 81 (else_if_loop -> else_if_statement .)
    WHILE           reduce using rule 81 (else_if_loop -> else_if_statement .)
    ?               reduce using rule 81 (else_if_loop -> else_if_statement .)
    #               reduce using rule 81 (else_if_loop -> else_if_statement .)
    NAMESPACE       reduce using rule 81 (else_if_loop -> else_if_statement .)
    CLASS           reduce using rule 81 (else_if_loop -> else_if_statement .)
    FUNC            reduce using rule 81 (else_if_loop -> else_if_statement .)
    PYTHON_CODE_EXEC reduce using rule 81 (else_if_loop -> else_if_statement .)
    PYTHON_CODE     reduce using rule 81 (else_if_loop -> else_if_statement .)
    IF              reduce using rule 81 (else_if_loop -> else_if_statement .)
    <               reduce using rule 81 (else_if_loop -> else_if_statement .)
    (               reduce using rule 81 (else_if_loop -> else_if_statement .)
    +               reduce using rule 81 (else_if_loop -> else_if_statement .)
    -               reduce using rule 81 (else_if_loop -> else_if_statement .)
    *               reduce using rule 81 (else_if_loop -> else_if_statement .)
    &               reduce using rule 81 (else_if_loop -> else_if_statement .)
    {               reduce using rule 81 (else_if_loop -> else_if_statement .)
    CHAR            reduce using rule 81 (else_if_loop -> else_if_statement .)
    STRING          reduce using rule 81 (else_if_loop -> else_if_statement .)
    FALSE           reduce using rule 81 (else_if_loop -> else_if_statement .)
    TRUE            reduce using rule 81 (else_if_loop -> else_if_statement .)
    FLOAT           reduce using rule 81 (else_if_loop -> else_if_statement .)
    HEX             reduce using rule 81 (else_if_loop -> else_if_statement .)
    INT             reduce using rule 81 (else_if_loop -> else_if_statement .)
    NULL            reduce using rule 81 (else_if_loop -> else_if_statement .)
    $end            reduce using rule 81 (else_if_loop -> else_if_statement .)
    }               reduce using rule 81 (else_if_loop -> else_if_statement .)


state 151

    (75) class_attribute_assignment -> ? ! .
    SANDBOX         reduce using rule 75 (class_attribute_assignment -> ? ! .)
    LIMPORT         reduce using rule 75 (class_attribute_assignment -> ? ! .)
    .               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    IMPORT          reduce using rule 75 (class_attribute_assignment -> ? ! .)
    ID              reduce using rule 75 (class_attribute_assignment -> ? ! .)
    RETURN          reduce using rule 75 (class_attribute_assignment -> ? ! .)
    DEL             reduce using rule 75 (class_attribute_assignment -> ? ! .)
    !               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    FOR             reduce using rule 75 (class_attribute_assignment -> ? ! .)
    DEBUG           reduce using rule 75 (class_attribute_assignment -> ? ! .)
    SKIP            reduce using rule 75 (class_attribute_assignment -> ? ! .)
    BREAK           reduce using rule 75 (class_attribute_assignment -> ? ! .)
    @               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    [               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    WHILE           reduce using rule 75 (class_attribute_assignment -> ? ! .)
    ?               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    #               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    NAMESPACE       reduce using rule 75 (class_attribute_assignment -> ? ! .)
    CLASS           reduce using rule 75 (class_attribute_assignment -> ? ! .)
    FUNC            reduce using rule 75 (class_attribute_assignment -> ? ! .)
    PYTHON_CODE_EXEC reduce using rule 75 (class_attribute_assignment -> ? ! .)
    PYTHON_CODE     reduce using rule 75 (class_attribute_assignment -> ? ! .)
    IF              reduce using rule 75 (class_attribute_assignment -> ? ! .)
    <               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    (               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    +               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    -               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    *               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    &               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    {               reduce using rule 75 (class_attribute_assignment -> ? ! .)
    CHAR            reduce using rule 75 (class_attribute_assignment -> ? ! .)
    STRING          reduce using rule 75 (class_attribute_assignment -> ? ! .)
    FALSE           reduce using rule 75 (class_attribute_assignment -> ? ! .)
    TRUE            reduce using rule 75 (class_attribute_assignment -> ? ! .)
    FLOAT           reduce using rule 75 (class_attribute_assignment -> ? ! .)
    HEX             reduce using rule 75 (class_attribute_assignment -> ? ! .)
    INT             reduce using rule 75 (class_attribute_assignment -> ? ! .)
    NULL            reduce using rule 75 (class_attribute_assignment -> ? ! .)
    $end            reduce using rule 75 (class_attribute_assignment -> ? ! .)
    }               reduce using rule 75 (class_attribute_assignment -> ? ! .)


state 152

    (21) function_call_statement -> function_call ; .
    SANDBOX         reduce using rule 21 (function_call_statement -> function_call ; .)
    LIMPORT         reduce using rule 21 (function_call_statement -> function_call ; .)
    .               reduce using rule 21 (function_call_statement -> function_call ; .)
    IMPORT          reduce using rule 21 (function_call_statement -> function_call ; .)
    ID              reduce using rule 21 (function_call_statement -> function_call ; .)
    RETURN          reduce using rule 21 (function_call_statement -> function_call ; .)
    DEL             reduce using rule 21 (function_call_statement -> function_call ; .)
    !               reduce using rule 21 (function_call_statement -> function_call ; .)
    FOR             reduce using rule 21 (function_call_statement -> function_call ; .)
    DEBUG           reduce using rule 21 (function_call_statement -> function_call ; .)
    SKIP            reduce using rule 21 (function_call_statement -> function_call ; .)
    BREAK           reduce using rule 21 (function_call_statement -> function_call ; .)
    @               reduce using rule 21 (function_call_statement -> function_call ; .)
    [               reduce using rule 21 (function_call_statement -> function_call ; .)
    WHILE           reduce using rule 21 (function_call_statement -> function_call ; .)
    ?               reduce using rule 21 (function_call_statement -> function_call ; .)
    #               reduce using rule 21 (function_call_statement -> function_call ; .)
    NAMESPACE       reduce using rule 21 (function_call_statement -> function_call ; .)
    CLASS           reduce using rule 21 (function_call_statement -> function_call ; .)
    FUNC            reduce using rule 21 (function_call_statement -> function_call ; .)
    PYTHON_CODE_EXEC reduce using rule 21 (function_call_statement -> function_call ; .)
    PYTHON_CODE     reduce using rule 21 (function_call_statement -> function_call ; .)
    IF              reduce using rule 21 (function_call_statement -> function_call ; .)
    <               reduce using rule 21 (function_call_statement -> function_call ; .)
    (               reduce using rule 21 (function_call_statement -> function_call ; .)
    +               reduce using rule 21 (function_call_statement -> function_call ; .)
    -               reduce using rule 21 (function_call_statement -> function_call ; .)
    *               reduce using rule 21 (function_call_statement -> function_call ; .)
    &               reduce using rule 21 (function_call_statement -> function_call ; .)
    {               reduce using rule 21 (function_call_statement -> function_call ; .)
    CHAR            reduce using rule 21 (function_call_statement -> function_call ; .)
    STRING          reduce using rule 21 (function_call_statement -> function_call ; .)
    FALSE           reduce using rule 21 (function_call_statement -> function_call ; .)
    TRUE            reduce using rule 21 (function_call_statement -> function_call ; .)
    FLOAT           reduce using rule 21 (function_call_statement -> function_call ; .)
    HEX             reduce using rule 21 (function_call_statement -> function_call ; .)
    INT             reduce using rule 21 (function_call_statement -> function_call ; .)
    NULL            reduce using rule 21 (function_call_statement -> function_call ; .)
    $end            reduce using rule 21 (function_call_statement -> function_call ; .)
    }               reduce using rule 21 (function_call_statement -> function_call ; .)


state 153

    (54) class_declaration -> # EMBED . [ ID , ID ] string
    (55) class_declaration -> # EMBED . [ ID ] string
    [               shift and go to state 236


state 154

    (33) function_call -> # ID . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 237
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 155

    (32) function_call -> # DEPENDS . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 238
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 156

    (56) class_declaration -> NAMESPACE ID . { program }
    {               shift and go to state 239


state 157

    (57) class_declaration -> CLASS ID . { program }
    {               shift and go to state 240


state 158

    (47) function_declaration -> FUNC ID . ( empty ) expression { program }
    (48) function_declaration -> FUNC ID . COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> FUNC ID . COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> FUNC ID . ( function_arguments ) expression { program }
    (               shift and go to state 241
    COLON_COLON     shift and go to state 242


state 159

    (80) if_statement -> IF ( . expression ) { program }
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 243
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 160

    (125) expression -> & ID .
    [               reduce using rule 125 (expression -> & ID .)
    (               reduce using rule 125 (expression -> & ID .)
    :               reduce using rule 125 (expression -> & ID .)
    >               reduce using rule 125 (expression -> & ID .)
    <               reduce using rule 125 (expression -> & ID .)
    &               reduce using rule 125 (expression -> & ID .)
    ^               reduce using rule 125 (expression -> & ID .)
    |               reduce using rule 125 (expression -> & ID .)
    EQ_GREATER      reduce using rule 125 (expression -> & ID .)
    EQ_LESS         reduce using rule 125 (expression -> & ID .)
    NOT_EQEQ        reduce using rule 125 (expression -> & ID .)
    EQEQ            reduce using rule 125 (expression -> & ID .)
    %               reduce using rule 125 (expression -> & ID .)
    *               reduce using rule 125 (expression -> & ID .)
    /               reduce using rule 125 (expression -> & ID .)
    -               reduce using rule 125 (expression -> & ID .)
    +               reduce using rule 125 (expression -> & ID .)
    ,               reduce using rule 125 (expression -> & ID .)
    }               reduce using rule 125 (expression -> & ID .)
    ;               reduce using rule 125 (expression -> & ID .)
    ?               reduce using rule 125 (expression -> & ID .)
    IN              reduce using rule 125 (expression -> & ID .)
    ]               reduce using rule 125 (expression -> & ID .)
    )               reduce using rule 125 (expression -> & ID .)
    {               reduce using rule 125 (expression -> & ID .)
    SANDBOX         reduce using rule 125 (expression -> & ID .)
    LIMPORT         reduce using rule 125 (expression -> & ID .)
    .               reduce using rule 125 (expression -> & ID .)
    IMPORT          reduce using rule 125 (expression -> & ID .)
    ID              reduce using rule 125 (expression -> & ID .)
    RETURN          reduce using rule 125 (expression -> & ID .)
    DEL             reduce using rule 125 (expression -> & ID .)
    !               reduce using rule 125 (expression -> & ID .)
    FOR             reduce using rule 125 (expression -> & ID .)
    DEBUG           reduce using rule 125 (expression -> & ID .)
    SKIP            reduce using rule 125 (expression -> & ID .)
    BREAK           reduce using rule 125 (expression -> & ID .)
    @               reduce using rule 125 (expression -> & ID .)
    WHILE           reduce using rule 125 (expression -> & ID .)
    #               reduce using rule 125 (expression -> & ID .)
    NAMESPACE       reduce using rule 125 (expression -> & ID .)
    CLASS           reduce using rule 125 (expression -> & ID .)
    FUNC            reduce using rule 125 (expression -> & ID .)
    PYTHON_CODE_EXEC reduce using rule 125 (expression -> & ID .)
    PYTHON_CODE     reduce using rule 125 (expression -> & ID .)
    IF              reduce using rule 125 (expression -> & ID .)
    CHAR            reduce using rule 125 (expression -> & ID .)
    STRING          reduce using rule 125 (expression -> & ID .)
    FALSE           reduce using rule 125 (expression -> & ID .)
    TRUE            reduce using rule 125 (expression -> & ID .)
    FLOAT           reduce using rule 125 (expression -> & ID .)
    HEX             reduce using rule 125 (expression -> & ID .)
    INT             reduce using rule 125 (expression -> & ID .)
    NULL            reduce using rule 125 (expression -> & ID .)
    $end            reduce using rule 125 (expression -> & ID .)


state 161

    (124) expression -> * ID .
    [               reduce using rule 124 (expression -> * ID .)
    (               reduce using rule 124 (expression -> * ID .)
    :               reduce using rule 124 (expression -> * ID .)
    >               reduce using rule 124 (expression -> * ID .)
    <               reduce using rule 124 (expression -> * ID .)
    &               reduce using rule 124 (expression -> * ID .)
    ^               reduce using rule 124 (expression -> * ID .)
    |               reduce using rule 124 (expression -> * ID .)
    EQ_GREATER      reduce using rule 124 (expression -> * ID .)
    EQ_LESS         reduce using rule 124 (expression -> * ID .)
    NOT_EQEQ        reduce using rule 124 (expression -> * ID .)
    EQEQ            reduce using rule 124 (expression -> * ID .)
    %               reduce using rule 124 (expression -> * ID .)
    *               reduce using rule 124 (expression -> * ID .)
    /               reduce using rule 124 (expression -> * ID .)
    -               reduce using rule 124 (expression -> * ID .)
    +               reduce using rule 124 (expression -> * ID .)
    ,               reduce using rule 124 (expression -> * ID .)
    }               reduce using rule 124 (expression -> * ID .)
    ;               reduce using rule 124 (expression -> * ID .)
    ?               reduce using rule 124 (expression -> * ID .)
    IN              reduce using rule 124 (expression -> * ID .)
    ]               reduce using rule 124 (expression -> * ID .)
    )               reduce using rule 124 (expression -> * ID .)
    {               reduce using rule 124 (expression -> * ID .)
    SANDBOX         reduce using rule 124 (expression -> * ID .)
    LIMPORT         reduce using rule 124 (expression -> * ID .)
    .               reduce using rule 124 (expression -> * ID .)
    IMPORT          reduce using rule 124 (expression -> * ID .)
    ID              reduce using rule 124 (expression -> * ID .)
    RETURN          reduce using rule 124 (expression -> * ID .)
    DEL             reduce using rule 124 (expression -> * ID .)
    !               reduce using rule 124 (expression -> * ID .)
    FOR             reduce using rule 124 (expression -> * ID .)
    DEBUG           reduce using rule 124 (expression -> * ID .)
    SKIP            reduce using rule 124 (expression -> * ID .)
    BREAK           reduce using rule 124 (expression -> * ID .)
    @               reduce using rule 124 (expression -> * ID .)
    WHILE           reduce using rule 124 (expression -> * ID .)
    #               reduce using rule 124 (expression -> * ID .)
    NAMESPACE       reduce using rule 124 (expression -> * ID .)
    CLASS           reduce using rule 124 (expression -> * ID .)
    FUNC            reduce using rule 124 (expression -> * ID .)
    PYTHON_CODE_EXEC reduce using rule 124 (expression -> * ID .)
    PYTHON_CODE     reduce using rule 124 (expression -> * ID .)
    IF              reduce using rule 124 (expression -> * ID .)
    CHAR            reduce using rule 124 (expression -> * ID .)
    STRING          reduce using rule 124 (expression -> * ID .)
    FALSE           reduce using rule 124 (expression -> * ID .)
    TRUE            reduce using rule 124 (expression -> * ID .)
    FLOAT           reduce using rule 124 (expression -> * ID .)
    HEX             reduce using rule 124 (expression -> * ID .)
    INT             reduce using rule 124 (expression -> * ID .)
    NULL            reduce using rule 124 (expression -> * ID .)
    $end            reduce using rule 124 (expression -> * ID .)


state 162

    (19) sandbox -> SANDBOX { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 244
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 163

    (150) assoc_array -> { assoc_array_items } .
    [               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    (               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    :               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    >               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    <               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    &               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    ^               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    |               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    EQ_GREATER      reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    EQ_LESS         reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    NOT_EQEQ        reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    EQEQ            reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    %               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    *               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    /               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    -               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    +               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    ,               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    }               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    ;               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    ?               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    IN              reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    ]               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    )               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    {               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    SANDBOX         reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    LIMPORT         reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    .               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    IMPORT          reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    ID              reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    RETURN          reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    DEL             reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    !               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    FOR             reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    DEBUG           reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    SKIP            reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    BREAK           reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    @               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    WHILE           reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    #               reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    NAMESPACE       reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    CLASS           reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    FUNC            reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    PYTHON_CODE_EXEC reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    PYTHON_CODE     reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    IF              reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    CHAR            reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    STRING          reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    FALSE           reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    TRUE            reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    FLOAT           reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    HEX             reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    INT             reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    NULL            reduce using rule 150 (assoc_array -> { assoc_array_items } .)
    $end            reduce using rule 150 (assoc_array -> { assoc_array_items } .)


state 164

    (152) assoc_array_items -> assoc_array_items , . expression : expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 245
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 165

    (130) _tuple -> { positional_args , . }
    (62) positional_args -> positional_args , . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    }               shift and go to state 246
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 247
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 166

    (131) _tuple -> { positional_args } .
    [               reduce using rule 131 (_tuple -> { positional_args } .)
    (               reduce using rule 131 (_tuple -> { positional_args } .)
    :               reduce using rule 131 (_tuple -> { positional_args } .)
    >               reduce using rule 131 (_tuple -> { positional_args } .)
    <               reduce using rule 131 (_tuple -> { positional_args } .)
    &               reduce using rule 131 (_tuple -> { positional_args } .)
    ^               reduce using rule 131 (_tuple -> { positional_args } .)
    |               reduce using rule 131 (_tuple -> { positional_args } .)
    EQ_GREATER      reduce using rule 131 (_tuple -> { positional_args } .)
    EQ_LESS         reduce using rule 131 (_tuple -> { positional_args } .)
    NOT_EQEQ        reduce using rule 131 (_tuple -> { positional_args } .)
    EQEQ            reduce using rule 131 (_tuple -> { positional_args } .)
    %               reduce using rule 131 (_tuple -> { positional_args } .)
    *               reduce using rule 131 (_tuple -> { positional_args } .)
    /               reduce using rule 131 (_tuple -> { positional_args } .)
    -               reduce using rule 131 (_tuple -> { positional_args } .)
    +               reduce using rule 131 (_tuple -> { positional_args } .)
    ,               reduce using rule 131 (_tuple -> { positional_args } .)
    }               reduce using rule 131 (_tuple -> { positional_args } .)
    ;               reduce using rule 131 (_tuple -> { positional_args } .)
    ?               reduce using rule 131 (_tuple -> { positional_args } .)
    IN              reduce using rule 131 (_tuple -> { positional_args } .)
    ]               reduce using rule 131 (_tuple -> { positional_args } .)
    )               reduce using rule 131 (_tuple -> { positional_args } .)
    {               reduce using rule 131 (_tuple -> { positional_args } .)
    SANDBOX         reduce using rule 131 (_tuple -> { positional_args } .)
    LIMPORT         reduce using rule 131 (_tuple -> { positional_args } .)
    .               reduce using rule 131 (_tuple -> { positional_args } .)
    IMPORT          reduce using rule 131 (_tuple -> { positional_args } .)
    ID              reduce using rule 131 (_tuple -> { positional_args } .)
    RETURN          reduce using rule 131 (_tuple -> { positional_args } .)
    DEL             reduce using rule 131 (_tuple -> { positional_args } .)
    !               reduce using rule 131 (_tuple -> { positional_args } .)
    FOR             reduce using rule 131 (_tuple -> { positional_args } .)
    DEBUG           reduce using rule 131 (_tuple -> { positional_args } .)
    SKIP            reduce using rule 131 (_tuple -> { positional_args } .)
    BREAK           reduce using rule 131 (_tuple -> { positional_args } .)
    @               reduce using rule 131 (_tuple -> { positional_args } .)
    WHILE           reduce using rule 131 (_tuple -> { positional_args } .)
    #               reduce using rule 131 (_tuple -> { positional_args } .)
    NAMESPACE       reduce using rule 131 (_tuple -> { positional_args } .)
    CLASS           reduce using rule 131 (_tuple -> { positional_args } .)
    FUNC            reduce using rule 131 (_tuple -> { positional_args } .)
    PYTHON_CODE_EXEC reduce using rule 131 (_tuple -> { positional_args } .)
    PYTHON_CODE     reduce using rule 131 (_tuple -> { positional_args } .)
    IF              reduce using rule 131 (_tuple -> { positional_args } .)
    CHAR            reduce using rule 131 (_tuple -> { positional_args } .)
    STRING          reduce using rule 131 (_tuple -> { positional_args } .)
    FALSE           reduce using rule 131 (_tuple -> { positional_args } .)
    TRUE            reduce using rule 131 (_tuple -> { positional_args } .)
    FLOAT           reduce using rule 131 (_tuple -> { positional_args } .)
    HEX             reduce using rule 131 (_tuple -> { positional_args } .)
    INT             reduce using rule 131 (_tuple -> { positional_args } .)
    NULL            reduce using rule 131 (_tuple -> { positional_args } .)
    $end            reduce using rule 131 (_tuple -> { positional_args } .)


state 167

    (151) assoc_array_items -> expression : . expression
    (34) function_call -> expression : . : expression ( empty )
    (35) function_call -> expression : . : expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    :               shift and go to state 176
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 248
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 168

    (126) expression -> ID ID . [ expression ]
    (127) expression -> ID ID .
  ! shift/reduce conflict for [ resolved as shift
    [               shift and go to state 205
    :               reduce using rule 127 (expression -> ID ID .)
    >               reduce using rule 127 (expression -> ID ID .)
    <               reduce using rule 127 (expression -> ID ID .)
    &               reduce using rule 127 (expression -> ID ID .)
    ^               reduce using rule 127 (expression -> ID ID .)
    |               reduce using rule 127 (expression -> ID ID .)
    EQ_GREATER      reduce using rule 127 (expression -> ID ID .)
    EQ_LESS         reduce using rule 127 (expression -> ID ID .)
    NOT_EQEQ        reduce using rule 127 (expression -> ID ID .)
    EQEQ            reduce using rule 127 (expression -> ID ID .)
    %               reduce using rule 127 (expression -> ID ID .)
    *               reduce using rule 127 (expression -> ID ID .)
    /               reduce using rule 127 (expression -> ID ID .)
    -               reduce using rule 127 (expression -> ID ID .)
    +               reduce using rule 127 (expression -> ID ID .)
    (               reduce using rule 127 (expression -> ID ID .)
    ,               reduce using rule 127 (expression -> ID ID .)
    }               reduce using rule 127 (expression -> ID ID .)
    ;               reduce using rule 127 (expression -> ID ID .)
    ?               reduce using rule 127 (expression -> ID ID .)
    IN              reduce using rule 127 (expression -> ID ID .)
    ]               reduce using rule 127 (expression -> ID ID .)
    )               reduce using rule 127 (expression -> ID ID .)
    {               reduce using rule 127 (expression -> ID ID .)
    SANDBOX         reduce using rule 127 (expression -> ID ID .)
    LIMPORT         reduce using rule 127 (expression -> ID ID .)
    .               reduce using rule 127 (expression -> ID ID .)
    IMPORT          reduce using rule 127 (expression -> ID ID .)
    ID              reduce using rule 127 (expression -> ID ID .)
    RETURN          reduce using rule 127 (expression -> ID ID .)
    DEL             reduce using rule 127 (expression -> ID ID .)
    !               reduce using rule 127 (expression -> ID ID .)
    FOR             reduce using rule 127 (expression -> ID ID .)
    DEBUG           reduce using rule 127 (expression -> ID ID .)
    SKIP            reduce using rule 127 (expression -> ID ID .)
    BREAK           reduce using rule 127 (expression -> ID ID .)
    @               reduce using rule 127 (expression -> ID ID .)
    WHILE           reduce using rule 127 (expression -> ID ID .)
    #               reduce using rule 127 (expression -> ID ID .)
    NAMESPACE       reduce using rule 127 (expression -> ID ID .)
    CLASS           reduce using rule 127 (expression -> ID ID .)
    FUNC            reduce using rule 127 (expression -> ID ID .)
    PYTHON_CODE_EXEC reduce using rule 127 (expression -> ID ID .)
    PYTHON_CODE     reduce using rule 127 (expression -> ID ID .)
    IF              reduce using rule 127 (expression -> ID ID .)
    CHAR            reduce using rule 127 (expression -> ID ID .)
    STRING          reduce using rule 127 (expression -> ID ID .)
    FALSE           reduce using rule 127 (expression -> ID ID .)
    TRUE            reduce using rule 127 (expression -> ID ID .)
    FLOAT           reduce using rule 127 (expression -> ID ID .)
    HEX             reduce using rule 127 (expression -> ID ID .)
    INT             reduce using rule 127 (expression -> ID ID .)
    NULL            reduce using rule 127 (expression -> ID ID .)
    $end            reduce using rule 127 (expression -> ID ID .)


state 169

    (20) sandbox -> LIMPORT expression ; .
    SANDBOX         reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    LIMPORT         reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    .               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    IMPORT          reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    ID              reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    RETURN          reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    DEL             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    !               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FOR             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    DEBUG           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    SKIP            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    BREAK           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    @               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    [               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    WHILE           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    ?               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    #               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    NAMESPACE       reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    CLASS           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FUNC            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    PYTHON_CODE_EXEC reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    PYTHON_CODE     reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    IF              reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    <               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    (               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    +               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    -               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    *               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    &               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    {               reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    CHAR            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    STRING          reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FALSE           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    TRUE            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    FLOAT           reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    HEX             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    INT             reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    NULL            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    $end            reduce using rule 20 (sandbox -> LIMPORT expression ; .)
    }               reduce using rule 20 (sandbox -> LIMPORT expression ; .)


state 170

    (129) get_index -> expression [ expression . ]
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ]               shift and go to state 249
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 171

    (29) function_call -> expression ( empty . ) FARROW { program }
    (36) function_call -> expression ( empty . )
    )               shift and go to state 250


state 172

    (37) function_call -> expression ( function_arguments . )
    )               shift and go to state 251


state 173

    (51) function_arguments -> kwargs .
    (64) kwargs -> kwargs . , id = expression
    )               reduce using rule 51 (function_arguments -> kwargs .)
    ,               shift and go to state 252


state 174

    (52) function_arguments -> positional_args . , kwargs
    (53) function_arguments -> positional_args .
    (62) positional_args -> positional_args . , expression
    ,               shift and go to state 253
    )               reduce using rule 53 (function_arguments -> positional_args .)


state 175

    (63) kwargs -> ID . = expression
    (126) expression -> ID . ID [ expression ]
    (127) expression -> ID . ID
    (149) id -> ID .
    (31) function_call -> ID . TARROW ID
    =               shift and go to state 254
    ID              shift and go to state 168
    >               reduce using rule 149 (id -> ID .)
    <               reduce using rule 149 (id -> ID .)
    &               reduce using rule 149 (id -> ID .)
    ^               reduce using rule 149 (id -> ID .)
    |               reduce using rule 149 (id -> ID .)
    EQ_GREATER      reduce using rule 149 (id -> ID .)
    EQ_LESS         reduce using rule 149 (id -> ID .)
    NOT_EQEQ        reduce using rule 149 (id -> ID .)
    EQEQ            reduce using rule 149 (id -> ID .)
    %               reduce using rule 149 (id -> ID .)
    *               reduce using rule 149 (id -> ID .)
    /               reduce using rule 149 (id -> ID .)
    -               reduce using rule 149 (id -> ID .)
    +               reduce using rule 149 (id -> ID .)
    [               reduce using rule 149 (id -> ID .)
    (               reduce using rule 149 (id -> ID .)
    :               reduce using rule 149 (id -> ID .)
    ,               reduce using rule 149 (id -> ID .)
    )               reduce using rule 149 (id -> ID .)
    TARROW          shift and go to state 125


state 176

    (34) function_call -> expression : : . expression ( empty )
    (35) function_call -> expression : : . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 255
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 177

    (107) expression -> expression > expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 107 (expression -> expression > expression .)
    (               reduce using rule 107 (expression -> expression > expression .)
    :               reduce using rule 107 (expression -> expression > expression .)
    >               reduce using rule 107 (expression -> expression > expression .)
    <               reduce using rule 107 (expression -> expression > expression .)
    &               reduce using rule 107 (expression -> expression > expression .)
    ^               reduce using rule 107 (expression -> expression > expression .)
    |               reduce using rule 107 (expression -> expression > expression .)
    EQ_GREATER      reduce using rule 107 (expression -> expression > expression .)
    EQ_LESS         reduce using rule 107 (expression -> expression > expression .)
    NOT_EQEQ        reduce using rule 107 (expression -> expression > expression .)
    EQEQ            reduce using rule 107 (expression -> expression > expression .)
    ,               reduce using rule 107 (expression -> expression > expression .)
    }               reduce using rule 107 (expression -> expression > expression .)
    ;               reduce using rule 107 (expression -> expression > expression .)
    ?               reduce using rule 107 (expression -> expression > expression .)
    IN              reduce using rule 107 (expression -> expression > expression .)
    ]               reduce using rule 107 (expression -> expression > expression .)
    )               reduce using rule 107 (expression -> expression > expression .)
    {               reduce using rule 107 (expression -> expression > expression .)
    SANDBOX         reduce using rule 107 (expression -> expression > expression .)
    LIMPORT         reduce using rule 107 (expression -> expression > expression .)
    .               reduce using rule 107 (expression -> expression > expression .)
    IMPORT          reduce using rule 107 (expression -> expression > expression .)
    ID              reduce using rule 107 (expression -> expression > expression .)
    RETURN          reduce using rule 107 (expression -> expression > expression .)
    DEL             reduce using rule 107 (expression -> expression > expression .)
    !               reduce using rule 107 (expression -> expression > expression .)
    FOR             reduce using rule 107 (expression -> expression > expression .)
    DEBUG           reduce using rule 107 (expression -> expression > expression .)
    SKIP            reduce using rule 107 (expression -> expression > expression .)
    BREAK           reduce using rule 107 (expression -> expression > expression .)
    @               reduce using rule 107 (expression -> expression > expression .)
    WHILE           reduce using rule 107 (expression -> expression > expression .)
    #               reduce using rule 107 (expression -> expression > expression .)
    NAMESPACE       reduce using rule 107 (expression -> expression > expression .)
    CLASS           reduce using rule 107 (expression -> expression > expression .)
    FUNC            reduce using rule 107 (expression -> expression > expression .)
    PYTHON_CODE_EXEC reduce using rule 107 (expression -> expression > expression .)
    PYTHON_CODE     reduce using rule 107 (expression -> expression > expression .)
    IF              reduce using rule 107 (expression -> expression > expression .)
    CHAR            reduce using rule 107 (expression -> expression > expression .)
    STRING          reduce using rule 107 (expression -> expression > expression .)
    FALSE           reduce using rule 107 (expression -> expression > expression .)
    TRUE            reduce using rule 107 (expression -> expression > expression .)
    FLOAT           reduce using rule 107 (expression -> expression > expression .)
    HEX             reduce using rule 107 (expression -> expression > expression .)
    INT             reduce using rule 107 (expression -> expression > expression .)
    NULL            reduce using rule 107 (expression -> expression > expression .)
    $end            reduce using rule 107 (expression -> expression > expression .)
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104


state 178

    (105) expression -> expression > > . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 256
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 179

    (108) expression -> expression < expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 108 (expression -> expression < expression .)
    (               reduce using rule 108 (expression -> expression < expression .)
    :               reduce using rule 108 (expression -> expression < expression .)
    >               reduce using rule 108 (expression -> expression < expression .)
    <               reduce using rule 108 (expression -> expression < expression .)
    &               reduce using rule 108 (expression -> expression < expression .)
    ^               reduce using rule 108 (expression -> expression < expression .)
    |               reduce using rule 108 (expression -> expression < expression .)
    EQ_GREATER      reduce using rule 108 (expression -> expression < expression .)
    EQ_LESS         reduce using rule 108 (expression -> expression < expression .)
    NOT_EQEQ        reduce using rule 108 (expression -> expression < expression .)
    EQEQ            reduce using rule 108 (expression -> expression < expression .)
    ,               reduce using rule 108 (expression -> expression < expression .)
    }               reduce using rule 108 (expression -> expression < expression .)
    ;               reduce using rule 108 (expression -> expression < expression .)
    ?               reduce using rule 108 (expression -> expression < expression .)
    IN              reduce using rule 108 (expression -> expression < expression .)
    ]               reduce using rule 108 (expression -> expression < expression .)
    )               reduce using rule 108 (expression -> expression < expression .)
    {               reduce using rule 108 (expression -> expression < expression .)
    SANDBOX         reduce using rule 108 (expression -> expression < expression .)
    LIMPORT         reduce using rule 108 (expression -> expression < expression .)
    .               reduce using rule 108 (expression -> expression < expression .)
    IMPORT          reduce using rule 108 (expression -> expression < expression .)
    ID              reduce using rule 108 (expression -> expression < expression .)
    RETURN          reduce using rule 108 (expression -> expression < expression .)
    DEL             reduce using rule 108 (expression -> expression < expression .)
    !               reduce using rule 108 (expression -> expression < expression .)
    FOR             reduce using rule 108 (expression -> expression < expression .)
    DEBUG           reduce using rule 108 (expression -> expression < expression .)
    SKIP            reduce using rule 108 (expression -> expression < expression .)
    BREAK           reduce using rule 108 (expression -> expression < expression .)
    @               reduce using rule 108 (expression -> expression < expression .)
    WHILE           reduce using rule 108 (expression -> expression < expression .)
    #               reduce using rule 108 (expression -> expression < expression .)
    NAMESPACE       reduce using rule 108 (expression -> expression < expression .)
    CLASS           reduce using rule 108 (expression -> expression < expression .)
    FUNC            reduce using rule 108 (expression -> expression < expression .)
    PYTHON_CODE_EXEC reduce using rule 108 (expression -> expression < expression .)
    PYTHON_CODE     reduce using rule 108 (expression -> expression < expression .)
    IF              reduce using rule 108 (expression -> expression < expression .)
    CHAR            reduce using rule 108 (expression -> expression < expression .)
    STRING          reduce using rule 108 (expression -> expression < expression .)
    FALSE           reduce using rule 108 (expression -> expression < expression .)
    TRUE            reduce using rule 108 (expression -> expression < expression .)
    FLOAT           reduce using rule 108 (expression -> expression < expression .)
    HEX             reduce using rule 108 (expression -> expression < expression .)
    INT             reduce using rule 108 (expression -> expression < expression .)
    NULL            reduce using rule 108 (expression -> expression < expression .)
    $end            reduce using rule 108 (expression -> expression < expression .)
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104


state 180

    (106) expression -> expression < < . expression
    (30) function_call -> < . ID > expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    ID              shift and go to state 258
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 257
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 181

    (110) expression -> expression & expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 110 (expression -> expression & expression .)
    (               reduce using rule 110 (expression -> expression & expression .)
    :               reduce using rule 110 (expression -> expression & expression .)
    &               reduce using rule 110 (expression -> expression & expression .)
    ^               reduce using rule 110 (expression -> expression & expression .)
    |               reduce using rule 110 (expression -> expression & expression .)
    ,               reduce using rule 110 (expression -> expression & expression .)
    }               reduce using rule 110 (expression -> expression & expression .)
    ;               reduce using rule 110 (expression -> expression & expression .)
    ?               reduce using rule 110 (expression -> expression & expression .)
    IN              reduce using rule 110 (expression -> expression & expression .)
    ]               reduce using rule 110 (expression -> expression & expression .)
    )               reduce using rule 110 (expression -> expression & expression .)
    {               reduce using rule 110 (expression -> expression & expression .)
    SANDBOX         reduce using rule 110 (expression -> expression & expression .)
    LIMPORT         reduce using rule 110 (expression -> expression & expression .)
    .               reduce using rule 110 (expression -> expression & expression .)
    IMPORT          reduce using rule 110 (expression -> expression & expression .)
    ID              reduce using rule 110 (expression -> expression & expression .)
    RETURN          reduce using rule 110 (expression -> expression & expression .)
    DEL             reduce using rule 110 (expression -> expression & expression .)
    !               reduce using rule 110 (expression -> expression & expression .)
    FOR             reduce using rule 110 (expression -> expression & expression .)
    DEBUG           reduce using rule 110 (expression -> expression & expression .)
    SKIP            reduce using rule 110 (expression -> expression & expression .)
    BREAK           reduce using rule 110 (expression -> expression & expression .)
    @               reduce using rule 110 (expression -> expression & expression .)
    WHILE           reduce using rule 110 (expression -> expression & expression .)
    #               reduce using rule 110 (expression -> expression & expression .)
    NAMESPACE       reduce using rule 110 (expression -> expression & expression .)
    CLASS           reduce using rule 110 (expression -> expression & expression .)
    FUNC            reduce using rule 110 (expression -> expression & expression .)
    PYTHON_CODE_EXEC reduce using rule 110 (expression -> expression & expression .)
    PYTHON_CODE     reduce using rule 110 (expression -> expression & expression .)
    IF              reduce using rule 110 (expression -> expression & expression .)
    CHAR            reduce using rule 110 (expression -> expression & expression .)
    STRING          reduce using rule 110 (expression -> expression & expression .)
    FALSE           reduce using rule 110 (expression -> expression & expression .)
    TRUE            reduce using rule 110 (expression -> expression & expression .)
    FLOAT           reduce using rule 110 (expression -> expression & expression .)
    HEX             reduce using rule 110 (expression -> expression & expression .)
    INT             reduce using rule 110 (expression -> expression & expression .)
    NULL            reduce using rule 110 (expression -> expression & expression .)
    $end            reduce using rule 110 (expression -> expression & expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104


state 182

    (111) expression -> expression ^ expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for : resolved as shift
    ,               reduce using rule 111 (expression -> expression ^ expression .)
    }               reduce using rule 111 (expression -> expression ^ expression .)
    ;               reduce using rule 111 (expression -> expression ^ expression .)
    ?               reduce using rule 111 (expression -> expression ^ expression .)
    IN              reduce using rule 111 (expression -> expression ^ expression .)
    ]               reduce using rule 111 (expression -> expression ^ expression .)
    )               reduce using rule 111 (expression -> expression ^ expression .)
    {               reduce using rule 111 (expression -> expression ^ expression .)
    SANDBOX         reduce using rule 111 (expression -> expression ^ expression .)
    LIMPORT         reduce using rule 111 (expression -> expression ^ expression .)
    .               reduce using rule 111 (expression -> expression ^ expression .)
    IMPORT          reduce using rule 111 (expression -> expression ^ expression .)
    ID              reduce using rule 111 (expression -> expression ^ expression .)
    RETURN          reduce using rule 111 (expression -> expression ^ expression .)
    DEL             reduce using rule 111 (expression -> expression ^ expression .)
    !               reduce using rule 111 (expression -> expression ^ expression .)
    FOR             reduce using rule 111 (expression -> expression ^ expression .)
    DEBUG           reduce using rule 111 (expression -> expression ^ expression .)
    SKIP            reduce using rule 111 (expression -> expression ^ expression .)
    BREAK           reduce using rule 111 (expression -> expression ^ expression .)
    @               reduce using rule 111 (expression -> expression ^ expression .)
    WHILE           reduce using rule 111 (expression -> expression ^ expression .)
    #               reduce using rule 111 (expression -> expression ^ expression .)
    NAMESPACE       reduce using rule 111 (expression -> expression ^ expression .)
    CLASS           reduce using rule 111 (expression -> expression ^ expression .)
    FUNC            reduce using rule 111 (expression -> expression ^ expression .)
    PYTHON_CODE_EXEC reduce using rule 111 (expression -> expression ^ expression .)
    PYTHON_CODE     reduce using rule 111 (expression -> expression ^ expression .)
    IF              reduce using rule 111 (expression -> expression ^ expression .)
    CHAR            reduce using rule 111 (expression -> expression ^ expression .)
    STRING          reduce using rule 111 (expression -> expression ^ expression .)
    FALSE           reduce using rule 111 (expression -> expression ^ expression .)
    TRUE            reduce using rule 111 (expression -> expression ^ expression .)
    FLOAT           reduce using rule 111 (expression -> expression ^ expression .)
    HEX             reduce using rule 111 (expression -> expression ^ expression .)
    INT             reduce using rule 111 (expression -> expression ^ expression .)
    NULL            reduce using rule 111 (expression -> expression ^ expression .)
    $end            reduce using rule 111 (expression -> expression ^ expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 183

    (112) expression -> expression | expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 112 (expression -> expression | expression .)
    (               reduce using rule 112 (expression -> expression | expression .)
    :               reduce using rule 112 (expression -> expression | expression .)
    ^               reduce using rule 112 (expression -> expression | expression .)
    |               reduce using rule 112 (expression -> expression | expression .)
    ,               reduce using rule 112 (expression -> expression | expression .)
    }               reduce using rule 112 (expression -> expression | expression .)
    ;               reduce using rule 112 (expression -> expression | expression .)
    ?               reduce using rule 112 (expression -> expression | expression .)
    IN              reduce using rule 112 (expression -> expression | expression .)
    ]               reduce using rule 112 (expression -> expression | expression .)
    )               reduce using rule 112 (expression -> expression | expression .)
    {               reduce using rule 112 (expression -> expression | expression .)
    SANDBOX         reduce using rule 112 (expression -> expression | expression .)
    LIMPORT         reduce using rule 112 (expression -> expression | expression .)
    .               reduce using rule 112 (expression -> expression | expression .)
    IMPORT          reduce using rule 112 (expression -> expression | expression .)
    ID              reduce using rule 112 (expression -> expression | expression .)
    RETURN          reduce using rule 112 (expression -> expression | expression .)
    DEL             reduce using rule 112 (expression -> expression | expression .)
    !               reduce using rule 112 (expression -> expression | expression .)
    FOR             reduce using rule 112 (expression -> expression | expression .)
    DEBUG           reduce using rule 112 (expression -> expression | expression .)
    SKIP            reduce using rule 112 (expression -> expression | expression .)
    BREAK           reduce using rule 112 (expression -> expression | expression .)
    @               reduce using rule 112 (expression -> expression | expression .)
    WHILE           reduce using rule 112 (expression -> expression | expression .)
    #               reduce using rule 112 (expression -> expression | expression .)
    NAMESPACE       reduce using rule 112 (expression -> expression | expression .)
    CLASS           reduce using rule 112 (expression -> expression | expression .)
    FUNC            reduce using rule 112 (expression -> expression | expression .)
    PYTHON_CODE_EXEC reduce using rule 112 (expression -> expression | expression .)
    PYTHON_CODE     reduce using rule 112 (expression -> expression | expression .)
    IF              reduce using rule 112 (expression -> expression | expression .)
    CHAR            reduce using rule 112 (expression -> expression | expression .)
    STRING          reduce using rule 112 (expression -> expression | expression .)
    FALSE           reduce using rule 112 (expression -> expression | expression .)
    TRUE            reduce using rule 112 (expression -> expression | expression .)
    FLOAT           reduce using rule 112 (expression -> expression | expression .)
    HEX             reduce using rule 112 (expression -> expression | expression .)
    INT             reduce using rule 112 (expression -> expression | expression .)
    NULL            reduce using rule 112 (expression -> expression | expression .)
    $end            reduce using rule 112 (expression -> expression | expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104


state 184

    (113) expression -> expression EQ_GREATER expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    (               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    :               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    >               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    <               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    &               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    ^               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    |               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    EQ_GREATER      reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    EQ_LESS         reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    NOT_EQEQ        reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    EQEQ            reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    ,               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    }               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    ;               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    ?               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    IN              reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    ]               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    )               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    {               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    SANDBOX         reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    LIMPORT         reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    .               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    IMPORT          reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    ID              reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    RETURN          reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    DEL             reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    !               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    FOR             reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    DEBUG           reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    SKIP            reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    BREAK           reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    @               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    WHILE           reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    #               reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    NAMESPACE       reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    CLASS           reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    FUNC            reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    PYTHON_CODE_EXEC reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    PYTHON_CODE     reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    IF              reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    CHAR            reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    STRING          reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    FALSE           reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    TRUE            reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    FLOAT           reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    HEX             reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    INT             reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    NULL            reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    $end            reduce using rule 113 (expression -> expression EQ_GREATER expression .)
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104


state 185

    (114) expression -> expression EQ_LESS expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    (               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    :               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    >               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    <               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    &               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    ^               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    |               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    EQ_GREATER      reduce using rule 114 (expression -> expression EQ_LESS expression .)
    EQ_LESS         reduce using rule 114 (expression -> expression EQ_LESS expression .)
    NOT_EQEQ        reduce using rule 114 (expression -> expression EQ_LESS expression .)
    EQEQ            reduce using rule 114 (expression -> expression EQ_LESS expression .)
    ,               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    }               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    ;               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    ?               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    IN              reduce using rule 114 (expression -> expression EQ_LESS expression .)
    ]               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    )               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    {               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    SANDBOX         reduce using rule 114 (expression -> expression EQ_LESS expression .)
    LIMPORT         reduce using rule 114 (expression -> expression EQ_LESS expression .)
    .               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    IMPORT          reduce using rule 114 (expression -> expression EQ_LESS expression .)
    ID              reduce using rule 114 (expression -> expression EQ_LESS expression .)
    RETURN          reduce using rule 114 (expression -> expression EQ_LESS expression .)
    DEL             reduce using rule 114 (expression -> expression EQ_LESS expression .)
    !               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    FOR             reduce using rule 114 (expression -> expression EQ_LESS expression .)
    DEBUG           reduce using rule 114 (expression -> expression EQ_LESS expression .)
    SKIP            reduce using rule 114 (expression -> expression EQ_LESS expression .)
    BREAK           reduce using rule 114 (expression -> expression EQ_LESS expression .)
    @               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    WHILE           reduce using rule 114 (expression -> expression EQ_LESS expression .)
    #               reduce using rule 114 (expression -> expression EQ_LESS expression .)
    NAMESPACE       reduce using rule 114 (expression -> expression EQ_LESS expression .)
    CLASS           reduce using rule 114 (expression -> expression EQ_LESS expression .)
    FUNC            reduce using rule 114 (expression -> expression EQ_LESS expression .)
    PYTHON_CODE_EXEC reduce using rule 114 (expression -> expression EQ_LESS expression .)
    PYTHON_CODE     reduce using rule 114 (expression -> expression EQ_LESS expression .)
    IF              reduce using rule 114 (expression -> expression EQ_LESS expression .)
    CHAR            reduce using rule 114 (expression -> expression EQ_LESS expression .)
    STRING          reduce using rule 114 (expression -> expression EQ_LESS expression .)
    FALSE           reduce using rule 114 (expression -> expression EQ_LESS expression .)
    TRUE            reduce using rule 114 (expression -> expression EQ_LESS expression .)
    FLOAT           reduce using rule 114 (expression -> expression EQ_LESS expression .)
    HEX             reduce using rule 114 (expression -> expression EQ_LESS expression .)
    INT             reduce using rule 114 (expression -> expression EQ_LESS expression .)
    NULL            reduce using rule 114 (expression -> expression EQ_LESS expression .)
    $end            reduce using rule 114 (expression -> expression EQ_LESS expression .)
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104


state 186

    (115) expression -> expression NOT_EQEQ expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    (               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    :               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    &               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    ^               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    |               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    NOT_EQEQ        reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    EQEQ            reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    ,               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    }               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    ;               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    ?               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    IN              reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    ]               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    )               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    {               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    SANDBOX         reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    LIMPORT         reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    .               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    IMPORT          reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    ID              reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    RETURN          reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    DEL             reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    !               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    FOR             reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    DEBUG           reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    SKIP            reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    BREAK           reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    @               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    WHILE           reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    #               reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    NAMESPACE       reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    CLASS           reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    FUNC            reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    PYTHON_CODE_EXEC reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    PYTHON_CODE     reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    IF              reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    CHAR            reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    STRING          reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    FALSE           reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    TRUE            reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    FLOAT           reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    HEX             reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    INT             reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    NULL            reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    $end            reduce using rule 115 (expression -> expression NOT_EQEQ expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104


state 187

    (116) expression -> expression EQEQ expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 116 (expression -> expression EQEQ expression .)
    (               reduce using rule 116 (expression -> expression EQEQ expression .)
    :               reduce using rule 116 (expression -> expression EQEQ expression .)
    &               reduce using rule 116 (expression -> expression EQEQ expression .)
    ^               reduce using rule 116 (expression -> expression EQEQ expression .)
    |               reduce using rule 116 (expression -> expression EQEQ expression .)
    NOT_EQEQ        reduce using rule 116 (expression -> expression EQEQ expression .)
    EQEQ            reduce using rule 116 (expression -> expression EQEQ expression .)
    ,               reduce using rule 116 (expression -> expression EQEQ expression .)
    }               reduce using rule 116 (expression -> expression EQEQ expression .)
    ;               reduce using rule 116 (expression -> expression EQEQ expression .)
    ?               reduce using rule 116 (expression -> expression EQEQ expression .)
    IN              reduce using rule 116 (expression -> expression EQEQ expression .)
    ]               reduce using rule 116 (expression -> expression EQEQ expression .)
    )               reduce using rule 116 (expression -> expression EQEQ expression .)
    {               reduce using rule 116 (expression -> expression EQEQ expression .)
    SANDBOX         reduce using rule 116 (expression -> expression EQEQ expression .)
    LIMPORT         reduce using rule 116 (expression -> expression EQEQ expression .)
    .               reduce using rule 116 (expression -> expression EQEQ expression .)
    IMPORT          reduce using rule 116 (expression -> expression EQEQ expression .)
    ID              reduce using rule 116 (expression -> expression EQEQ expression .)
    RETURN          reduce using rule 116 (expression -> expression EQEQ expression .)
    DEL             reduce using rule 116 (expression -> expression EQEQ expression .)
    !               reduce using rule 116 (expression -> expression EQEQ expression .)
    FOR             reduce using rule 116 (expression -> expression EQEQ expression .)
    DEBUG           reduce using rule 116 (expression -> expression EQEQ expression .)
    SKIP            reduce using rule 116 (expression -> expression EQEQ expression .)
    BREAK           reduce using rule 116 (expression -> expression EQEQ expression .)
    @               reduce using rule 116 (expression -> expression EQEQ expression .)
    WHILE           reduce using rule 116 (expression -> expression EQEQ expression .)
    #               reduce using rule 116 (expression -> expression EQEQ expression .)
    NAMESPACE       reduce using rule 116 (expression -> expression EQEQ expression .)
    CLASS           reduce using rule 116 (expression -> expression EQEQ expression .)
    FUNC            reduce using rule 116 (expression -> expression EQEQ expression .)
    PYTHON_CODE_EXEC reduce using rule 116 (expression -> expression EQEQ expression .)
    PYTHON_CODE     reduce using rule 116 (expression -> expression EQEQ expression .)
    IF              reduce using rule 116 (expression -> expression EQEQ expression .)
    CHAR            reduce using rule 116 (expression -> expression EQEQ expression .)
    STRING          reduce using rule 116 (expression -> expression EQEQ expression .)
    FALSE           reduce using rule 116 (expression -> expression EQEQ expression .)
    TRUE            reduce using rule 116 (expression -> expression EQEQ expression .)
    FLOAT           reduce using rule 116 (expression -> expression EQEQ expression .)
    HEX             reduce using rule 116 (expression -> expression EQEQ expression .)
    INT             reduce using rule 116 (expression -> expression EQEQ expression .)
    NULL            reduce using rule 116 (expression -> expression EQEQ expression .)
    $end            reduce using rule 116 (expression -> expression EQEQ expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104


state 188

    (117) expression -> expression % expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 117 (expression -> expression % expression .)
    (               reduce using rule 117 (expression -> expression % expression .)
    :               reduce using rule 117 (expression -> expression % expression .)
    >               reduce using rule 117 (expression -> expression % expression .)
    <               reduce using rule 117 (expression -> expression % expression .)
    &               reduce using rule 117 (expression -> expression % expression .)
    ^               reduce using rule 117 (expression -> expression % expression .)
    |               reduce using rule 117 (expression -> expression % expression .)
    EQ_GREATER      reduce using rule 117 (expression -> expression % expression .)
    EQ_LESS         reduce using rule 117 (expression -> expression % expression .)
    NOT_EQEQ        reduce using rule 117 (expression -> expression % expression .)
    EQEQ            reduce using rule 117 (expression -> expression % expression .)
    %               reduce using rule 117 (expression -> expression % expression .)
    *               reduce using rule 117 (expression -> expression % expression .)
    /               reduce using rule 117 (expression -> expression % expression .)
    -               reduce using rule 117 (expression -> expression % expression .)
    +               reduce using rule 117 (expression -> expression % expression .)
    ,               reduce using rule 117 (expression -> expression % expression .)
    }               reduce using rule 117 (expression -> expression % expression .)
    ;               reduce using rule 117 (expression -> expression % expression .)
    ?               reduce using rule 117 (expression -> expression % expression .)
    IN              reduce using rule 117 (expression -> expression % expression .)
    ]               reduce using rule 117 (expression -> expression % expression .)
    )               reduce using rule 117 (expression -> expression % expression .)
    {               reduce using rule 117 (expression -> expression % expression .)
    SANDBOX         reduce using rule 117 (expression -> expression % expression .)
    LIMPORT         reduce using rule 117 (expression -> expression % expression .)
    .               reduce using rule 117 (expression -> expression % expression .)
    IMPORT          reduce using rule 117 (expression -> expression % expression .)
    ID              reduce using rule 117 (expression -> expression % expression .)
    RETURN          reduce using rule 117 (expression -> expression % expression .)
    DEL             reduce using rule 117 (expression -> expression % expression .)
    !               reduce using rule 117 (expression -> expression % expression .)
    FOR             reduce using rule 117 (expression -> expression % expression .)
    DEBUG           reduce using rule 117 (expression -> expression % expression .)
    SKIP            reduce using rule 117 (expression -> expression % expression .)
    BREAK           reduce using rule 117 (expression -> expression % expression .)
    @               reduce using rule 117 (expression -> expression % expression .)
    WHILE           reduce using rule 117 (expression -> expression % expression .)
    #               reduce using rule 117 (expression -> expression % expression .)
    NAMESPACE       reduce using rule 117 (expression -> expression % expression .)
    CLASS           reduce using rule 117 (expression -> expression % expression .)
    FUNC            reduce using rule 117 (expression -> expression % expression .)
    PYTHON_CODE_EXEC reduce using rule 117 (expression -> expression % expression .)
    PYTHON_CODE     reduce using rule 117 (expression -> expression % expression .)
    IF              reduce using rule 117 (expression -> expression % expression .)
    CHAR            reduce using rule 117 (expression -> expression % expression .)
    STRING          reduce using rule 117 (expression -> expression % expression .)
    FALSE           reduce using rule 117 (expression -> expression % expression .)
    TRUE            reduce using rule 117 (expression -> expression % expression .)
    FLOAT           reduce using rule 117 (expression -> expression % expression .)
    HEX             reduce using rule 117 (expression -> expression % expression .)
    INT             reduce using rule 117 (expression -> expression % expression .)
    NULL            reduce using rule 117 (expression -> expression % expression .)
    $end            reduce using rule 117 (expression -> expression % expression .)


state 189

    (118) expression -> expression * expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 118 (expression -> expression * expression .)
    (               reduce using rule 118 (expression -> expression * expression .)
    :               reduce using rule 118 (expression -> expression * expression .)
    >               reduce using rule 118 (expression -> expression * expression .)
    <               reduce using rule 118 (expression -> expression * expression .)
    &               reduce using rule 118 (expression -> expression * expression .)
    ^               reduce using rule 118 (expression -> expression * expression .)
    |               reduce using rule 118 (expression -> expression * expression .)
    EQ_GREATER      reduce using rule 118 (expression -> expression * expression .)
    EQ_LESS         reduce using rule 118 (expression -> expression * expression .)
    NOT_EQEQ        reduce using rule 118 (expression -> expression * expression .)
    EQEQ            reduce using rule 118 (expression -> expression * expression .)
    %               reduce using rule 118 (expression -> expression * expression .)
    *               reduce using rule 118 (expression -> expression * expression .)
    /               reduce using rule 118 (expression -> expression * expression .)
    -               reduce using rule 118 (expression -> expression * expression .)
    +               reduce using rule 118 (expression -> expression * expression .)
    ,               reduce using rule 118 (expression -> expression * expression .)
    }               reduce using rule 118 (expression -> expression * expression .)
    ;               reduce using rule 118 (expression -> expression * expression .)
    ?               reduce using rule 118 (expression -> expression * expression .)
    IN              reduce using rule 118 (expression -> expression * expression .)
    ]               reduce using rule 118 (expression -> expression * expression .)
    )               reduce using rule 118 (expression -> expression * expression .)
    {               reduce using rule 118 (expression -> expression * expression .)
    SANDBOX         reduce using rule 118 (expression -> expression * expression .)
    LIMPORT         reduce using rule 118 (expression -> expression * expression .)
    .               reduce using rule 118 (expression -> expression * expression .)
    IMPORT          reduce using rule 118 (expression -> expression * expression .)
    ID              reduce using rule 118 (expression -> expression * expression .)
    RETURN          reduce using rule 118 (expression -> expression * expression .)
    DEL             reduce using rule 118 (expression -> expression * expression .)
    !               reduce using rule 118 (expression -> expression * expression .)
    FOR             reduce using rule 118 (expression -> expression * expression .)
    DEBUG           reduce using rule 118 (expression -> expression * expression .)
    SKIP            reduce using rule 118 (expression -> expression * expression .)
    BREAK           reduce using rule 118 (expression -> expression * expression .)
    @               reduce using rule 118 (expression -> expression * expression .)
    WHILE           reduce using rule 118 (expression -> expression * expression .)
    #               reduce using rule 118 (expression -> expression * expression .)
    NAMESPACE       reduce using rule 118 (expression -> expression * expression .)
    CLASS           reduce using rule 118 (expression -> expression * expression .)
    FUNC            reduce using rule 118 (expression -> expression * expression .)
    PYTHON_CODE_EXEC reduce using rule 118 (expression -> expression * expression .)
    PYTHON_CODE     reduce using rule 118 (expression -> expression * expression .)
    IF              reduce using rule 118 (expression -> expression * expression .)
    CHAR            reduce using rule 118 (expression -> expression * expression .)
    STRING          reduce using rule 118 (expression -> expression * expression .)
    FALSE           reduce using rule 118 (expression -> expression * expression .)
    TRUE            reduce using rule 118 (expression -> expression * expression .)
    FLOAT           reduce using rule 118 (expression -> expression * expression .)
    HEX             reduce using rule 118 (expression -> expression * expression .)
    INT             reduce using rule 118 (expression -> expression * expression .)
    NULL            reduce using rule 118 (expression -> expression * expression .)
    $end            reduce using rule 118 (expression -> expression * expression .)


state 190

    (119) expression -> expression / expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 119 (expression -> expression / expression .)
    (               reduce using rule 119 (expression -> expression / expression .)
    :               reduce using rule 119 (expression -> expression / expression .)
    >               reduce using rule 119 (expression -> expression / expression .)
    <               reduce using rule 119 (expression -> expression / expression .)
    &               reduce using rule 119 (expression -> expression / expression .)
    ^               reduce using rule 119 (expression -> expression / expression .)
    |               reduce using rule 119 (expression -> expression / expression .)
    EQ_GREATER      reduce using rule 119 (expression -> expression / expression .)
    EQ_LESS         reduce using rule 119 (expression -> expression / expression .)
    NOT_EQEQ        reduce using rule 119 (expression -> expression / expression .)
    EQEQ            reduce using rule 119 (expression -> expression / expression .)
    %               reduce using rule 119 (expression -> expression / expression .)
    *               reduce using rule 119 (expression -> expression / expression .)
    /               reduce using rule 119 (expression -> expression / expression .)
    -               reduce using rule 119 (expression -> expression / expression .)
    +               reduce using rule 119 (expression -> expression / expression .)
    ,               reduce using rule 119 (expression -> expression / expression .)
    }               reduce using rule 119 (expression -> expression / expression .)
    ;               reduce using rule 119 (expression -> expression / expression .)
    ?               reduce using rule 119 (expression -> expression / expression .)
    IN              reduce using rule 119 (expression -> expression / expression .)
    ]               reduce using rule 119 (expression -> expression / expression .)
    )               reduce using rule 119 (expression -> expression / expression .)
    {               reduce using rule 119 (expression -> expression / expression .)
    SANDBOX         reduce using rule 119 (expression -> expression / expression .)
    LIMPORT         reduce using rule 119 (expression -> expression / expression .)
    .               reduce using rule 119 (expression -> expression / expression .)
    IMPORT          reduce using rule 119 (expression -> expression / expression .)
    ID              reduce using rule 119 (expression -> expression / expression .)
    RETURN          reduce using rule 119 (expression -> expression / expression .)
    DEL             reduce using rule 119 (expression -> expression / expression .)
    !               reduce using rule 119 (expression -> expression / expression .)
    FOR             reduce using rule 119 (expression -> expression / expression .)
    DEBUG           reduce using rule 119 (expression -> expression / expression .)
    SKIP            reduce using rule 119 (expression -> expression / expression .)
    BREAK           reduce using rule 119 (expression -> expression / expression .)
    @               reduce using rule 119 (expression -> expression / expression .)
    WHILE           reduce using rule 119 (expression -> expression / expression .)
    #               reduce using rule 119 (expression -> expression / expression .)
    NAMESPACE       reduce using rule 119 (expression -> expression / expression .)
    CLASS           reduce using rule 119 (expression -> expression / expression .)
    FUNC            reduce using rule 119 (expression -> expression / expression .)
    PYTHON_CODE_EXEC reduce using rule 119 (expression -> expression / expression .)
    PYTHON_CODE     reduce using rule 119 (expression -> expression / expression .)
    IF              reduce using rule 119 (expression -> expression / expression .)
    CHAR            reduce using rule 119 (expression -> expression / expression .)
    STRING          reduce using rule 119 (expression -> expression / expression .)
    FALSE           reduce using rule 119 (expression -> expression / expression .)
    TRUE            reduce using rule 119 (expression -> expression / expression .)
    FLOAT           reduce using rule 119 (expression -> expression / expression .)
    HEX             reduce using rule 119 (expression -> expression / expression .)
    INT             reduce using rule 119 (expression -> expression / expression .)
    NULL            reduce using rule 119 (expression -> expression / expression .)
    $end            reduce using rule 119 (expression -> expression / expression .)


state 191

    (120) expression -> expression - expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 120 (expression -> expression - expression .)
    (               reduce using rule 120 (expression -> expression - expression .)
    :               reduce using rule 120 (expression -> expression - expression .)
    >               reduce using rule 120 (expression -> expression - expression .)
    <               reduce using rule 120 (expression -> expression - expression .)
    &               reduce using rule 120 (expression -> expression - expression .)
    ^               reduce using rule 120 (expression -> expression - expression .)
    |               reduce using rule 120 (expression -> expression - expression .)
    EQ_GREATER      reduce using rule 120 (expression -> expression - expression .)
    EQ_LESS         reduce using rule 120 (expression -> expression - expression .)
    NOT_EQEQ        reduce using rule 120 (expression -> expression - expression .)
    EQEQ            reduce using rule 120 (expression -> expression - expression .)
    -               reduce using rule 120 (expression -> expression - expression .)
    +               reduce using rule 120 (expression -> expression - expression .)
    ,               reduce using rule 120 (expression -> expression - expression .)
    }               reduce using rule 120 (expression -> expression - expression .)
    ;               reduce using rule 120 (expression -> expression - expression .)
    ?               reduce using rule 120 (expression -> expression - expression .)
    IN              reduce using rule 120 (expression -> expression - expression .)
    ]               reduce using rule 120 (expression -> expression - expression .)
    )               reduce using rule 120 (expression -> expression - expression .)
    {               reduce using rule 120 (expression -> expression - expression .)
    SANDBOX         reduce using rule 120 (expression -> expression - expression .)
    LIMPORT         reduce using rule 120 (expression -> expression - expression .)
    .               reduce using rule 120 (expression -> expression - expression .)
    IMPORT          reduce using rule 120 (expression -> expression - expression .)
    ID              reduce using rule 120 (expression -> expression - expression .)
    RETURN          reduce using rule 120 (expression -> expression - expression .)
    DEL             reduce using rule 120 (expression -> expression - expression .)
    !               reduce using rule 120 (expression -> expression - expression .)
    FOR             reduce using rule 120 (expression -> expression - expression .)
    DEBUG           reduce using rule 120 (expression -> expression - expression .)
    SKIP            reduce using rule 120 (expression -> expression - expression .)
    BREAK           reduce using rule 120 (expression -> expression - expression .)
    @               reduce using rule 120 (expression -> expression - expression .)
    WHILE           reduce using rule 120 (expression -> expression - expression .)
    #               reduce using rule 120 (expression -> expression - expression .)
    NAMESPACE       reduce using rule 120 (expression -> expression - expression .)
    CLASS           reduce using rule 120 (expression -> expression - expression .)
    FUNC            reduce using rule 120 (expression -> expression - expression .)
    PYTHON_CODE_EXEC reduce using rule 120 (expression -> expression - expression .)
    PYTHON_CODE     reduce using rule 120 (expression -> expression - expression .)
    IF              reduce using rule 120 (expression -> expression - expression .)
    CHAR            reduce using rule 120 (expression -> expression - expression .)
    STRING          reduce using rule 120 (expression -> expression - expression .)
    FALSE           reduce using rule 120 (expression -> expression - expression .)
    TRUE            reduce using rule 120 (expression -> expression - expression .)
    FLOAT           reduce using rule 120 (expression -> expression - expression .)
    HEX             reduce using rule 120 (expression -> expression - expression .)
    INT             reduce using rule 120 (expression -> expression - expression .)
    NULL            reduce using rule 120 (expression -> expression - expression .)
    $end            reduce using rule 120 (expression -> expression - expression .)
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102


state 192

    (121) expression -> expression + expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 121 (expression -> expression + expression .)
    (               reduce using rule 121 (expression -> expression + expression .)
    :               reduce using rule 121 (expression -> expression + expression .)
    >               reduce using rule 121 (expression -> expression + expression .)
    <               reduce using rule 121 (expression -> expression + expression .)
    &               reduce using rule 121 (expression -> expression + expression .)
    ^               reduce using rule 121 (expression -> expression + expression .)
    |               reduce using rule 121 (expression -> expression + expression .)
    EQ_GREATER      reduce using rule 121 (expression -> expression + expression .)
    EQ_LESS         reduce using rule 121 (expression -> expression + expression .)
    NOT_EQEQ        reduce using rule 121 (expression -> expression + expression .)
    EQEQ            reduce using rule 121 (expression -> expression + expression .)
    -               reduce using rule 121 (expression -> expression + expression .)
    +               reduce using rule 121 (expression -> expression + expression .)
    ,               reduce using rule 121 (expression -> expression + expression .)
    }               reduce using rule 121 (expression -> expression + expression .)
    ;               reduce using rule 121 (expression -> expression + expression .)
    ?               reduce using rule 121 (expression -> expression + expression .)
    IN              reduce using rule 121 (expression -> expression + expression .)
    ]               reduce using rule 121 (expression -> expression + expression .)
    )               reduce using rule 121 (expression -> expression + expression .)
    {               reduce using rule 121 (expression -> expression + expression .)
    SANDBOX         reduce using rule 121 (expression -> expression + expression .)
    LIMPORT         reduce using rule 121 (expression -> expression + expression .)
    .               reduce using rule 121 (expression -> expression + expression .)
    IMPORT          reduce using rule 121 (expression -> expression + expression .)
    ID              reduce using rule 121 (expression -> expression + expression .)
    RETURN          reduce using rule 121 (expression -> expression + expression .)
    DEL             reduce using rule 121 (expression -> expression + expression .)
    !               reduce using rule 121 (expression -> expression + expression .)
    FOR             reduce using rule 121 (expression -> expression + expression .)
    DEBUG           reduce using rule 121 (expression -> expression + expression .)
    SKIP            reduce using rule 121 (expression -> expression + expression .)
    BREAK           reduce using rule 121 (expression -> expression + expression .)
    @               reduce using rule 121 (expression -> expression + expression .)
    WHILE           reduce using rule 121 (expression -> expression + expression .)
    #               reduce using rule 121 (expression -> expression + expression .)
    NAMESPACE       reduce using rule 121 (expression -> expression + expression .)
    CLASS           reduce using rule 121 (expression -> expression + expression .)
    FUNC            reduce using rule 121 (expression -> expression + expression .)
    PYTHON_CODE_EXEC reduce using rule 121 (expression -> expression + expression .)
    PYTHON_CODE     reduce using rule 121 (expression -> expression + expression .)
    IF              reduce using rule 121 (expression -> expression + expression .)
    CHAR            reduce using rule 121 (expression -> expression + expression .)
    STRING          reduce using rule 121 (expression -> expression + expression .)
    FALSE           reduce using rule 121 (expression -> expression + expression .)
    TRUE            reduce using rule 121 (expression -> expression + expression .)
    FLOAT           reduce using rule 121 (expression -> expression + expression .)
    HEX             reduce using rule 121 (expression -> expression + expression .)
    INT             reduce using rule 121 (expression -> expression + expression .)
    NULL            reduce using rule 121 (expression -> expression + expression .)
    $end            reduce using rule 121 (expression -> expression + expression .)
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102


state 193

    (86) import_statement -> . SELFISH ; .
    SANDBOX         reduce using rule 86 (import_statement -> . SELFISH ; .)
    LIMPORT         reduce using rule 86 (import_statement -> . SELFISH ; .)
    .               reduce using rule 86 (import_statement -> . SELFISH ; .)
    IMPORT          reduce using rule 86 (import_statement -> . SELFISH ; .)
    ID              reduce using rule 86 (import_statement -> . SELFISH ; .)
    RETURN          reduce using rule 86 (import_statement -> . SELFISH ; .)
    DEL             reduce using rule 86 (import_statement -> . SELFISH ; .)
    !               reduce using rule 86 (import_statement -> . SELFISH ; .)
    FOR             reduce using rule 86 (import_statement -> . SELFISH ; .)
    DEBUG           reduce using rule 86 (import_statement -> . SELFISH ; .)
    SKIP            reduce using rule 86 (import_statement -> . SELFISH ; .)
    BREAK           reduce using rule 86 (import_statement -> . SELFISH ; .)
    @               reduce using rule 86 (import_statement -> . SELFISH ; .)
    [               reduce using rule 86 (import_statement -> . SELFISH ; .)
    WHILE           reduce using rule 86 (import_statement -> . SELFISH ; .)
    ?               reduce using rule 86 (import_statement -> . SELFISH ; .)
    #               reduce using rule 86 (import_statement -> . SELFISH ; .)
    NAMESPACE       reduce using rule 86 (import_statement -> . SELFISH ; .)
    CLASS           reduce using rule 86 (import_statement -> . SELFISH ; .)
    FUNC            reduce using rule 86 (import_statement -> . SELFISH ; .)
    PYTHON_CODE_EXEC reduce using rule 86 (import_statement -> . SELFISH ; .)
    PYTHON_CODE     reduce using rule 86 (import_statement -> . SELFISH ; .)
    IF              reduce using rule 86 (import_statement -> . SELFISH ; .)
    <               reduce using rule 86 (import_statement -> . SELFISH ; .)
    (               reduce using rule 86 (import_statement -> . SELFISH ; .)
    +               reduce using rule 86 (import_statement -> . SELFISH ; .)
    -               reduce using rule 86 (import_statement -> . SELFISH ; .)
    *               reduce using rule 86 (import_statement -> . SELFISH ; .)
    &               reduce using rule 86 (import_statement -> . SELFISH ; .)
    {               reduce using rule 86 (import_statement -> . SELFISH ; .)
    CHAR            reduce using rule 86 (import_statement -> . SELFISH ; .)
    STRING          reduce using rule 86 (import_statement -> . SELFISH ; .)
    FALSE           reduce using rule 86 (import_statement -> . SELFISH ; .)
    TRUE            reduce using rule 86 (import_statement -> . SELFISH ; .)
    FLOAT           reduce using rule 86 (import_statement -> . SELFISH ; .)
    HEX             reduce using rule 86 (import_statement -> . SELFISH ; .)
    INT             reduce using rule 86 (import_statement -> . SELFISH ; .)
    NULL            reduce using rule 86 (import_statement -> . SELFISH ; .)
    $end            reduce using rule 86 (import_statement -> . SELFISH ; .)
    }               reduce using rule 86 (import_statement -> . SELFISH ; .)


state 194

    (87) import_statement -> . GLOBAL ; .
    SANDBOX         reduce using rule 87 (import_statement -> . GLOBAL ; .)
    LIMPORT         reduce using rule 87 (import_statement -> . GLOBAL ; .)
    .               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    IMPORT          reduce using rule 87 (import_statement -> . GLOBAL ; .)
    ID              reduce using rule 87 (import_statement -> . GLOBAL ; .)
    RETURN          reduce using rule 87 (import_statement -> . GLOBAL ; .)
    DEL             reduce using rule 87 (import_statement -> . GLOBAL ; .)
    !               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    FOR             reduce using rule 87 (import_statement -> . GLOBAL ; .)
    DEBUG           reduce using rule 87 (import_statement -> . GLOBAL ; .)
    SKIP            reduce using rule 87 (import_statement -> . GLOBAL ; .)
    BREAK           reduce using rule 87 (import_statement -> . GLOBAL ; .)
    @               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    [               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    WHILE           reduce using rule 87 (import_statement -> . GLOBAL ; .)
    ?               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    #               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    NAMESPACE       reduce using rule 87 (import_statement -> . GLOBAL ; .)
    CLASS           reduce using rule 87 (import_statement -> . GLOBAL ; .)
    FUNC            reduce using rule 87 (import_statement -> . GLOBAL ; .)
    PYTHON_CODE_EXEC reduce using rule 87 (import_statement -> . GLOBAL ; .)
    PYTHON_CODE     reduce using rule 87 (import_statement -> . GLOBAL ; .)
    IF              reduce using rule 87 (import_statement -> . GLOBAL ; .)
    <               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    (               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    +               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    -               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    *               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    &               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    {               reduce using rule 87 (import_statement -> . GLOBAL ; .)
    CHAR            reduce using rule 87 (import_statement -> . GLOBAL ; .)
    STRING          reduce using rule 87 (import_statement -> . GLOBAL ; .)
    FALSE           reduce using rule 87 (import_statement -> . GLOBAL ; .)
    TRUE            reduce using rule 87 (import_statement -> . GLOBAL ; .)
    FLOAT           reduce using rule 87 (import_statement -> . GLOBAL ; .)
    HEX             reduce using rule 87 (import_statement -> . GLOBAL ; .)
    INT             reduce using rule 87 (import_statement -> . GLOBAL ; .)
    NULL            reduce using rule 87 (import_statement -> . GLOBAL ; .)
    $end            reduce using rule 87 (import_statement -> . GLOBAL ; .)
    }               reduce using rule 87 (import_statement -> . GLOBAL ; .)


state 195

    (27) function_call -> . ENV FROM . ID { program }
    ID              shift and go to state 259


state 196

    (28) function_call -> . ENV { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    program                        shift and go to state 260
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 197

    (88) import_statement -> IMPORT expression ; .
    SANDBOX         reduce using rule 88 (import_statement -> IMPORT expression ; .)
    LIMPORT         reduce using rule 88 (import_statement -> IMPORT expression ; .)
    .               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    IMPORT          reduce using rule 88 (import_statement -> IMPORT expression ; .)
    ID              reduce using rule 88 (import_statement -> IMPORT expression ; .)
    RETURN          reduce using rule 88 (import_statement -> IMPORT expression ; .)
    DEL             reduce using rule 88 (import_statement -> IMPORT expression ; .)
    !               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    FOR             reduce using rule 88 (import_statement -> IMPORT expression ; .)
    DEBUG           reduce using rule 88 (import_statement -> IMPORT expression ; .)
    SKIP            reduce using rule 88 (import_statement -> IMPORT expression ; .)
    BREAK           reduce using rule 88 (import_statement -> IMPORT expression ; .)
    @               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    [               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    WHILE           reduce using rule 88 (import_statement -> IMPORT expression ; .)
    ?               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    #               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    NAMESPACE       reduce using rule 88 (import_statement -> IMPORT expression ; .)
    CLASS           reduce using rule 88 (import_statement -> IMPORT expression ; .)
    FUNC            reduce using rule 88 (import_statement -> IMPORT expression ; .)
    PYTHON_CODE_EXEC reduce using rule 88 (import_statement -> IMPORT expression ; .)
    PYTHON_CODE     reduce using rule 88 (import_statement -> IMPORT expression ; .)
    IF              reduce using rule 88 (import_statement -> IMPORT expression ; .)
    <               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    (               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    +               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    -               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    *               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    &               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    {               reduce using rule 88 (import_statement -> IMPORT expression ; .)
    CHAR            reduce using rule 88 (import_statement -> IMPORT expression ; .)
    STRING          reduce using rule 88 (import_statement -> IMPORT expression ; .)
    FALSE           reduce using rule 88 (import_statement -> IMPORT expression ; .)
    TRUE            reduce using rule 88 (import_statement -> IMPORT expression ; .)
    FLOAT           reduce using rule 88 (import_statement -> IMPORT expression ; .)
    HEX             reduce using rule 88 (import_statement -> IMPORT expression ; .)
    INT             reduce using rule 88 (import_statement -> IMPORT expression ; .)
    NULL            reduce using rule 88 (import_statement -> IMPORT expression ; .)
    $end            reduce using rule 88 (import_statement -> IMPORT expression ; .)
    }               reduce using rule 88 (import_statement -> IMPORT expression ; .)


state 198

    (65) variable_operation -> get_index EQ_DIV expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 261
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 199

    (67) variable_operation -> get_index EQ_MOD expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 262
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 200

    (69) variable_operation -> get_index EQ_MUL expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 263
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 201

    (71) variable_operation -> get_index EQ_SUB expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 264
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 202

    (73) variable_operation -> get_index EQ_ADD expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 265
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 203

    (38) variable_assignment -> get_index = expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 266
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 204

    (42) variable_assignment -> ID ID = . [ HEX , ID ] ;
    (43) variable_assignment -> ID ID = . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    [               shift and go to state 267
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 268
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 205

    (126) expression -> ID ID [ . expression ]
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 269
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 206

    (66) variable_operation -> ID EQ_DIV expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 270
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 207

    (68) variable_operation -> ID EQ_MOD expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 271
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 208

    (70) variable_operation -> ID EQ_MUL expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 272
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 209

    (72) variable_operation -> ID EQ_SUB expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 273
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 210

    (74) variable_operation -> ID EQ_ADD expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 274
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 211

    (40) variable_assignment -> ID = expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 275
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 212

    (41) variable_assignment -> ID < ID . > ID = expression ;
    >               shift and go to state 276


state 213

    (44) variable_assignment -> ID - - . ;
    ;               shift and go to state 277


state 214

    (45) variable_assignment -> ID + + . ;
    ;               shift and go to state 278


state 215

    (31) function_call -> ID TARROW ID .
    ;               reduce using rule 31 (function_call -> ID TARROW ID .)
    [               reduce using rule 31 (function_call -> ID TARROW ID .)
    (               reduce using rule 31 (function_call -> ID TARROW ID .)
    :               reduce using rule 31 (function_call -> ID TARROW ID .)
    >               reduce using rule 31 (function_call -> ID TARROW ID .)
    <               reduce using rule 31 (function_call -> ID TARROW ID .)
    &               reduce using rule 31 (function_call -> ID TARROW ID .)
    ^               reduce using rule 31 (function_call -> ID TARROW ID .)
    |               reduce using rule 31 (function_call -> ID TARROW ID .)
    EQ_GREATER      reduce using rule 31 (function_call -> ID TARROW ID .)
    EQ_LESS         reduce using rule 31 (function_call -> ID TARROW ID .)
    NOT_EQEQ        reduce using rule 31 (function_call -> ID TARROW ID .)
    EQEQ            reduce using rule 31 (function_call -> ID TARROW ID .)
    %               reduce using rule 31 (function_call -> ID TARROW ID .)
    *               reduce using rule 31 (function_call -> ID TARROW ID .)
    /               reduce using rule 31 (function_call -> ID TARROW ID .)
    -               reduce using rule 31 (function_call -> ID TARROW ID .)
    +               reduce using rule 31 (function_call -> ID TARROW ID .)
    ,               reduce using rule 31 (function_call -> ID TARROW ID .)
    }               reduce using rule 31 (function_call -> ID TARROW ID .)
    ?               reduce using rule 31 (function_call -> ID TARROW ID .)
    IN              reduce using rule 31 (function_call -> ID TARROW ID .)
    ]               reduce using rule 31 (function_call -> ID TARROW ID .)
    )               reduce using rule 31 (function_call -> ID TARROW ID .)
    {               reduce using rule 31 (function_call -> ID TARROW ID .)
    SANDBOX         reduce using rule 31 (function_call -> ID TARROW ID .)
    LIMPORT         reduce using rule 31 (function_call -> ID TARROW ID .)
    .               reduce using rule 31 (function_call -> ID TARROW ID .)
    IMPORT          reduce using rule 31 (function_call -> ID TARROW ID .)
    ID              reduce using rule 31 (function_call -> ID TARROW ID .)
    RETURN          reduce using rule 31 (function_call -> ID TARROW ID .)
    DEL             reduce using rule 31 (function_call -> ID TARROW ID .)
    !               reduce using rule 31 (function_call -> ID TARROW ID .)
    FOR             reduce using rule 31 (function_call -> ID TARROW ID .)
    DEBUG           reduce using rule 31 (function_call -> ID TARROW ID .)
    SKIP            reduce using rule 31 (function_call -> ID TARROW ID .)
    BREAK           reduce using rule 31 (function_call -> ID TARROW ID .)
    @               reduce using rule 31 (function_call -> ID TARROW ID .)
    WHILE           reduce using rule 31 (function_call -> ID TARROW ID .)
    #               reduce using rule 31 (function_call -> ID TARROW ID .)
    NAMESPACE       reduce using rule 31 (function_call -> ID TARROW ID .)
    CLASS           reduce using rule 31 (function_call -> ID TARROW ID .)
    FUNC            reduce using rule 31 (function_call -> ID TARROW ID .)
    PYTHON_CODE_EXEC reduce using rule 31 (function_call -> ID TARROW ID .)
    PYTHON_CODE     reduce using rule 31 (function_call -> ID TARROW ID .)
    IF              reduce using rule 31 (function_call -> ID TARROW ID .)
    CHAR            reduce using rule 31 (function_call -> ID TARROW ID .)
    STRING          reduce using rule 31 (function_call -> ID TARROW ID .)
    FALSE           reduce using rule 31 (function_call -> ID TARROW ID .)
    TRUE            reduce using rule 31 (function_call -> ID TARROW ID .)
    FLOAT           reduce using rule 31 (function_call -> ID TARROW ID .)
    HEX             reduce using rule 31 (function_call -> ID TARROW ID .)
    INT             reduce using rule 31 (function_call -> ID TARROW ID .)
    NULL            reduce using rule 31 (function_call -> ID TARROW ID .)
    $end            reduce using rule 31 (function_call -> ID TARROW ID .)


state 216

    (26) return_statement -> RETURN expression ; .
    SANDBOX         reduce using rule 26 (return_statement -> RETURN expression ; .)
    LIMPORT         reduce using rule 26 (return_statement -> RETURN expression ; .)
    .               reduce using rule 26 (return_statement -> RETURN expression ; .)
    IMPORT          reduce using rule 26 (return_statement -> RETURN expression ; .)
    ID              reduce using rule 26 (return_statement -> RETURN expression ; .)
    RETURN          reduce using rule 26 (return_statement -> RETURN expression ; .)
    DEL             reduce using rule 26 (return_statement -> RETURN expression ; .)
    !               reduce using rule 26 (return_statement -> RETURN expression ; .)
    FOR             reduce using rule 26 (return_statement -> RETURN expression ; .)
    DEBUG           reduce using rule 26 (return_statement -> RETURN expression ; .)
    SKIP            reduce using rule 26 (return_statement -> RETURN expression ; .)
    BREAK           reduce using rule 26 (return_statement -> RETURN expression ; .)
    @               reduce using rule 26 (return_statement -> RETURN expression ; .)
    [               reduce using rule 26 (return_statement -> RETURN expression ; .)
    WHILE           reduce using rule 26 (return_statement -> RETURN expression ; .)
    ?               reduce using rule 26 (return_statement -> RETURN expression ; .)
    #               reduce using rule 26 (return_statement -> RETURN expression ; .)
    NAMESPACE       reduce using rule 26 (return_statement -> RETURN expression ; .)
    CLASS           reduce using rule 26 (return_statement -> RETURN expression ; .)
    FUNC            reduce using rule 26 (return_statement -> RETURN expression ; .)
    PYTHON_CODE_EXEC reduce using rule 26 (return_statement -> RETURN expression ; .)
    PYTHON_CODE     reduce using rule 26 (return_statement -> RETURN expression ; .)
    IF              reduce using rule 26 (return_statement -> RETURN expression ; .)
    <               reduce using rule 26 (return_statement -> RETURN expression ; .)
    (               reduce using rule 26 (return_statement -> RETURN expression ; .)
    +               reduce using rule 26 (return_statement -> RETURN expression ; .)
    -               reduce using rule 26 (return_statement -> RETURN expression ; .)
    *               reduce using rule 26 (return_statement -> RETURN expression ; .)
    &               reduce using rule 26 (return_statement -> RETURN expression ; .)
    {               reduce using rule 26 (return_statement -> RETURN expression ; .)
    CHAR            reduce using rule 26 (return_statement -> RETURN expression ; .)
    STRING          reduce using rule 26 (return_statement -> RETURN expression ; .)
    FALSE           reduce using rule 26 (return_statement -> RETURN expression ; .)
    TRUE            reduce using rule 26 (return_statement -> RETURN expression ; .)
    FLOAT           reduce using rule 26 (return_statement -> RETURN expression ; .)
    HEX             reduce using rule 26 (return_statement -> RETURN expression ; .)
    INT             reduce using rule 26 (return_statement -> RETURN expression ; .)
    NULL            reduce using rule 26 (return_statement -> RETURN expression ; .)
    $end            reduce using rule 26 (return_statement -> RETURN expression ; .)
    }               reduce using rule 26 (return_statement -> RETURN expression ; .)


state 217

    (85) delete_statement -> DEL ID ; .
    SANDBOX         reduce using rule 85 (delete_statement -> DEL ID ; .)
    LIMPORT         reduce using rule 85 (delete_statement -> DEL ID ; .)
    .               reduce using rule 85 (delete_statement -> DEL ID ; .)
    IMPORT          reduce using rule 85 (delete_statement -> DEL ID ; .)
    ID              reduce using rule 85 (delete_statement -> DEL ID ; .)
    RETURN          reduce using rule 85 (delete_statement -> DEL ID ; .)
    DEL             reduce using rule 85 (delete_statement -> DEL ID ; .)
    !               reduce using rule 85 (delete_statement -> DEL ID ; .)
    FOR             reduce using rule 85 (delete_statement -> DEL ID ; .)
    DEBUG           reduce using rule 85 (delete_statement -> DEL ID ; .)
    SKIP            reduce using rule 85 (delete_statement -> DEL ID ; .)
    BREAK           reduce using rule 85 (delete_statement -> DEL ID ; .)
    @               reduce using rule 85 (delete_statement -> DEL ID ; .)
    [               reduce using rule 85 (delete_statement -> DEL ID ; .)
    WHILE           reduce using rule 85 (delete_statement -> DEL ID ; .)
    ?               reduce using rule 85 (delete_statement -> DEL ID ; .)
    #               reduce using rule 85 (delete_statement -> DEL ID ; .)
    NAMESPACE       reduce using rule 85 (delete_statement -> DEL ID ; .)
    CLASS           reduce using rule 85 (delete_statement -> DEL ID ; .)
    FUNC            reduce using rule 85 (delete_statement -> DEL ID ; .)
    PYTHON_CODE_EXEC reduce using rule 85 (delete_statement -> DEL ID ; .)
    PYTHON_CODE     reduce using rule 85 (delete_statement -> DEL ID ; .)
    IF              reduce using rule 85 (delete_statement -> DEL ID ; .)
    <               reduce using rule 85 (delete_statement -> DEL ID ; .)
    (               reduce using rule 85 (delete_statement -> DEL ID ; .)
    +               reduce using rule 85 (delete_statement -> DEL ID ; .)
    -               reduce using rule 85 (delete_statement -> DEL ID ; .)
    *               reduce using rule 85 (delete_statement -> DEL ID ; .)
    &               reduce using rule 85 (delete_statement -> DEL ID ; .)
    {               reduce using rule 85 (delete_statement -> DEL ID ; .)
    CHAR            reduce using rule 85 (delete_statement -> DEL ID ; .)
    STRING          reduce using rule 85 (delete_statement -> DEL ID ; .)
    FALSE           reduce using rule 85 (delete_statement -> DEL ID ; .)
    TRUE            reduce using rule 85 (delete_statement -> DEL ID ; .)
    FLOAT           reduce using rule 85 (delete_statement -> DEL ID ; .)
    HEX             reduce using rule 85 (delete_statement -> DEL ID ; .)
    INT             reduce using rule 85 (delete_statement -> DEL ID ; .)
    NULL            reduce using rule 85 (delete_statement -> DEL ID ; .)
    $end            reduce using rule 85 (delete_statement -> DEL ID ; .)
    }               reduce using rule 85 (delete_statement -> DEL ID ; .)


state 218

    (58) for_loop -> ! FOR expression . IN expression { program }
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    IN              shift and go to state 279
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 219

    (148) class_attribute -> ! expression ? . ID
    ID              shift and go to state 280


state 220

    (59) for_loop -> FOR expression IN . expression { program }
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 281
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 221

    (39) variable_assignment -> @ ID ID . = expression ;
    =               shift and go to state 282


state 222

    (30) function_call -> < ID > . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 283
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 223

    (46) variable_assignment -> [ HEX , . ID ] = expression ;
    ID              shift and go to state 284


state 224

    (132) _list -> [ positional_args , . ]
    (62) positional_args -> positional_args , . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    ]               shift and go to state 285
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 247
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 225

    (133) _list -> [ positional_args ] .
    [               reduce using rule 133 (_list -> [ positional_args ] .)
    (               reduce using rule 133 (_list -> [ positional_args ] .)
    :               reduce using rule 133 (_list -> [ positional_args ] .)
    >               reduce using rule 133 (_list -> [ positional_args ] .)
    <               reduce using rule 133 (_list -> [ positional_args ] .)
    &               reduce using rule 133 (_list -> [ positional_args ] .)
    ^               reduce using rule 133 (_list -> [ positional_args ] .)
    |               reduce using rule 133 (_list -> [ positional_args ] .)
    EQ_GREATER      reduce using rule 133 (_list -> [ positional_args ] .)
    EQ_LESS         reduce using rule 133 (_list -> [ positional_args ] .)
    NOT_EQEQ        reduce using rule 133 (_list -> [ positional_args ] .)
    EQEQ            reduce using rule 133 (_list -> [ positional_args ] .)
    %               reduce using rule 133 (_list -> [ positional_args ] .)
    *               reduce using rule 133 (_list -> [ positional_args ] .)
    /               reduce using rule 133 (_list -> [ positional_args ] .)
    -               reduce using rule 133 (_list -> [ positional_args ] .)
    +               reduce using rule 133 (_list -> [ positional_args ] .)
    ,               reduce using rule 133 (_list -> [ positional_args ] .)
    }               reduce using rule 133 (_list -> [ positional_args ] .)
    ;               reduce using rule 133 (_list -> [ positional_args ] .)
    ?               reduce using rule 133 (_list -> [ positional_args ] .)
    IN              reduce using rule 133 (_list -> [ positional_args ] .)
    ]               reduce using rule 133 (_list -> [ positional_args ] .)
    )               reduce using rule 133 (_list -> [ positional_args ] .)
    {               reduce using rule 133 (_list -> [ positional_args ] .)
    SANDBOX         reduce using rule 133 (_list -> [ positional_args ] .)
    LIMPORT         reduce using rule 133 (_list -> [ positional_args ] .)
    .               reduce using rule 133 (_list -> [ positional_args ] .)
    IMPORT          reduce using rule 133 (_list -> [ positional_args ] .)
    ID              reduce using rule 133 (_list -> [ positional_args ] .)
    RETURN          reduce using rule 133 (_list -> [ positional_args ] .)
    DEL             reduce using rule 133 (_list -> [ positional_args ] .)
    !               reduce using rule 133 (_list -> [ positional_args ] .)
    FOR             reduce using rule 133 (_list -> [ positional_args ] .)
    DEBUG           reduce using rule 133 (_list -> [ positional_args ] .)
    SKIP            reduce using rule 133 (_list -> [ positional_args ] .)
    BREAK           reduce using rule 133 (_list -> [ positional_args ] .)
    @               reduce using rule 133 (_list -> [ positional_args ] .)
    WHILE           reduce using rule 133 (_list -> [ positional_args ] .)
    #               reduce using rule 133 (_list -> [ positional_args ] .)
    NAMESPACE       reduce using rule 133 (_list -> [ positional_args ] .)
    CLASS           reduce using rule 133 (_list -> [ positional_args ] .)
    FUNC            reduce using rule 133 (_list -> [ positional_args ] .)
    PYTHON_CODE_EXEC reduce using rule 133 (_list -> [ positional_args ] .)
    PYTHON_CODE     reduce using rule 133 (_list -> [ positional_args ] .)
    IF              reduce using rule 133 (_list -> [ positional_args ] .)
    CHAR            reduce using rule 133 (_list -> [ positional_args ] .)
    STRING          reduce using rule 133 (_list -> [ positional_args ] .)
    FALSE           reduce using rule 133 (_list -> [ positional_args ] .)
    TRUE            reduce using rule 133 (_list -> [ positional_args ] .)
    FLOAT           reduce using rule 133 (_list -> [ positional_args ] .)
    HEX             reduce using rule 133 (_list -> [ positional_args ] .)
    INT             reduce using rule 133 (_list -> [ positional_args ] .)
    NULL            reduce using rule 133 (_list -> [ positional_args ] .)
    $end            reduce using rule 133 (_list -> [ positional_args ] .)


state 226

    (60) while_loop -> WHILE ( expression . ) { program }
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    )               shift and go to state 286
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 227

    (104) expression -> ( expression ) .
    [               reduce using rule 104 (expression -> ( expression ) .)
    (               reduce using rule 104 (expression -> ( expression ) .)
    :               reduce using rule 104 (expression -> ( expression ) .)
    >               reduce using rule 104 (expression -> ( expression ) .)
    <               reduce using rule 104 (expression -> ( expression ) .)
    &               reduce using rule 104 (expression -> ( expression ) .)
    ^               reduce using rule 104 (expression -> ( expression ) .)
    |               reduce using rule 104 (expression -> ( expression ) .)
    EQ_GREATER      reduce using rule 104 (expression -> ( expression ) .)
    EQ_LESS         reduce using rule 104 (expression -> ( expression ) .)
    NOT_EQEQ        reduce using rule 104 (expression -> ( expression ) .)
    EQEQ            reduce using rule 104 (expression -> ( expression ) .)
    %               reduce using rule 104 (expression -> ( expression ) .)
    *               reduce using rule 104 (expression -> ( expression ) .)
    /               reduce using rule 104 (expression -> ( expression ) .)
    -               reduce using rule 104 (expression -> ( expression ) .)
    +               reduce using rule 104 (expression -> ( expression ) .)
    ,               reduce using rule 104 (expression -> ( expression ) .)
    }               reduce using rule 104 (expression -> ( expression ) .)
    ;               reduce using rule 104 (expression -> ( expression ) .)
    ?               reduce using rule 104 (expression -> ( expression ) .)
    IN              reduce using rule 104 (expression -> ( expression ) .)
    ]               reduce using rule 104 (expression -> ( expression ) .)
    )               reduce using rule 104 (expression -> ( expression ) .)
    {               reduce using rule 104 (expression -> ( expression ) .)
    SANDBOX         reduce using rule 104 (expression -> ( expression ) .)
    LIMPORT         reduce using rule 104 (expression -> ( expression ) .)
    .               reduce using rule 104 (expression -> ( expression ) .)
    IMPORT          reduce using rule 104 (expression -> ( expression ) .)
    ID              reduce using rule 104 (expression -> ( expression ) .)
    RETURN          reduce using rule 104 (expression -> ( expression ) .)
    DEL             reduce using rule 104 (expression -> ( expression ) .)
    !               reduce using rule 104 (expression -> ( expression ) .)
    FOR             reduce using rule 104 (expression -> ( expression ) .)
    DEBUG           reduce using rule 104 (expression -> ( expression ) .)
    SKIP            reduce using rule 104 (expression -> ( expression ) .)
    BREAK           reduce using rule 104 (expression -> ( expression ) .)
    @               reduce using rule 104 (expression -> ( expression ) .)
    WHILE           reduce using rule 104 (expression -> ( expression ) .)
    #               reduce using rule 104 (expression -> ( expression ) .)
    NAMESPACE       reduce using rule 104 (expression -> ( expression ) .)
    CLASS           reduce using rule 104 (expression -> ( expression ) .)
    FUNC            reduce using rule 104 (expression -> ( expression ) .)
    PYTHON_CODE_EXEC reduce using rule 104 (expression -> ( expression ) .)
    PYTHON_CODE     reduce using rule 104 (expression -> ( expression ) .)
    IF              reduce using rule 104 (expression -> ( expression ) .)
    CHAR            reduce using rule 104 (expression -> ( expression ) .)
    STRING          reduce using rule 104 (expression -> ( expression ) .)
    FALSE           reduce using rule 104 (expression -> ( expression ) .)
    TRUE            reduce using rule 104 (expression -> ( expression ) .)
    FLOAT           reduce using rule 104 (expression -> ( expression ) .)
    HEX             reduce using rule 104 (expression -> ( expression ) .)
    INT             reduce using rule 104 (expression -> ( expression ) .)
    NULL            reduce using rule 104 (expression -> ( expression ) .)
    $end            reduce using rule 104 (expression -> ( expression ) .)


state 228

    (136) _numpy -> ( expression , . )
    (139) items -> expression , . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    )               shift and go to state 288
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 287
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 229

    (134) _numpy -> ( , ) .
    [               reduce using rule 134 (_numpy -> ( , ) .)
    (               reduce using rule 134 (_numpy -> ( , ) .)
    :               reduce using rule 134 (_numpy -> ( , ) .)
    >               reduce using rule 134 (_numpy -> ( , ) .)
    <               reduce using rule 134 (_numpy -> ( , ) .)
    &               reduce using rule 134 (_numpy -> ( , ) .)
    ^               reduce using rule 134 (_numpy -> ( , ) .)
    |               reduce using rule 134 (_numpy -> ( , ) .)
    EQ_GREATER      reduce using rule 134 (_numpy -> ( , ) .)
    EQ_LESS         reduce using rule 134 (_numpy -> ( , ) .)
    NOT_EQEQ        reduce using rule 134 (_numpy -> ( , ) .)
    EQEQ            reduce using rule 134 (_numpy -> ( , ) .)
    %               reduce using rule 134 (_numpy -> ( , ) .)
    *               reduce using rule 134 (_numpy -> ( , ) .)
    /               reduce using rule 134 (_numpy -> ( , ) .)
    -               reduce using rule 134 (_numpy -> ( , ) .)
    +               reduce using rule 134 (_numpy -> ( , ) .)
    ,               reduce using rule 134 (_numpy -> ( , ) .)
    }               reduce using rule 134 (_numpy -> ( , ) .)
    ;               reduce using rule 134 (_numpy -> ( , ) .)
    ?               reduce using rule 134 (_numpy -> ( , ) .)
    IN              reduce using rule 134 (_numpy -> ( , ) .)
    ]               reduce using rule 134 (_numpy -> ( , ) .)
    )               reduce using rule 134 (_numpy -> ( , ) .)
    {               reduce using rule 134 (_numpy -> ( , ) .)
    SANDBOX         reduce using rule 134 (_numpy -> ( , ) .)
    LIMPORT         reduce using rule 134 (_numpy -> ( , ) .)
    .               reduce using rule 134 (_numpy -> ( , ) .)
    IMPORT          reduce using rule 134 (_numpy -> ( , ) .)
    ID              reduce using rule 134 (_numpy -> ( , ) .)
    RETURN          reduce using rule 134 (_numpy -> ( , ) .)
    DEL             reduce using rule 134 (_numpy -> ( , ) .)
    !               reduce using rule 134 (_numpy -> ( , ) .)
    FOR             reduce using rule 134 (_numpy -> ( , ) .)
    DEBUG           reduce using rule 134 (_numpy -> ( , ) .)
    SKIP            reduce using rule 134 (_numpy -> ( , ) .)
    BREAK           reduce using rule 134 (_numpy -> ( , ) .)
    @               reduce using rule 134 (_numpy -> ( , ) .)
    WHILE           reduce using rule 134 (_numpy -> ( , ) .)
    #               reduce using rule 134 (_numpy -> ( , ) .)
    NAMESPACE       reduce using rule 134 (_numpy -> ( , ) .)
    CLASS           reduce using rule 134 (_numpy -> ( , ) .)
    FUNC            reduce using rule 134 (_numpy -> ( , ) .)
    PYTHON_CODE_EXEC reduce using rule 134 (_numpy -> ( , ) .)
    PYTHON_CODE     reduce using rule 134 (_numpy -> ( , ) .)
    IF              reduce using rule 134 (_numpy -> ( , ) .)
    CHAR            reduce using rule 134 (_numpy -> ( , ) .)
    STRING          reduce using rule 134 (_numpy -> ( , ) .)
    FALSE           reduce using rule 134 (_numpy -> ( , ) .)
    TRUE            reduce using rule 134 (_numpy -> ( , ) .)
    FLOAT           reduce using rule 134 (_numpy -> ( , ) .)
    HEX             reduce using rule 134 (_numpy -> ( , ) .)
    INT             reduce using rule 134 (_numpy -> ( , ) .)
    NULL            reduce using rule 134 (_numpy -> ( , ) .)
    $end            reduce using rule 134 (_numpy -> ( , ) .)


state 230

    (137) _numpy -> ( items , . )
    (140) items -> items , . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    )               shift and go to state 289
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 290
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 231

    (138) _numpy -> ( items ) .
    [               reduce using rule 138 (_numpy -> ( items ) .)
    (               reduce using rule 138 (_numpy -> ( items ) .)
    :               reduce using rule 138 (_numpy -> ( items ) .)
    >               reduce using rule 138 (_numpy -> ( items ) .)
    <               reduce using rule 138 (_numpy -> ( items ) .)
    &               reduce using rule 138 (_numpy -> ( items ) .)
    ^               reduce using rule 138 (_numpy -> ( items ) .)
    |               reduce using rule 138 (_numpy -> ( items ) .)
    EQ_GREATER      reduce using rule 138 (_numpy -> ( items ) .)
    EQ_LESS         reduce using rule 138 (_numpy -> ( items ) .)
    NOT_EQEQ        reduce using rule 138 (_numpy -> ( items ) .)
    EQEQ            reduce using rule 138 (_numpy -> ( items ) .)
    %               reduce using rule 138 (_numpy -> ( items ) .)
    *               reduce using rule 138 (_numpy -> ( items ) .)
    /               reduce using rule 138 (_numpy -> ( items ) .)
    -               reduce using rule 138 (_numpy -> ( items ) .)
    +               reduce using rule 138 (_numpy -> ( items ) .)
    ,               reduce using rule 138 (_numpy -> ( items ) .)
    }               reduce using rule 138 (_numpy -> ( items ) .)
    ;               reduce using rule 138 (_numpy -> ( items ) .)
    ?               reduce using rule 138 (_numpy -> ( items ) .)
    IN              reduce using rule 138 (_numpy -> ( items ) .)
    ]               reduce using rule 138 (_numpy -> ( items ) .)
    )               reduce using rule 138 (_numpy -> ( items ) .)
    {               reduce using rule 138 (_numpy -> ( items ) .)
    SANDBOX         reduce using rule 138 (_numpy -> ( items ) .)
    LIMPORT         reduce using rule 138 (_numpy -> ( items ) .)
    .               reduce using rule 138 (_numpy -> ( items ) .)
    IMPORT          reduce using rule 138 (_numpy -> ( items ) .)
    ID              reduce using rule 138 (_numpy -> ( items ) .)
    RETURN          reduce using rule 138 (_numpy -> ( items ) .)
    DEL             reduce using rule 138 (_numpy -> ( items ) .)
    !               reduce using rule 138 (_numpy -> ( items ) .)
    FOR             reduce using rule 138 (_numpy -> ( items ) .)
    DEBUG           reduce using rule 138 (_numpy -> ( items ) .)
    SKIP            reduce using rule 138 (_numpy -> ( items ) .)
    BREAK           reduce using rule 138 (_numpy -> ( items ) .)
    @               reduce using rule 138 (_numpy -> ( items ) .)
    WHILE           reduce using rule 138 (_numpy -> ( items ) .)
    #               reduce using rule 138 (_numpy -> ( items ) .)
    NAMESPACE       reduce using rule 138 (_numpy -> ( items ) .)
    CLASS           reduce using rule 138 (_numpy -> ( items ) .)
    FUNC            reduce using rule 138 (_numpy -> ( items ) .)
    PYTHON_CODE_EXEC reduce using rule 138 (_numpy -> ( items ) .)
    PYTHON_CODE     reduce using rule 138 (_numpy -> ( items ) .)
    IF              reduce using rule 138 (_numpy -> ( items ) .)
    CHAR            reduce using rule 138 (_numpy -> ( items ) .)
    STRING          reduce using rule 138 (_numpy -> ( items ) .)
    FALSE           reduce using rule 138 (_numpy -> ( items ) .)
    TRUE            reduce using rule 138 (_numpy -> ( items ) .)
    FLOAT           reduce using rule 138 (_numpy -> ( items ) .)
    HEX             reduce using rule 138 (_numpy -> ( items ) .)
    INT             reduce using rule 138 (_numpy -> ( items ) .)
    NULL            reduce using rule 138 (_numpy -> ( items ) .)
    $end            reduce using rule 138 (_numpy -> ( items ) .)


state 232

    (77) conditional -> if_statement else_if_loop else_statement .
    SANDBOX         reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    LIMPORT         reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    .               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    IMPORT          reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    ID              reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    RETURN          reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    DEL             reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    !               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    FOR             reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    DEBUG           reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    SKIP            reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    BREAK           reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    @               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    [               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    WHILE           reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    ?               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    #               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    NAMESPACE       reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    CLASS           reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    FUNC            reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    PYTHON_CODE_EXEC reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    PYTHON_CODE     reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    IF              reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    <               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    (               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    +               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    -               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    *               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    &               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    {               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    CHAR            reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    STRING          reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    FALSE           reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    TRUE            reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    FLOAT           reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    HEX             reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    INT             reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    NULL            reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    $end            reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)
    }               reduce using rule 77 (conditional -> if_statement else_if_loop else_statement .)


state 233

    (82) else_if_loop -> else_if_loop else_if_statement .
    ELSE            reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    SANDBOX         reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    LIMPORT         reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    .               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    IMPORT          reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    ID              reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    RETURN          reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    DEL             reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    !               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    FOR             reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    DEBUG           reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    SKIP            reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    BREAK           reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    @               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    [               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    WHILE           reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    ?               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    #               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    NAMESPACE       reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    CLASS           reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    FUNC            reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    PYTHON_CODE_EXEC reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    PYTHON_CODE     reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    IF              reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    <               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    (               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    +               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    -               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    *               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    &               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    {               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    CHAR            reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    STRING          reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    FALSE           reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    TRUE            reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    FLOAT           reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    HEX             reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    INT             reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    NULL            reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    $end            reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)
    }               reduce using rule 82 (else_if_loop -> else_if_loop else_if_statement .)


state 234

    (84) else_statement -> ELSE { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    program                        shift and go to state 291
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 235

    (83) else_if_statement -> ELSE IF . ( expression ) { program }
    (               shift and go to state 292


state 236

    (54) class_declaration -> # EMBED [ . ID , ID ] string
    (55) class_declaration -> # EMBED [ . ID ] string
    ID              shift and go to state 293


state 237

    (33) function_call -> # ID expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for : resolved as shift
    ;               reduce using rule 33 (function_call -> # ID expression .)
    ,               reduce using rule 33 (function_call -> # ID expression .)
    }               reduce using rule 33 (function_call -> # ID expression .)
    ?               reduce using rule 33 (function_call -> # ID expression .)
    IN              reduce using rule 33 (function_call -> # ID expression .)
    ]               reduce using rule 33 (function_call -> # ID expression .)
    )               reduce using rule 33 (function_call -> # ID expression .)
    {               reduce using rule 33 (function_call -> # ID expression .)
    SANDBOX         reduce using rule 33 (function_call -> # ID expression .)
    LIMPORT         reduce using rule 33 (function_call -> # ID expression .)
    .               reduce using rule 33 (function_call -> # ID expression .)
    IMPORT          reduce using rule 33 (function_call -> # ID expression .)
    ID              reduce using rule 33 (function_call -> # ID expression .)
    RETURN          reduce using rule 33 (function_call -> # ID expression .)
    DEL             reduce using rule 33 (function_call -> # ID expression .)
    !               reduce using rule 33 (function_call -> # ID expression .)
    FOR             reduce using rule 33 (function_call -> # ID expression .)
    DEBUG           reduce using rule 33 (function_call -> # ID expression .)
    SKIP            reduce using rule 33 (function_call -> # ID expression .)
    BREAK           reduce using rule 33 (function_call -> # ID expression .)
    @               reduce using rule 33 (function_call -> # ID expression .)
    WHILE           reduce using rule 33 (function_call -> # ID expression .)
    #               reduce using rule 33 (function_call -> # ID expression .)
    NAMESPACE       reduce using rule 33 (function_call -> # ID expression .)
    CLASS           reduce using rule 33 (function_call -> # ID expression .)
    FUNC            reduce using rule 33 (function_call -> # ID expression .)
    PYTHON_CODE_EXEC reduce using rule 33 (function_call -> # ID expression .)
    PYTHON_CODE     reduce using rule 33 (function_call -> # ID expression .)
    IF              reduce using rule 33 (function_call -> # ID expression .)
    CHAR            reduce using rule 33 (function_call -> # ID expression .)
    STRING          reduce using rule 33 (function_call -> # ID expression .)
    FALSE           reduce using rule 33 (function_call -> # ID expression .)
    TRUE            reduce using rule 33 (function_call -> # ID expression .)
    FLOAT           reduce using rule 33 (function_call -> # ID expression .)
    HEX             reduce using rule 33 (function_call -> # ID expression .)
    INT             reduce using rule 33 (function_call -> # ID expression .)
    NULL            reduce using rule 33 (function_call -> # ID expression .)
    $end            reduce using rule 33 (function_call -> # ID expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 238

    (32) function_call -> # DEPENDS expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for EQ_GREATER resolved as shift
  ! shift/reduce conflict for EQ_LESS resolved as shift
  ! shift/reduce conflict for NOT_EQEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for : resolved as shift
    ;               reduce using rule 32 (function_call -> # DEPENDS expression .)
    ,               reduce using rule 32 (function_call -> # DEPENDS expression .)
    }               reduce using rule 32 (function_call -> # DEPENDS expression .)
    ?               reduce using rule 32 (function_call -> # DEPENDS expression .)
    IN              reduce using rule 32 (function_call -> # DEPENDS expression .)
    ]               reduce using rule 32 (function_call -> # DEPENDS expression .)
    )               reduce using rule 32 (function_call -> # DEPENDS expression .)
    {               reduce using rule 32 (function_call -> # DEPENDS expression .)
    SANDBOX         reduce using rule 32 (function_call -> # DEPENDS expression .)
    LIMPORT         reduce using rule 32 (function_call -> # DEPENDS expression .)
    .               reduce using rule 32 (function_call -> # DEPENDS expression .)
    IMPORT          reduce using rule 32 (function_call -> # DEPENDS expression .)
    ID              reduce using rule 32 (function_call -> # DEPENDS expression .)
    RETURN          reduce using rule 32 (function_call -> # DEPENDS expression .)
    DEL             reduce using rule 32 (function_call -> # DEPENDS expression .)
    !               reduce using rule 32 (function_call -> # DEPENDS expression .)
    FOR             reduce using rule 32 (function_call -> # DEPENDS expression .)
    DEBUG           reduce using rule 32 (function_call -> # DEPENDS expression .)
    SKIP            reduce using rule 32 (function_call -> # DEPENDS expression .)
    BREAK           reduce using rule 32 (function_call -> # DEPENDS expression .)
    @               reduce using rule 32 (function_call -> # DEPENDS expression .)
    WHILE           reduce using rule 32 (function_call -> # DEPENDS expression .)
    #               reduce using rule 32 (function_call -> # DEPENDS expression .)
    NAMESPACE       reduce using rule 32 (function_call -> # DEPENDS expression .)
    CLASS           reduce using rule 32 (function_call -> # DEPENDS expression .)
    FUNC            reduce using rule 32 (function_call -> # DEPENDS expression .)
    PYTHON_CODE_EXEC reduce using rule 32 (function_call -> # DEPENDS expression .)
    PYTHON_CODE     reduce using rule 32 (function_call -> # DEPENDS expression .)
    IF              reduce using rule 32 (function_call -> # DEPENDS expression .)
    CHAR            reduce using rule 32 (function_call -> # DEPENDS expression .)
    STRING          reduce using rule 32 (function_call -> # DEPENDS expression .)
    FALSE           reduce using rule 32 (function_call -> # DEPENDS expression .)
    TRUE            reduce using rule 32 (function_call -> # DEPENDS expression .)
    FLOAT           reduce using rule 32 (function_call -> # DEPENDS expression .)
    HEX             reduce using rule 32 (function_call -> # DEPENDS expression .)
    INT             reduce using rule 32 (function_call -> # DEPENDS expression .)
    NULL            reduce using rule 32 (function_call -> # DEPENDS expression .)
    $end            reduce using rule 32 (function_call -> # DEPENDS expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 239

    (56) class_declaration -> NAMESPACE ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    program                        shift and go to state 294
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 240

    (57) class_declaration -> CLASS ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    program                        shift and go to state 295
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 241

    (47) function_declaration -> FUNC ID ( . empty ) expression { program }
    (50) function_declaration -> FUNC ID ( . function_arguments ) expression { program }
    (155) empty -> .
    (51) function_arguments -> . kwargs
    (52) function_arguments -> . positional_args , kwargs
    (53) function_arguments -> . positional_args
    (63) kwargs -> . ID = expression
    (64) kwargs -> . kwargs , id = expression
    (61) positional_args -> . expression
    (62) positional_args -> . positional_args , expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    )               reduce using rule 155 (empty -> .)
    ID              shift and go to state 175
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    empty                          shift and go to state 296
    expression                     shift and go to state 137
    function_arguments             shift and go to state 297
    kwargs                         shift and go to state 173
    positional_args                shift and go to state 174
    id                             shift and go to state 59
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 242

    (48) function_declaration -> FUNC ID COLON_COLON . ID ( empty ) { program } TARROW expression
    (49) function_declaration -> FUNC ID COLON_COLON . ID ( function_arguments ) { program } TARROW expression
    ID              shift and go to state 298


state 243

    (80) if_statement -> IF ( expression . ) { program }
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    )               shift and go to state 299
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 244

    (19) sandbox -> SANDBOX { program } .
    SANDBOX         reduce using rule 19 (sandbox -> SANDBOX { program } .)
    LIMPORT         reduce using rule 19 (sandbox -> SANDBOX { program } .)
    .               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    IMPORT          reduce using rule 19 (sandbox -> SANDBOX { program } .)
    ID              reduce using rule 19 (sandbox -> SANDBOX { program } .)
    RETURN          reduce using rule 19 (sandbox -> SANDBOX { program } .)
    DEL             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    !               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FOR             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    DEBUG           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    SKIP            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    BREAK           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    @               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    [               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    WHILE           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    ?               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    #               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    NAMESPACE       reduce using rule 19 (sandbox -> SANDBOX { program } .)
    CLASS           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FUNC            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    PYTHON_CODE_EXEC reduce using rule 19 (sandbox -> SANDBOX { program } .)
    PYTHON_CODE     reduce using rule 19 (sandbox -> SANDBOX { program } .)
    IF              reduce using rule 19 (sandbox -> SANDBOX { program } .)
    <               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    (               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    +               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    -               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    *               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    &               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    {               reduce using rule 19 (sandbox -> SANDBOX { program } .)
    CHAR            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    STRING          reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FALSE           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    TRUE            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    FLOAT           reduce using rule 19 (sandbox -> SANDBOX { program } .)
    HEX             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    INT             reduce using rule 19 (sandbox -> SANDBOX { program } .)
    NULL            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    $end            reduce using rule 19 (sandbox -> SANDBOX { program } .)
    }               reduce using rule 19 (sandbox -> SANDBOX { program } .)


state 245

    (152) assoc_array_items -> assoc_array_items , expression . : expression
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    :               shift and go to state 300
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89


state 246

    (130) _tuple -> { positional_args , } .
    [               reduce using rule 130 (_tuple -> { positional_args , } .)
    (               reduce using rule 130 (_tuple -> { positional_args , } .)
    :               reduce using rule 130 (_tuple -> { positional_args , } .)
    >               reduce using rule 130 (_tuple -> { positional_args , } .)
    <               reduce using rule 130 (_tuple -> { positional_args , } .)
    &               reduce using rule 130 (_tuple -> { positional_args , } .)
    ^               reduce using rule 130 (_tuple -> { positional_args , } .)
    |               reduce using rule 130 (_tuple -> { positional_args , } .)
    EQ_GREATER      reduce using rule 130 (_tuple -> { positional_args , } .)
    EQ_LESS         reduce using rule 130 (_tuple -> { positional_args , } .)
    NOT_EQEQ        reduce using rule 130 (_tuple -> { positional_args , } .)
    EQEQ            reduce using rule 130 (_tuple -> { positional_args , } .)
    %               reduce using rule 130 (_tuple -> { positional_args , } .)
    *               reduce using rule 130 (_tuple -> { positional_args , } .)
    /               reduce using rule 130 (_tuple -> { positional_args , } .)
    -               reduce using rule 130 (_tuple -> { positional_args , } .)
    +               reduce using rule 130 (_tuple -> { positional_args , } .)
    ,               reduce using rule 130 (_tuple -> { positional_args , } .)
    }               reduce using rule 130 (_tuple -> { positional_args , } .)
    ;               reduce using rule 130 (_tuple -> { positional_args , } .)
    ?               reduce using rule 130 (_tuple -> { positional_args , } .)
    IN              reduce using rule 130 (_tuple -> { positional_args , } .)
    ]               reduce using rule 130 (_tuple -> { positional_args , } .)
    )               reduce using rule 130 (_tuple -> { positional_args , } .)
    {               reduce using rule 130 (_tuple -> { positional_args , } .)
    SANDBOX         reduce using rule 130 (_tuple -> { positional_args , } .)
    LIMPORT         reduce using rule 130 (_tuple -> { positional_args , } .)
    .               reduce using rule 130 (_tuple -> { positional_args , } .)
    IMPORT          reduce using rule 130 (_tuple -> { positional_args , } .)
    ID              reduce using rule 130 (_tuple -> { positional_args , } .)
    RETURN          reduce using rule 130 (_tuple -> { positional_args , } .)
    DEL             reduce using rule 130 (_tuple -> { positional_args , } .)
    !               reduce using rule 130 (_tuple -> { positional_args , } .)
    FOR             reduce using rule 130 (_tuple -> { positional_args , } .)
    DEBUG           reduce using rule 130 (_tuple -> { positional_args , } .)
    SKIP            reduce using rule 130 (_tuple -> { positional_args , } .)
    BREAK           reduce using rule 130 (_tuple -> { positional_args , } .)
    @               reduce using rule 130 (_tuple -> { positional_args , } .)
    WHILE           reduce using rule 130 (_tuple -> { positional_args , } .)
    #               reduce using rule 130 (_tuple -> { positional_args , } .)
    NAMESPACE       reduce using rule 130 (_tuple -> { positional_args , } .)
    CLASS           reduce using rule 130 (_tuple -> { positional_args , } .)
    FUNC            reduce using rule 130 (_tuple -> { positional_args , } .)
    PYTHON_CODE_EXEC reduce using rule 130 (_tuple -> { positional_args , } .)
    PYTHON_CODE     reduce using rule 130 (_tuple -> { positional_args , } .)
    IF              reduce using rule 130 (_tuple -> { positional_args , } .)
    CHAR            reduce using rule 130 (_tuple -> { positional_args , } .)
    STRING          reduce using rule 130 (_tuple -> { positional_args , } .)
    FALSE           reduce using rule 130 (_tuple -> { positional_args , } .)
    TRUE            reduce using rule 130 (_tuple -> { positional_args , } .)
    FLOAT           reduce using rule 130 (_tuple -> { positional_args , } .)
    HEX             reduce using rule 130 (_tuple -> { positional_args , } .)
    INT             reduce using rule 130 (_tuple -> { positional_args , } .)
    NULL            reduce using rule 130 (_tuple -> { positional_args , } .)
    $end            reduce using rule 130 (_tuple -> { positional_args , } .)


state 247

    (62) positional_args -> positional_args , expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ,               reduce using rule 62 (positional_args -> positional_args , expression .)
    }               reduce using rule 62 (positional_args -> positional_args , expression .)
    ]               reduce using rule 62 (positional_args -> positional_args , expression .)
    )               reduce using rule 62 (positional_args -> positional_args , expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 248

    (151) assoc_array_items -> expression : expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    }               reduce using rule 151 (assoc_array_items -> expression : expression .)
    ,               reduce using rule 151 (assoc_array_items -> expression : expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 249

    (129) get_index -> expression [ expression ] .
    EQ_DIV          reduce using rule 129 (get_index -> expression [ expression ] .)
    EQ_MOD          reduce using rule 129 (get_index -> expression [ expression ] .)
    EQ_MUL          reduce using rule 129 (get_index -> expression [ expression ] .)
    EQ_SUB          reduce using rule 129 (get_index -> expression [ expression ] .)
    EQ_ADD          reduce using rule 129 (get_index -> expression [ expression ] .)
    =               reduce using rule 129 (get_index -> expression [ expression ] .)
    [               reduce using rule 129 (get_index -> expression [ expression ] .)
    (               reduce using rule 129 (get_index -> expression [ expression ] .)
    :               reduce using rule 129 (get_index -> expression [ expression ] .)
    >               reduce using rule 129 (get_index -> expression [ expression ] .)
    <               reduce using rule 129 (get_index -> expression [ expression ] .)
    &               reduce using rule 129 (get_index -> expression [ expression ] .)
    ^               reduce using rule 129 (get_index -> expression [ expression ] .)
    |               reduce using rule 129 (get_index -> expression [ expression ] .)
    EQ_GREATER      reduce using rule 129 (get_index -> expression [ expression ] .)
    EQ_LESS         reduce using rule 129 (get_index -> expression [ expression ] .)
    NOT_EQEQ        reduce using rule 129 (get_index -> expression [ expression ] .)
    EQEQ            reduce using rule 129 (get_index -> expression [ expression ] .)
    %               reduce using rule 129 (get_index -> expression [ expression ] .)
    *               reduce using rule 129 (get_index -> expression [ expression ] .)
    /               reduce using rule 129 (get_index -> expression [ expression ] .)
    -               reduce using rule 129 (get_index -> expression [ expression ] .)
    +               reduce using rule 129 (get_index -> expression [ expression ] .)
    ,               reduce using rule 129 (get_index -> expression [ expression ] .)
    }               reduce using rule 129 (get_index -> expression [ expression ] .)
    ;               reduce using rule 129 (get_index -> expression [ expression ] .)
    ?               reduce using rule 129 (get_index -> expression [ expression ] .)
    IN              reduce using rule 129 (get_index -> expression [ expression ] .)
    ]               reduce using rule 129 (get_index -> expression [ expression ] .)
    )               reduce using rule 129 (get_index -> expression [ expression ] .)
    {               reduce using rule 129 (get_index -> expression [ expression ] .)
    SANDBOX         reduce using rule 129 (get_index -> expression [ expression ] .)
    LIMPORT         reduce using rule 129 (get_index -> expression [ expression ] .)
    .               reduce using rule 129 (get_index -> expression [ expression ] .)
    IMPORT          reduce using rule 129 (get_index -> expression [ expression ] .)
    ID              reduce using rule 129 (get_index -> expression [ expression ] .)
    RETURN          reduce using rule 129 (get_index -> expression [ expression ] .)
    DEL             reduce using rule 129 (get_index -> expression [ expression ] .)
    !               reduce using rule 129 (get_index -> expression [ expression ] .)
    FOR             reduce using rule 129 (get_index -> expression [ expression ] .)
    DEBUG           reduce using rule 129 (get_index -> expression [ expression ] .)
    SKIP            reduce using rule 129 (get_index -> expression [ expression ] .)
    BREAK           reduce using rule 129 (get_index -> expression [ expression ] .)
    @               reduce using rule 129 (get_index -> expression [ expression ] .)
    WHILE           reduce using rule 129 (get_index -> expression [ expression ] .)
    #               reduce using rule 129 (get_index -> expression [ expression ] .)
    NAMESPACE       reduce using rule 129 (get_index -> expression [ expression ] .)
    CLASS           reduce using rule 129 (get_index -> expression [ expression ] .)
    FUNC            reduce using rule 129 (get_index -> expression [ expression ] .)
    PYTHON_CODE_EXEC reduce using rule 129 (get_index -> expression [ expression ] .)
    PYTHON_CODE     reduce using rule 129 (get_index -> expression [ expression ] .)
    IF              reduce using rule 129 (get_index -> expression [ expression ] .)
    CHAR            reduce using rule 129 (get_index -> expression [ expression ] .)
    STRING          reduce using rule 129 (get_index -> expression [ expression ] .)
    FALSE           reduce using rule 129 (get_index -> expression [ expression ] .)
    TRUE            reduce using rule 129 (get_index -> expression [ expression ] .)
    FLOAT           reduce using rule 129 (get_index -> expression [ expression ] .)
    HEX             reduce using rule 129 (get_index -> expression [ expression ] .)
    INT             reduce using rule 129 (get_index -> expression [ expression ] .)
    NULL            reduce using rule 129 (get_index -> expression [ expression ] .)
    $end            reduce using rule 129 (get_index -> expression [ expression ] .)


state 250

    (29) function_call -> expression ( empty ) . FARROW { program }
    (36) function_call -> expression ( empty ) .
    FARROW          shift and go to state 301
    ;               reduce using rule 36 (function_call -> expression ( empty ) .)
    [               reduce using rule 36 (function_call -> expression ( empty ) .)
    (               reduce using rule 36 (function_call -> expression ( empty ) .)
    :               reduce using rule 36 (function_call -> expression ( empty ) .)
    >               reduce using rule 36 (function_call -> expression ( empty ) .)
    <               reduce using rule 36 (function_call -> expression ( empty ) .)
    &               reduce using rule 36 (function_call -> expression ( empty ) .)
    ^               reduce using rule 36 (function_call -> expression ( empty ) .)
    |               reduce using rule 36 (function_call -> expression ( empty ) .)
    EQ_GREATER      reduce using rule 36 (function_call -> expression ( empty ) .)
    EQ_LESS         reduce using rule 36 (function_call -> expression ( empty ) .)
    NOT_EQEQ        reduce using rule 36 (function_call -> expression ( empty ) .)
    EQEQ            reduce using rule 36 (function_call -> expression ( empty ) .)
    %               reduce using rule 36 (function_call -> expression ( empty ) .)
    *               reduce using rule 36 (function_call -> expression ( empty ) .)
    /               reduce using rule 36 (function_call -> expression ( empty ) .)
    -               reduce using rule 36 (function_call -> expression ( empty ) .)
    +               reduce using rule 36 (function_call -> expression ( empty ) .)
    ,               reduce using rule 36 (function_call -> expression ( empty ) .)
    }               reduce using rule 36 (function_call -> expression ( empty ) .)
    ?               reduce using rule 36 (function_call -> expression ( empty ) .)
    IN              reduce using rule 36 (function_call -> expression ( empty ) .)
    ]               reduce using rule 36 (function_call -> expression ( empty ) .)
    )               reduce using rule 36 (function_call -> expression ( empty ) .)
    {               reduce using rule 36 (function_call -> expression ( empty ) .)
    SANDBOX         reduce using rule 36 (function_call -> expression ( empty ) .)
    LIMPORT         reduce using rule 36 (function_call -> expression ( empty ) .)
    .               reduce using rule 36 (function_call -> expression ( empty ) .)
    IMPORT          reduce using rule 36 (function_call -> expression ( empty ) .)
    ID              reduce using rule 36 (function_call -> expression ( empty ) .)
    RETURN          reduce using rule 36 (function_call -> expression ( empty ) .)
    DEL             reduce using rule 36 (function_call -> expression ( empty ) .)
    !               reduce using rule 36 (function_call -> expression ( empty ) .)
    FOR             reduce using rule 36 (function_call -> expression ( empty ) .)
    DEBUG           reduce using rule 36 (function_call -> expression ( empty ) .)
    SKIP            reduce using rule 36 (function_call -> expression ( empty ) .)
    BREAK           reduce using rule 36 (function_call -> expression ( empty ) .)
    @               reduce using rule 36 (function_call -> expression ( empty ) .)
    WHILE           reduce using rule 36 (function_call -> expression ( empty ) .)
    #               reduce using rule 36 (function_call -> expression ( empty ) .)
    NAMESPACE       reduce using rule 36 (function_call -> expression ( empty ) .)
    CLASS           reduce using rule 36 (function_call -> expression ( empty ) .)
    FUNC            reduce using rule 36 (function_call -> expression ( empty ) .)
    PYTHON_CODE_EXEC reduce using rule 36 (function_call -> expression ( empty ) .)
    PYTHON_CODE     reduce using rule 36 (function_call -> expression ( empty ) .)
    IF              reduce using rule 36 (function_call -> expression ( empty ) .)
    CHAR            reduce using rule 36 (function_call -> expression ( empty ) .)
    STRING          reduce using rule 36 (function_call -> expression ( empty ) .)
    FALSE           reduce using rule 36 (function_call -> expression ( empty ) .)
    TRUE            reduce using rule 36 (function_call -> expression ( empty ) .)
    FLOAT           reduce using rule 36 (function_call -> expression ( empty ) .)
    HEX             reduce using rule 36 (function_call -> expression ( empty ) .)
    INT             reduce using rule 36 (function_call -> expression ( empty ) .)
    NULL            reduce using rule 36 (function_call -> expression ( empty ) .)
    $end            reduce using rule 36 (function_call -> expression ( empty ) .)


state 251

    (37) function_call -> expression ( function_arguments ) .
    ;               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    [               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    (               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    :               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    >               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    <               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    &               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    ^               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    |               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQ_GREATER      reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQ_LESS         reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    NOT_EQEQ        reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQEQ            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    %               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    *               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    /               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    -               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    +               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    ,               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    }               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    ?               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    IN              reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    ]               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    )               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    {               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    SANDBOX         reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    LIMPORT         reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    .               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    IMPORT          reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    ID              reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    RETURN          reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    DEL             reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    !               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    FOR             reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    DEBUG           reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    SKIP            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    BREAK           reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    @               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    WHILE           reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    #               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    NAMESPACE       reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    CLASS           reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    FUNC            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    PYTHON_CODE_EXEC reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    PYTHON_CODE     reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    IF              reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    CHAR            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    STRING          reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    FALSE           reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    TRUE            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    FLOAT           reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    HEX             reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    INT             reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    NULL            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    $end            reduce using rule 37 (function_call -> expression ( function_arguments ) .)


state 252

    (64) kwargs -> kwargs , . id = expression
    (149) id -> . ID
    ID              shift and go to state 303

    id                             shift and go to state 302

state 253

    (52) function_arguments -> positional_args , . kwargs
    (62) positional_args -> positional_args , . expression
    (63) kwargs -> . ID = expression
    (64) kwargs -> . kwargs , id = expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    ID              shift and go to state 175
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    kwargs                         shift and go to state 304
    expression                     shift and go to state 247
    id                             shift and go to state 59
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 254

    (63) kwargs -> ID = . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 305
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 255

    (34) function_call -> expression : : expression . ( empty )
    (35) function_call -> expression : : expression . ( function_arguments )
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    (               shift and go to state 306
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    :               shift and go to state 90


state 256

    (105) expression -> expression > > expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 105 (expression -> expression > > expression .)
    (               reduce using rule 105 (expression -> expression > > expression .)
    :               reduce using rule 105 (expression -> expression > > expression .)
    >               reduce using rule 105 (expression -> expression > > expression .)
    <               reduce using rule 105 (expression -> expression > > expression .)
    &               reduce using rule 105 (expression -> expression > > expression .)
    ^               reduce using rule 105 (expression -> expression > > expression .)
    |               reduce using rule 105 (expression -> expression > > expression .)
    EQ_GREATER      reduce using rule 105 (expression -> expression > > expression .)
    EQ_LESS         reduce using rule 105 (expression -> expression > > expression .)
    NOT_EQEQ        reduce using rule 105 (expression -> expression > > expression .)
    EQEQ            reduce using rule 105 (expression -> expression > > expression .)
    ,               reduce using rule 105 (expression -> expression > > expression .)
    }               reduce using rule 105 (expression -> expression > > expression .)
    ;               reduce using rule 105 (expression -> expression > > expression .)
    ?               reduce using rule 105 (expression -> expression > > expression .)
    IN              reduce using rule 105 (expression -> expression > > expression .)
    ]               reduce using rule 105 (expression -> expression > > expression .)
    )               reduce using rule 105 (expression -> expression > > expression .)
    {               reduce using rule 105 (expression -> expression > > expression .)
    SANDBOX         reduce using rule 105 (expression -> expression > > expression .)
    LIMPORT         reduce using rule 105 (expression -> expression > > expression .)
    .               reduce using rule 105 (expression -> expression > > expression .)
    IMPORT          reduce using rule 105 (expression -> expression > > expression .)
    ID              reduce using rule 105 (expression -> expression > > expression .)
    RETURN          reduce using rule 105 (expression -> expression > > expression .)
    DEL             reduce using rule 105 (expression -> expression > > expression .)
    !               reduce using rule 105 (expression -> expression > > expression .)
    FOR             reduce using rule 105 (expression -> expression > > expression .)
    DEBUG           reduce using rule 105 (expression -> expression > > expression .)
    SKIP            reduce using rule 105 (expression -> expression > > expression .)
    BREAK           reduce using rule 105 (expression -> expression > > expression .)
    @               reduce using rule 105 (expression -> expression > > expression .)
    WHILE           reduce using rule 105 (expression -> expression > > expression .)
    #               reduce using rule 105 (expression -> expression > > expression .)
    NAMESPACE       reduce using rule 105 (expression -> expression > > expression .)
    CLASS           reduce using rule 105 (expression -> expression > > expression .)
    FUNC            reduce using rule 105 (expression -> expression > > expression .)
    PYTHON_CODE_EXEC reduce using rule 105 (expression -> expression > > expression .)
    PYTHON_CODE     reduce using rule 105 (expression -> expression > > expression .)
    IF              reduce using rule 105 (expression -> expression > > expression .)
    CHAR            reduce using rule 105 (expression -> expression > > expression .)
    STRING          reduce using rule 105 (expression -> expression > > expression .)
    FALSE           reduce using rule 105 (expression -> expression > > expression .)
    TRUE            reduce using rule 105 (expression -> expression > > expression .)
    FLOAT           reduce using rule 105 (expression -> expression > > expression .)
    HEX             reduce using rule 105 (expression -> expression > > expression .)
    INT             reduce using rule 105 (expression -> expression > > expression .)
    NULL            reduce using rule 105 (expression -> expression > > expression .)
    $end            reduce using rule 105 (expression -> expression > > expression .)
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104


state 257

    (106) expression -> expression < < expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    [               reduce using rule 106 (expression -> expression < < expression .)
    (               reduce using rule 106 (expression -> expression < < expression .)
    :               reduce using rule 106 (expression -> expression < < expression .)
    >               reduce using rule 106 (expression -> expression < < expression .)
    <               reduce using rule 106 (expression -> expression < < expression .)
    &               reduce using rule 106 (expression -> expression < < expression .)
    ^               reduce using rule 106 (expression -> expression < < expression .)
    |               reduce using rule 106 (expression -> expression < < expression .)
    EQ_GREATER      reduce using rule 106 (expression -> expression < < expression .)
    EQ_LESS         reduce using rule 106 (expression -> expression < < expression .)
    NOT_EQEQ        reduce using rule 106 (expression -> expression < < expression .)
    EQEQ            reduce using rule 106 (expression -> expression < < expression .)
    ,               reduce using rule 106 (expression -> expression < < expression .)
    }               reduce using rule 106 (expression -> expression < < expression .)
    ;               reduce using rule 106 (expression -> expression < < expression .)
    ?               reduce using rule 106 (expression -> expression < < expression .)
    IN              reduce using rule 106 (expression -> expression < < expression .)
    ]               reduce using rule 106 (expression -> expression < < expression .)
    )               reduce using rule 106 (expression -> expression < < expression .)
    {               reduce using rule 106 (expression -> expression < < expression .)
    SANDBOX         reduce using rule 106 (expression -> expression < < expression .)
    LIMPORT         reduce using rule 106 (expression -> expression < < expression .)
    .               reduce using rule 106 (expression -> expression < < expression .)
    IMPORT          reduce using rule 106 (expression -> expression < < expression .)
    ID              reduce using rule 106 (expression -> expression < < expression .)
    RETURN          reduce using rule 106 (expression -> expression < < expression .)
    DEL             reduce using rule 106 (expression -> expression < < expression .)
    !               reduce using rule 106 (expression -> expression < < expression .)
    FOR             reduce using rule 106 (expression -> expression < < expression .)
    DEBUG           reduce using rule 106 (expression -> expression < < expression .)
    SKIP            reduce using rule 106 (expression -> expression < < expression .)
    BREAK           reduce using rule 106 (expression -> expression < < expression .)
    @               reduce using rule 106 (expression -> expression < < expression .)
    WHILE           reduce using rule 106 (expression -> expression < < expression .)
    #               reduce using rule 106 (expression -> expression < < expression .)
    NAMESPACE       reduce using rule 106 (expression -> expression < < expression .)
    CLASS           reduce using rule 106 (expression -> expression < < expression .)
    FUNC            reduce using rule 106 (expression -> expression < < expression .)
    PYTHON_CODE_EXEC reduce using rule 106 (expression -> expression < < expression .)
    PYTHON_CODE     reduce using rule 106 (expression -> expression < < expression .)
    IF              reduce using rule 106 (expression -> expression < < expression .)
    CHAR            reduce using rule 106 (expression -> expression < < expression .)
    STRING          reduce using rule 106 (expression -> expression < < expression .)
    FALSE           reduce using rule 106 (expression -> expression < < expression .)
    TRUE            reduce using rule 106 (expression -> expression < < expression .)
    FLOAT           reduce using rule 106 (expression -> expression < < expression .)
    HEX             reduce using rule 106 (expression -> expression < < expression .)
    INT             reduce using rule 106 (expression -> expression < < expression .)
    NULL            reduce using rule 106 (expression -> expression < < expression .)
    $end            reduce using rule 106 (expression -> expression < < expression .)
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104


state 258

    (30) function_call -> < ID . > expression
    (126) expression -> ID . ID [ expression ]
    (127) expression -> ID . ID
    (149) id -> ID .
    (31) function_call -> ID . TARROW ID
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    >               shift and go to state 222
    ID              shift and go to state 168
    <               reduce using rule 149 (id -> ID .)
    &               reduce using rule 149 (id -> ID .)
    ^               reduce using rule 149 (id -> ID .)
    |               reduce using rule 149 (id -> ID .)
    EQ_GREATER      reduce using rule 149 (id -> ID .)
    EQ_LESS         reduce using rule 149 (id -> ID .)
    NOT_EQEQ        reduce using rule 149 (id -> ID .)
    EQEQ            reduce using rule 149 (id -> ID .)
    %               reduce using rule 149 (id -> ID .)
    *               reduce using rule 149 (id -> ID .)
    /               reduce using rule 149 (id -> ID .)
    -               reduce using rule 149 (id -> ID .)
    +               reduce using rule 149 (id -> ID .)
    [               reduce using rule 149 (id -> ID .)
    (               reduce using rule 149 (id -> ID .)
    :               reduce using rule 149 (id -> ID .)
    ,               reduce using rule 149 (id -> ID .)
    }               reduce using rule 149 (id -> ID .)
    ;               reduce using rule 149 (id -> ID .)
    ?               reduce using rule 149 (id -> ID .)
    IN              reduce using rule 149 (id -> ID .)
    ]               reduce using rule 149 (id -> ID .)
    )               reduce using rule 149 (id -> ID .)
    {               reduce using rule 149 (id -> ID .)
    SANDBOX         reduce using rule 149 (id -> ID .)
    LIMPORT         reduce using rule 149 (id -> ID .)
    .               reduce using rule 149 (id -> ID .)
    IMPORT          reduce using rule 149 (id -> ID .)
    RETURN          reduce using rule 149 (id -> ID .)
    DEL             reduce using rule 149 (id -> ID .)
    !               reduce using rule 149 (id -> ID .)
    FOR             reduce using rule 149 (id -> ID .)
    DEBUG           reduce using rule 149 (id -> ID .)
    SKIP            reduce using rule 149 (id -> ID .)
    BREAK           reduce using rule 149 (id -> ID .)
    @               reduce using rule 149 (id -> ID .)
    WHILE           reduce using rule 149 (id -> ID .)
    #               reduce using rule 149 (id -> ID .)
    NAMESPACE       reduce using rule 149 (id -> ID .)
    CLASS           reduce using rule 149 (id -> ID .)
    FUNC            reduce using rule 149 (id -> ID .)
    PYTHON_CODE_EXEC reduce using rule 149 (id -> ID .)
    PYTHON_CODE     reduce using rule 149 (id -> ID .)
    IF              reduce using rule 149 (id -> ID .)
    CHAR            reduce using rule 149 (id -> ID .)
    STRING          reduce using rule 149 (id -> ID .)
    FALSE           reduce using rule 149 (id -> ID .)
    TRUE            reduce using rule 149 (id -> ID .)
    FLOAT           reduce using rule 149 (id -> ID .)
    HEX             reduce using rule 149 (id -> ID .)
    INT             reduce using rule 149 (id -> ID .)
    NULL            reduce using rule 149 (id -> ID .)
    $end            reduce using rule 149 (id -> ID .)
    TARROW          shift and go to state 125


state 259

    (27) function_call -> . ENV FROM ID . { program }
    {               shift and go to state 307


state 260

    (28) function_call -> . ENV { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 308
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 261

    (65) variable_operation -> get_index EQ_DIV expression ; .
    SANDBOX         reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    LIMPORT         reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    .               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    IMPORT          reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    ID              reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    RETURN          reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    DEL             reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    !               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    FOR             reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    DEBUG           reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    SKIP            reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    BREAK           reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    @               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    [               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    WHILE           reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    ?               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    #               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    NAMESPACE       reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    CLASS           reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    FUNC            reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    PYTHON_CODE_EXEC reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    PYTHON_CODE     reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    IF              reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    <               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    (               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    +               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    -               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    *               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    &               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    {               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    CHAR            reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    STRING          reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    FALSE           reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    TRUE            reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    FLOAT           reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    HEX             reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    INT             reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    NULL            reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    $end            reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)
    }               reduce using rule 65 (variable_operation -> get_index EQ_DIV expression ; .)


state 262

    (67) variable_operation -> get_index EQ_MOD expression ; .
    SANDBOX         reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    LIMPORT         reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    .               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    IMPORT          reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    ID              reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    RETURN          reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    DEL             reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    !               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    FOR             reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    DEBUG           reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    SKIP            reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    BREAK           reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    @               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    [               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    WHILE           reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    ?               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    #               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    NAMESPACE       reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    CLASS           reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    FUNC            reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    PYTHON_CODE     reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    IF              reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    <               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    (               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    +               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    -               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    *               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    &               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    {               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    CHAR            reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    STRING          reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    FALSE           reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    TRUE            reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    FLOAT           reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    HEX             reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    INT             reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    NULL            reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    $end            reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)
    }               reduce using rule 67 (variable_operation -> get_index EQ_MOD expression ; .)


state 263

    (69) variable_operation -> get_index EQ_MUL expression ; .
    SANDBOX         reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    LIMPORT         reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    .               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    IMPORT          reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    ID              reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    RETURN          reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    DEL             reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    !               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    FOR             reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    DEBUG           reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    SKIP            reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    BREAK           reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    @               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    [               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    WHILE           reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    ?               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    #               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    NAMESPACE       reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    CLASS           reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    FUNC            reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    PYTHON_CODE_EXEC reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    PYTHON_CODE     reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    IF              reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    <               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    (               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    +               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    -               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    *               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    &               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    {               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    CHAR            reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    STRING          reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    FALSE           reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    TRUE            reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    FLOAT           reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    HEX             reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    INT             reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    NULL            reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    $end            reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)
    }               reduce using rule 69 (variable_operation -> get_index EQ_MUL expression ; .)


state 264

    (71) variable_operation -> get_index EQ_SUB expression ; .
    SANDBOX         reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    LIMPORT         reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    .               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    IMPORT          reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    ID              reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    RETURN          reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    DEL             reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    !               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    FOR             reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    DEBUG           reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    SKIP            reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    BREAK           reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    @               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    [               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    WHILE           reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    ?               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    #               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    NAMESPACE       reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    CLASS           reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    FUNC            reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    PYTHON_CODE_EXEC reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    PYTHON_CODE     reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    IF              reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    <               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    (               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    +               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    -               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    *               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    &               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    {               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    CHAR            reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    STRING          reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    FALSE           reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    TRUE            reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    FLOAT           reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    HEX             reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    INT             reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    NULL            reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    $end            reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)
    }               reduce using rule 71 (variable_operation -> get_index EQ_SUB expression ; .)


state 265

    (73) variable_operation -> get_index EQ_ADD expression ; .
    SANDBOX         reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    LIMPORT         reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    .               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    IMPORT          reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    ID              reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    RETURN          reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    DEL             reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    !               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    FOR             reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    DEBUG           reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    SKIP            reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    BREAK           reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    @               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    [               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    WHILE           reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    ?               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    #               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    NAMESPACE       reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    CLASS           reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    FUNC            reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    PYTHON_CODE     reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    IF              reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    <               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    (               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    +               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    -               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    *               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    &               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    {               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    CHAR            reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    STRING          reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    FALSE           reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    TRUE            reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    FLOAT           reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    HEX             reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    INT             reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    NULL            reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    $end            reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)
    }               reduce using rule 73 (variable_operation -> get_index EQ_ADD expression ; .)


state 266

    (38) variable_assignment -> get_index = expression ; .
    SANDBOX         reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    LIMPORT         reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    .               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    IMPORT          reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    ID              reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    RETURN          reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    DEL             reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    !               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    FOR             reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    DEBUG           reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    SKIP            reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    BREAK           reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    @               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    [               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    WHILE           reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    ?               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    #               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    NAMESPACE       reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    CLASS           reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    FUNC            reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    PYTHON_CODE     reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    IF              reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    <               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    (               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    +               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    -               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    *               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    &               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    {               reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    CHAR            reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    STRING          reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    FALSE           reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    TRUE            reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    FLOAT           reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    HEX             reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    INT             reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    NULL            reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    $end            reduce using rule 38 (variable_assignment -> get_index = expression ; .)
    }               reduce using rule 38 (variable_assignment -> get_index = expression ; .)


state 267

    (42) variable_assignment -> ID ID = [ . HEX , ID ] ;
    (132) _list -> [ . positional_args , ]
    (133) _list -> [ . positional_args ]
    (61) positional_args -> . expression
    (62) positional_args -> . positional_args , expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    HEX             shift and go to state 309
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    positional_args                shift and go to state 138
    expression                     shift and go to state 137
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 268

    (43) variable_assignment -> ID ID = expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 310
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 269

    (126) expression -> ID ID [ expression . ]
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ]               shift and go to state 311
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 270

    (66) variable_operation -> ID EQ_DIV expression ; .
    SANDBOX         reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    LIMPORT         reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    .               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    IMPORT          reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    ID              reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    RETURN          reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    DEL             reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    !               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    FOR             reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    DEBUG           reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    SKIP            reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    BREAK           reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    @               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    [               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    WHILE           reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    ?               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    #               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    NAMESPACE       reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    CLASS           reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    FUNC            reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    PYTHON_CODE_EXEC reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    PYTHON_CODE     reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    IF              reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    <               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    (               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    +               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    -               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    *               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    &               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    {               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    CHAR            reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    STRING          reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    FALSE           reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    TRUE            reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    FLOAT           reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    HEX             reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    INT             reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    NULL            reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    $end            reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)
    }               reduce using rule 66 (variable_operation -> ID EQ_DIV expression ; .)


state 271

    (68) variable_operation -> ID EQ_MOD expression ; .
    SANDBOX         reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    LIMPORT         reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    .               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    IMPORT          reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    ID              reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    RETURN          reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    DEL             reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    !               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    FOR             reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    DEBUG           reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    SKIP            reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    BREAK           reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    @               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    [               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    WHILE           reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    ?               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    #               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    NAMESPACE       reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    CLASS           reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    FUNC            reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    PYTHON_CODE     reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    IF              reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    <               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    (               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    +               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    -               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    *               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    &               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    {               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    CHAR            reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    STRING          reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    FALSE           reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    TRUE            reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    FLOAT           reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    HEX             reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    INT             reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    NULL            reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    $end            reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)
    }               reduce using rule 68 (variable_operation -> ID EQ_MOD expression ; .)


state 272

    (70) variable_operation -> ID EQ_MUL expression ; .
    SANDBOX         reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    LIMPORT         reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    .               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    IMPORT          reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    ID              reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    RETURN          reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    DEL             reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    !               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    FOR             reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    DEBUG           reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    SKIP            reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    BREAK           reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    @               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    [               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    WHILE           reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    ?               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    #               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    NAMESPACE       reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    CLASS           reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    FUNC            reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    PYTHON_CODE_EXEC reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    PYTHON_CODE     reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    IF              reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    <               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    (               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    +               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    -               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    *               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    &               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    {               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    CHAR            reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    STRING          reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    FALSE           reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    TRUE            reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    FLOAT           reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    HEX             reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    INT             reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    NULL            reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    $end            reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)
    }               reduce using rule 70 (variable_operation -> ID EQ_MUL expression ; .)


state 273

    (72) variable_operation -> ID EQ_SUB expression ; .
    SANDBOX         reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    LIMPORT         reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    .               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    IMPORT          reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    ID              reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    RETURN          reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    DEL             reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    !               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    FOR             reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    DEBUG           reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    SKIP            reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    BREAK           reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    @               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    [               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    WHILE           reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    ?               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    #               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    NAMESPACE       reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    CLASS           reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    FUNC            reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    PYTHON_CODE_EXEC reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    PYTHON_CODE     reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    IF              reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    <               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    (               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    +               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    -               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    *               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    &               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    {               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    CHAR            reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    STRING          reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    FALSE           reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    TRUE            reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    FLOAT           reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    HEX             reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    INT             reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    NULL            reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    $end            reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)
    }               reduce using rule 72 (variable_operation -> ID EQ_SUB expression ; .)


state 274

    (74) variable_operation -> ID EQ_ADD expression ; .
    SANDBOX         reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    LIMPORT         reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    .               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    IMPORT          reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    ID              reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    RETURN          reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    DEL             reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    !               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    FOR             reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    DEBUG           reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    SKIP            reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    BREAK           reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    @               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    [               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    WHILE           reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    ?               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    #               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    NAMESPACE       reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    CLASS           reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    FUNC            reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    PYTHON_CODE_EXEC reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    PYTHON_CODE     reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    IF              reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    <               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    (               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    +               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    -               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    *               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    &               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    {               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    CHAR            reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    STRING          reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    FALSE           reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    TRUE            reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    FLOAT           reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    HEX             reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    INT             reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    NULL            reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    $end            reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)
    }               reduce using rule 74 (variable_operation -> ID EQ_ADD expression ; .)


state 275

    (40) variable_assignment -> ID = expression ; .
    SANDBOX         reduce using rule 40 (variable_assignment -> ID = expression ; .)
    LIMPORT         reduce using rule 40 (variable_assignment -> ID = expression ; .)
    .               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    IMPORT          reduce using rule 40 (variable_assignment -> ID = expression ; .)
    ID              reduce using rule 40 (variable_assignment -> ID = expression ; .)
    RETURN          reduce using rule 40 (variable_assignment -> ID = expression ; .)
    DEL             reduce using rule 40 (variable_assignment -> ID = expression ; .)
    !               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    FOR             reduce using rule 40 (variable_assignment -> ID = expression ; .)
    DEBUG           reduce using rule 40 (variable_assignment -> ID = expression ; .)
    SKIP            reduce using rule 40 (variable_assignment -> ID = expression ; .)
    BREAK           reduce using rule 40 (variable_assignment -> ID = expression ; .)
    @               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    [               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    WHILE           reduce using rule 40 (variable_assignment -> ID = expression ; .)
    ?               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    #               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    NAMESPACE       reduce using rule 40 (variable_assignment -> ID = expression ; .)
    CLASS           reduce using rule 40 (variable_assignment -> ID = expression ; .)
    FUNC            reduce using rule 40 (variable_assignment -> ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 40 (variable_assignment -> ID = expression ; .)
    PYTHON_CODE     reduce using rule 40 (variable_assignment -> ID = expression ; .)
    IF              reduce using rule 40 (variable_assignment -> ID = expression ; .)
    <               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    (               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    +               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    -               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    *               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    &               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    {               reduce using rule 40 (variable_assignment -> ID = expression ; .)
    CHAR            reduce using rule 40 (variable_assignment -> ID = expression ; .)
    STRING          reduce using rule 40 (variable_assignment -> ID = expression ; .)
    FALSE           reduce using rule 40 (variable_assignment -> ID = expression ; .)
    TRUE            reduce using rule 40 (variable_assignment -> ID = expression ; .)
    FLOAT           reduce using rule 40 (variable_assignment -> ID = expression ; .)
    HEX             reduce using rule 40 (variable_assignment -> ID = expression ; .)
    INT             reduce using rule 40 (variable_assignment -> ID = expression ; .)
    NULL            reduce using rule 40 (variable_assignment -> ID = expression ; .)
    $end            reduce using rule 40 (variable_assignment -> ID = expression ; .)
    }               reduce using rule 40 (variable_assignment -> ID = expression ; .)


state 276

    (41) variable_assignment -> ID < ID > . ID = expression ;
    ID              shift and go to state 312


state 277

    (44) variable_assignment -> ID - - ; .
    SANDBOX         reduce using rule 44 (variable_assignment -> ID - - ; .)
    LIMPORT         reduce using rule 44 (variable_assignment -> ID - - ; .)
    .               reduce using rule 44 (variable_assignment -> ID - - ; .)
    IMPORT          reduce using rule 44 (variable_assignment -> ID - - ; .)
    ID              reduce using rule 44 (variable_assignment -> ID - - ; .)
    RETURN          reduce using rule 44 (variable_assignment -> ID - - ; .)
    DEL             reduce using rule 44 (variable_assignment -> ID - - ; .)
    !               reduce using rule 44 (variable_assignment -> ID - - ; .)
    FOR             reduce using rule 44 (variable_assignment -> ID - - ; .)
    DEBUG           reduce using rule 44 (variable_assignment -> ID - - ; .)
    SKIP            reduce using rule 44 (variable_assignment -> ID - - ; .)
    BREAK           reduce using rule 44 (variable_assignment -> ID - - ; .)
    @               reduce using rule 44 (variable_assignment -> ID - - ; .)
    [               reduce using rule 44 (variable_assignment -> ID - - ; .)
    WHILE           reduce using rule 44 (variable_assignment -> ID - - ; .)
    ?               reduce using rule 44 (variable_assignment -> ID - - ; .)
    #               reduce using rule 44 (variable_assignment -> ID - - ; .)
    NAMESPACE       reduce using rule 44 (variable_assignment -> ID - - ; .)
    CLASS           reduce using rule 44 (variable_assignment -> ID - - ; .)
    FUNC            reduce using rule 44 (variable_assignment -> ID - - ; .)
    PYTHON_CODE_EXEC reduce using rule 44 (variable_assignment -> ID - - ; .)
    PYTHON_CODE     reduce using rule 44 (variable_assignment -> ID - - ; .)
    IF              reduce using rule 44 (variable_assignment -> ID - - ; .)
    <               reduce using rule 44 (variable_assignment -> ID - - ; .)
    (               reduce using rule 44 (variable_assignment -> ID - - ; .)
    +               reduce using rule 44 (variable_assignment -> ID - - ; .)
    -               reduce using rule 44 (variable_assignment -> ID - - ; .)
    *               reduce using rule 44 (variable_assignment -> ID - - ; .)
    &               reduce using rule 44 (variable_assignment -> ID - - ; .)
    {               reduce using rule 44 (variable_assignment -> ID - - ; .)
    CHAR            reduce using rule 44 (variable_assignment -> ID - - ; .)
    STRING          reduce using rule 44 (variable_assignment -> ID - - ; .)
    FALSE           reduce using rule 44 (variable_assignment -> ID - - ; .)
    TRUE            reduce using rule 44 (variable_assignment -> ID - - ; .)
    FLOAT           reduce using rule 44 (variable_assignment -> ID - - ; .)
    HEX             reduce using rule 44 (variable_assignment -> ID - - ; .)
    INT             reduce using rule 44 (variable_assignment -> ID - - ; .)
    NULL            reduce using rule 44 (variable_assignment -> ID - - ; .)
    $end            reduce using rule 44 (variable_assignment -> ID - - ; .)
    }               reduce using rule 44 (variable_assignment -> ID - - ; .)


state 278

    (45) variable_assignment -> ID + + ; .
    SANDBOX         reduce using rule 45 (variable_assignment -> ID + + ; .)
    LIMPORT         reduce using rule 45 (variable_assignment -> ID + + ; .)
    .               reduce using rule 45 (variable_assignment -> ID + + ; .)
    IMPORT          reduce using rule 45 (variable_assignment -> ID + + ; .)
    ID              reduce using rule 45 (variable_assignment -> ID + + ; .)
    RETURN          reduce using rule 45 (variable_assignment -> ID + + ; .)
    DEL             reduce using rule 45 (variable_assignment -> ID + + ; .)
    !               reduce using rule 45 (variable_assignment -> ID + + ; .)
    FOR             reduce using rule 45 (variable_assignment -> ID + + ; .)
    DEBUG           reduce using rule 45 (variable_assignment -> ID + + ; .)
    SKIP            reduce using rule 45 (variable_assignment -> ID + + ; .)
    BREAK           reduce using rule 45 (variable_assignment -> ID + + ; .)
    @               reduce using rule 45 (variable_assignment -> ID + + ; .)
    [               reduce using rule 45 (variable_assignment -> ID + + ; .)
    WHILE           reduce using rule 45 (variable_assignment -> ID + + ; .)
    ?               reduce using rule 45 (variable_assignment -> ID + + ; .)
    #               reduce using rule 45 (variable_assignment -> ID + + ; .)
    NAMESPACE       reduce using rule 45 (variable_assignment -> ID + + ; .)
    CLASS           reduce using rule 45 (variable_assignment -> ID + + ; .)
    FUNC            reduce using rule 45 (variable_assignment -> ID + + ; .)
    PYTHON_CODE_EXEC reduce using rule 45 (variable_assignment -> ID + + ; .)
    PYTHON_CODE     reduce using rule 45 (variable_assignment -> ID + + ; .)
    IF              reduce using rule 45 (variable_assignment -> ID + + ; .)
    <               reduce using rule 45 (variable_assignment -> ID + + ; .)
    (               reduce using rule 45 (variable_assignment -> ID + + ; .)
    +               reduce using rule 45 (variable_assignment -> ID + + ; .)
    -               reduce using rule 45 (variable_assignment -> ID + + ; .)
    *               reduce using rule 45 (variable_assignment -> ID + + ; .)
    &               reduce using rule 45 (variable_assignment -> ID + + ; .)
    {               reduce using rule 45 (variable_assignment -> ID + + ; .)
    CHAR            reduce using rule 45 (variable_assignment -> ID + + ; .)
    STRING          reduce using rule 45 (variable_assignment -> ID + + ; .)
    FALSE           reduce using rule 45 (variable_assignment -> ID + + ; .)
    TRUE            reduce using rule 45 (variable_assignment -> ID + + ; .)
    FLOAT           reduce using rule 45 (variable_assignment -> ID + + ; .)
    HEX             reduce using rule 45 (variable_assignment -> ID + + ; .)
    INT             reduce using rule 45 (variable_assignment -> ID + + ; .)
    NULL            reduce using rule 45 (variable_assignment -> ID + + ; .)
    $end            reduce using rule 45 (variable_assignment -> ID + + ; .)
    }               reduce using rule 45 (variable_assignment -> ID + + ; .)


state 279

    (58) for_loop -> ! FOR expression IN . expression { program }
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 313
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 280

    (148) class_attribute -> ! expression ? ID .
    [               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    (               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    :               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    >               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    <               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    &               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    ^               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    |               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    EQ_GREATER      reduce using rule 148 (class_attribute -> ! expression ? ID .)
    EQ_LESS         reduce using rule 148 (class_attribute -> ! expression ? ID .)
    NOT_EQEQ        reduce using rule 148 (class_attribute -> ! expression ? ID .)
    EQEQ            reduce using rule 148 (class_attribute -> ! expression ? ID .)
    %               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    *               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    /               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    -               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    +               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    ,               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    }               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    ;               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    ?               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    IN              reduce using rule 148 (class_attribute -> ! expression ? ID .)
    ]               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    )               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    {               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    SANDBOX         reduce using rule 148 (class_attribute -> ! expression ? ID .)
    LIMPORT         reduce using rule 148 (class_attribute -> ! expression ? ID .)
    .               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    IMPORT          reduce using rule 148 (class_attribute -> ! expression ? ID .)
    ID              reduce using rule 148 (class_attribute -> ! expression ? ID .)
    RETURN          reduce using rule 148 (class_attribute -> ! expression ? ID .)
    DEL             reduce using rule 148 (class_attribute -> ! expression ? ID .)
    !               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    FOR             reduce using rule 148 (class_attribute -> ! expression ? ID .)
    DEBUG           reduce using rule 148 (class_attribute -> ! expression ? ID .)
    SKIP            reduce using rule 148 (class_attribute -> ! expression ? ID .)
    BREAK           reduce using rule 148 (class_attribute -> ! expression ? ID .)
    @               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    WHILE           reduce using rule 148 (class_attribute -> ! expression ? ID .)
    #               reduce using rule 148 (class_attribute -> ! expression ? ID .)
    NAMESPACE       reduce using rule 148 (class_attribute -> ! expression ? ID .)
    CLASS           reduce using rule 148 (class_attribute -> ! expression ? ID .)
    FUNC            reduce using rule 148 (class_attribute -> ! expression ? ID .)
    PYTHON_CODE_EXEC reduce using rule 148 (class_attribute -> ! expression ? ID .)
    PYTHON_CODE     reduce using rule 148 (class_attribute -> ! expression ? ID .)
    IF              reduce using rule 148 (class_attribute -> ! expression ? ID .)
    CHAR            reduce using rule 148 (class_attribute -> ! expression ? ID .)
    STRING          reduce using rule 148 (class_attribute -> ! expression ? ID .)
    FALSE           reduce using rule 148 (class_attribute -> ! expression ? ID .)
    TRUE            reduce using rule 148 (class_attribute -> ! expression ? ID .)
    FLOAT           reduce using rule 148 (class_attribute -> ! expression ? ID .)
    HEX             reduce using rule 148 (class_attribute -> ! expression ? ID .)
    INT             reduce using rule 148 (class_attribute -> ! expression ? ID .)
    NULL            reduce using rule 148 (class_attribute -> ! expression ? ID .)
    $end            reduce using rule 148 (class_attribute -> ! expression ? ID .)


state 281

    (59) for_loop -> FOR expression IN expression . { program }
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    {               shift and go to state 314
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 282

    (39) variable_assignment -> @ ID ID = . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 315
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 283

    (30) function_call -> < ID > expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               reduce using rule 30 (function_call -> < ID > expression .)
    [               reduce using rule 30 (function_call -> < ID > expression .)
    (               reduce using rule 30 (function_call -> < ID > expression .)
    :               reduce using rule 30 (function_call -> < ID > expression .)
    >               reduce using rule 30 (function_call -> < ID > expression .)
    <               reduce using rule 30 (function_call -> < ID > expression .)
    &               reduce using rule 30 (function_call -> < ID > expression .)
    ^               reduce using rule 30 (function_call -> < ID > expression .)
    |               reduce using rule 30 (function_call -> < ID > expression .)
    EQ_GREATER      reduce using rule 30 (function_call -> < ID > expression .)
    EQ_LESS         reduce using rule 30 (function_call -> < ID > expression .)
    NOT_EQEQ        reduce using rule 30 (function_call -> < ID > expression .)
    EQEQ            reduce using rule 30 (function_call -> < ID > expression .)
    ,               reduce using rule 30 (function_call -> < ID > expression .)
    }               reduce using rule 30 (function_call -> < ID > expression .)
    ?               reduce using rule 30 (function_call -> < ID > expression .)
    IN              reduce using rule 30 (function_call -> < ID > expression .)
    ]               reduce using rule 30 (function_call -> < ID > expression .)
    )               reduce using rule 30 (function_call -> < ID > expression .)
    {               reduce using rule 30 (function_call -> < ID > expression .)
    SANDBOX         reduce using rule 30 (function_call -> < ID > expression .)
    LIMPORT         reduce using rule 30 (function_call -> < ID > expression .)
    .               reduce using rule 30 (function_call -> < ID > expression .)
    IMPORT          reduce using rule 30 (function_call -> < ID > expression .)
    ID              reduce using rule 30 (function_call -> < ID > expression .)
    RETURN          reduce using rule 30 (function_call -> < ID > expression .)
    DEL             reduce using rule 30 (function_call -> < ID > expression .)
    !               reduce using rule 30 (function_call -> < ID > expression .)
    FOR             reduce using rule 30 (function_call -> < ID > expression .)
    DEBUG           reduce using rule 30 (function_call -> < ID > expression .)
    SKIP            reduce using rule 30 (function_call -> < ID > expression .)
    BREAK           reduce using rule 30 (function_call -> < ID > expression .)
    @               reduce using rule 30 (function_call -> < ID > expression .)
    WHILE           reduce using rule 30 (function_call -> < ID > expression .)
    #               reduce using rule 30 (function_call -> < ID > expression .)
    NAMESPACE       reduce using rule 30 (function_call -> < ID > expression .)
    CLASS           reduce using rule 30 (function_call -> < ID > expression .)
    FUNC            reduce using rule 30 (function_call -> < ID > expression .)
    PYTHON_CODE_EXEC reduce using rule 30 (function_call -> < ID > expression .)
    PYTHON_CODE     reduce using rule 30 (function_call -> < ID > expression .)
    IF              reduce using rule 30 (function_call -> < ID > expression .)
    CHAR            reduce using rule 30 (function_call -> < ID > expression .)
    STRING          reduce using rule 30 (function_call -> < ID > expression .)
    FALSE           reduce using rule 30 (function_call -> < ID > expression .)
    TRUE            reduce using rule 30 (function_call -> < ID > expression .)
    FLOAT           reduce using rule 30 (function_call -> < ID > expression .)
    HEX             reduce using rule 30 (function_call -> < ID > expression .)
    INT             reduce using rule 30 (function_call -> < ID > expression .)
    NULL            reduce using rule 30 (function_call -> < ID > expression .)
    $end            reduce using rule 30 (function_call -> < ID > expression .)
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104


state 284

    (46) variable_assignment -> [ HEX , ID . ] = expression ;
    ]               shift and go to state 316


state 285

    (132) _list -> [ positional_args , ] .
    [               reduce using rule 132 (_list -> [ positional_args , ] .)
    (               reduce using rule 132 (_list -> [ positional_args , ] .)
    :               reduce using rule 132 (_list -> [ positional_args , ] .)
    >               reduce using rule 132 (_list -> [ positional_args , ] .)
    <               reduce using rule 132 (_list -> [ positional_args , ] .)
    &               reduce using rule 132 (_list -> [ positional_args , ] .)
    ^               reduce using rule 132 (_list -> [ positional_args , ] .)
    |               reduce using rule 132 (_list -> [ positional_args , ] .)
    EQ_GREATER      reduce using rule 132 (_list -> [ positional_args , ] .)
    EQ_LESS         reduce using rule 132 (_list -> [ positional_args , ] .)
    NOT_EQEQ        reduce using rule 132 (_list -> [ positional_args , ] .)
    EQEQ            reduce using rule 132 (_list -> [ positional_args , ] .)
    %               reduce using rule 132 (_list -> [ positional_args , ] .)
    *               reduce using rule 132 (_list -> [ positional_args , ] .)
    /               reduce using rule 132 (_list -> [ positional_args , ] .)
    -               reduce using rule 132 (_list -> [ positional_args , ] .)
    +               reduce using rule 132 (_list -> [ positional_args , ] .)
    ,               reduce using rule 132 (_list -> [ positional_args , ] .)
    }               reduce using rule 132 (_list -> [ positional_args , ] .)
    ;               reduce using rule 132 (_list -> [ positional_args , ] .)
    ?               reduce using rule 132 (_list -> [ positional_args , ] .)
    IN              reduce using rule 132 (_list -> [ positional_args , ] .)
    ]               reduce using rule 132 (_list -> [ positional_args , ] .)
    )               reduce using rule 132 (_list -> [ positional_args , ] .)
    {               reduce using rule 132 (_list -> [ positional_args , ] .)
    SANDBOX         reduce using rule 132 (_list -> [ positional_args , ] .)
    LIMPORT         reduce using rule 132 (_list -> [ positional_args , ] .)
    .               reduce using rule 132 (_list -> [ positional_args , ] .)
    IMPORT          reduce using rule 132 (_list -> [ positional_args , ] .)
    ID              reduce using rule 132 (_list -> [ positional_args , ] .)
    RETURN          reduce using rule 132 (_list -> [ positional_args , ] .)
    DEL             reduce using rule 132 (_list -> [ positional_args , ] .)
    !               reduce using rule 132 (_list -> [ positional_args , ] .)
    FOR             reduce using rule 132 (_list -> [ positional_args , ] .)
    DEBUG           reduce using rule 132 (_list -> [ positional_args , ] .)
    SKIP            reduce using rule 132 (_list -> [ positional_args , ] .)
    BREAK           reduce using rule 132 (_list -> [ positional_args , ] .)
    @               reduce using rule 132 (_list -> [ positional_args , ] .)
    WHILE           reduce using rule 132 (_list -> [ positional_args , ] .)
    #               reduce using rule 132 (_list -> [ positional_args , ] .)
    NAMESPACE       reduce using rule 132 (_list -> [ positional_args , ] .)
    CLASS           reduce using rule 132 (_list -> [ positional_args , ] .)
    FUNC            reduce using rule 132 (_list -> [ positional_args , ] .)
    PYTHON_CODE_EXEC reduce using rule 132 (_list -> [ positional_args , ] .)
    PYTHON_CODE     reduce using rule 132 (_list -> [ positional_args , ] .)
    IF              reduce using rule 132 (_list -> [ positional_args , ] .)
    CHAR            reduce using rule 132 (_list -> [ positional_args , ] .)
    STRING          reduce using rule 132 (_list -> [ positional_args , ] .)
    FALSE           reduce using rule 132 (_list -> [ positional_args , ] .)
    TRUE            reduce using rule 132 (_list -> [ positional_args , ] .)
    FLOAT           reduce using rule 132 (_list -> [ positional_args , ] .)
    HEX             reduce using rule 132 (_list -> [ positional_args , ] .)
    INT             reduce using rule 132 (_list -> [ positional_args , ] .)
    NULL            reduce using rule 132 (_list -> [ positional_args , ] .)
    $end            reduce using rule 132 (_list -> [ positional_args , ] .)


state 286

    (60) while_loop -> WHILE ( expression ) . { program }
    {               shift and go to state 317


state 287

    (139) items -> expression , expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ,               reduce using rule 139 (items -> expression , expression .)
    )               reduce using rule 139 (items -> expression , expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 288

    (136) _numpy -> ( expression , ) .
    [               reduce using rule 136 (_numpy -> ( expression , ) .)
    (               reduce using rule 136 (_numpy -> ( expression , ) .)
    :               reduce using rule 136 (_numpy -> ( expression , ) .)
    >               reduce using rule 136 (_numpy -> ( expression , ) .)
    <               reduce using rule 136 (_numpy -> ( expression , ) .)
    &               reduce using rule 136 (_numpy -> ( expression , ) .)
    ^               reduce using rule 136 (_numpy -> ( expression , ) .)
    |               reduce using rule 136 (_numpy -> ( expression , ) .)
    EQ_GREATER      reduce using rule 136 (_numpy -> ( expression , ) .)
    EQ_LESS         reduce using rule 136 (_numpy -> ( expression , ) .)
    NOT_EQEQ        reduce using rule 136 (_numpy -> ( expression , ) .)
    EQEQ            reduce using rule 136 (_numpy -> ( expression , ) .)
    %               reduce using rule 136 (_numpy -> ( expression , ) .)
    *               reduce using rule 136 (_numpy -> ( expression , ) .)
    /               reduce using rule 136 (_numpy -> ( expression , ) .)
    -               reduce using rule 136 (_numpy -> ( expression , ) .)
    +               reduce using rule 136 (_numpy -> ( expression , ) .)
    ,               reduce using rule 136 (_numpy -> ( expression , ) .)
    }               reduce using rule 136 (_numpy -> ( expression , ) .)
    ;               reduce using rule 136 (_numpy -> ( expression , ) .)
    ?               reduce using rule 136 (_numpy -> ( expression , ) .)
    IN              reduce using rule 136 (_numpy -> ( expression , ) .)
    ]               reduce using rule 136 (_numpy -> ( expression , ) .)
    )               reduce using rule 136 (_numpy -> ( expression , ) .)
    {               reduce using rule 136 (_numpy -> ( expression , ) .)
    SANDBOX         reduce using rule 136 (_numpy -> ( expression , ) .)
    LIMPORT         reduce using rule 136 (_numpy -> ( expression , ) .)
    .               reduce using rule 136 (_numpy -> ( expression , ) .)
    IMPORT          reduce using rule 136 (_numpy -> ( expression , ) .)
    ID              reduce using rule 136 (_numpy -> ( expression , ) .)
    RETURN          reduce using rule 136 (_numpy -> ( expression , ) .)
    DEL             reduce using rule 136 (_numpy -> ( expression , ) .)
    !               reduce using rule 136 (_numpy -> ( expression , ) .)
    FOR             reduce using rule 136 (_numpy -> ( expression , ) .)
    DEBUG           reduce using rule 136 (_numpy -> ( expression , ) .)
    SKIP            reduce using rule 136 (_numpy -> ( expression , ) .)
    BREAK           reduce using rule 136 (_numpy -> ( expression , ) .)
    @               reduce using rule 136 (_numpy -> ( expression , ) .)
    WHILE           reduce using rule 136 (_numpy -> ( expression , ) .)
    #               reduce using rule 136 (_numpy -> ( expression , ) .)
    NAMESPACE       reduce using rule 136 (_numpy -> ( expression , ) .)
    CLASS           reduce using rule 136 (_numpy -> ( expression , ) .)
    FUNC            reduce using rule 136 (_numpy -> ( expression , ) .)
    PYTHON_CODE_EXEC reduce using rule 136 (_numpy -> ( expression , ) .)
    PYTHON_CODE     reduce using rule 136 (_numpy -> ( expression , ) .)
    IF              reduce using rule 136 (_numpy -> ( expression , ) .)
    CHAR            reduce using rule 136 (_numpy -> ( expression , ) .)
    STRING          reduce using rule 136 (_numpy -> ( expression , ) .)
    FALSE           reduce using rule 136 (_numpy -> ( expression , ) .)
    TRUE            reduce using rule 136 (_numpy -> ( expression , ) .)
    FLOAT           reduce using rule 136 (_numpy -> ( expression , ) .)
    HEX             reduce using rule 136 (_numpy -> ( expression , ) .)
    INT             reduce using rule 136 (_numpy -> ( expression , ) .)
    NULL            reduce using rule 136 (_numpy -> ( expression , ) .)
    $end            reduce using rule 136 (_numpy -> ( expression , ) .)


state 289

    (137) _numpy -> ( items , ) .
    [               reduce using rule 137 (_numpy -> ( items , ) .)
    (               reduce using rule 137 (_numpy -> ( items , ) .)
    :               reduce using rule 137 (_numpy -> ( items , ) .)
    >               reduce using rule 137 (_numpy -> ( items , ) .)
    <               reduce using rule 137 (_numpy -> ( items , ) .)
    &               reduce using rule 137 (_numpy -> ( items , ) .)
    ^               reduce using rule 137 (_numpy -> ( items , ) .)
    |               reduce using rule 137 (_numpy -> ( items , ) .)
    EQ_GREATER      reduce using rule 137 (_numpy -> ( items , ) .)
    EQ_LESS         reduce using rule 137 (_numpy -> ( items , ) .)
    NOT_EQEQ        reduce using rule 137 (_numpy -> ( items , ) .)
    EQEQ            reduce using rule 137 (_numpy -> ( items , ) .)
    %               reduce using rule 137 (_numpy -> ( items , ) .)
    *               reduce using rule 137 (_numpy -> ( items , ) .)
    /               reduce using rule 137 (_numpy -> ( items , ) .)
    -               reduce using rule 137 (_numpy -> ( items , ) .)
    +               reduce using rule 137 (_numpy -> ( items , ) .)
    ,               reduce using rule 137 (_numpy -> ( items , ) .)
    }               reduce using rule 137 (_numpy -> ( items , ) .)
    ;               reduce using rule 137 (_numpy -> ( items , ) .)
    ?               reduce using rule 137 (_numpy -> ( items , ) .)
    IN              reduce using rule 137 (_numpy -> ( items , ) .)
    ]               reduce using rule 137 (_numpy -> ( items , ) .)
    )               reduce using rule 137 (_numpy -> ( items , ) .)
    {               reduce using rule 137 (_numpy -> ( items , ) .)
    SANDBOX         reduce using rule 137 (_numpy -> ( items , ) .)
    LIMPORT         reduce using rule 137 (_numpy -> ( items , ) .)
    .               reduce using rule 137 (_numpy -> ( items , ) .)
    IMPORT          reduce using rule 137 (_numpy -> ( items , ) .)
    ID              reduce using rule 137 (_numpy -> ( items , ) .)
    RETURN          reduce using rule 137 (_numpy -> ( items , ) .)
    DEL             reduce using rule 137 (_numpy -> ( items , ) .)
    !               reduce using rule 137 (_numpy -> ( items , ) .)
    FOR             reduce using rule 137 (_numpy -> ( items , ) .)
    DEBUG           reduce using rule 137 (_numpy -> ( items , ) .)
    SKIP            reduce using rule 137 (_numpy -> ( items , ) .)
    BREAK           reduce using rule 137 (_numpy -> ( items , ) .)
    @               reduce using rule 137 (_numpy -> ( items , ) .)
    WHILE           reduce using rule 137 (_numpy -> ( items , ) .)
    #               reduce using rule 137 (_numpy -> ( items , ) .)
    NAMESPACE       reduce using rule 137 (_numpy -> ( items , ) .)
    CLASS           reduce using rule 137 (_numpy -> ( items , ) .)
    FUNC            reduce using rule 137 (_numpy -> ( items , ) .)
    PYTHON_CODE_EXEC reduce using rule 137 (_numpy -> ( items , ) .)
    PYTHON_CODE     reduce using rule 137 (_numpy -> ( items , ) .)
    IF              reduce using rule 137 (_numpy -> ( items , ) .)
    CHAR            reduce using rule 137 (_numpy -> ( items , ) .)
    STRING          reduce using rule 137 (_numpy -> ( items , ) .)
    FALSE           reduce using rule 137 (_numpy -> ( items , ) .)
    TRUE            reduce using rule 137 (_numpy -> ( items , ) .)
    FLOAT           reduce using rule 137 (_numpy -> ( items , ) .)
    HEX             reduce using rule 137 (_numpy -> ( items , ) .)
    INT             reduce using rule 137 (_numpy -> ( items , ) .)
    NULL            reduce using rule 137 (_numpy -> ( items , ) .)
    $end            reduce using rule 137 (_numpy -> ( items , ) .)


state 290

    (140) items -> items , expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ,               reduce using rule 140 (items -> items , expression .)
    )               reduce using rule 140 (items -> items , expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 291

    (84) else_statement -> ELSE { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 318
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 292

    (83) else_if_statement -> ELSE IF ( . expression ) { program }
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 319
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 293

    (54) class_declaration -> # EMBED [ ID . , ID ] string
    (55) class_declaration -> # EMBED [ ID . ] string
    ,               shift and go to state 320
    ]               shift and go to state 321


state 294

    (56) class_declaration -> NAMESPACE ID { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 322
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 295

    (57) class_declaration -> CLASS ID { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 323
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 296

    (47) function_declaration -> FUNC ID ( empty . ) expression { program }
    )               shift and go to state 324


state 297

    (50) function_declaration -> FUNC ID ( function_arguments . ) expression { program }
    )               shift and go to state 325


state 298

    (48) function_declaration -> FUNC ID COLON_COLON ID . ( empty ) { program } TARROW expression
    (49) function_declaration -> FUNC ID COLON_COLON ID . ( function_arguments ) { program } TARROW expression
    (               shift and go to state 326


state 299

    (80) if_statement -> IF ( expression ) . { program }
    {               shift and go to state 327


state 300

    (152) assoc_array_items -> assoc_array_items , expression : . expression
    (34) function_call -> expression : . : expression ( empty )
    (35) function_call -> expression : . : expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    :               shift and go to state 176
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 328
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 301

    (29) function_call -> expression ( empty ) FARROW . { program }
    {               shift and go to state 329


state 302

    (64) kwargs -> kwargs , id . = expression
    =               shift and go to state 330


state 303

    (149) id -> ID .
    =               reduce using rule 149 (id -> ID .)


state 304

    (52) function_arguments -> positional_args , kwargs .
    (64) kwargs -> kwargs . , id = expression
    )               reduce using rule 52 (function_arguments -> positional_args , kwargs .)
    ,               shift and go to state 252


state 305

    (63) kwargs -> ID = expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ,               reduce using rule 63 (kwargs -> ID = expression .)
    )               reduce using rule 63 (kwargs -> ID = expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 306

    (34) function_call -> expression : : expression ( . empty )
    (35) function_call -> expression : : expression ( . function_arguments )
    (29) function_call -> expression ( . empty ) FARROW { program }
    (36) function_call -> expression ( . empty )
    (37) function_call -> expression ( . function_arguments )
    (155) empty -> .
    (51) function_arguments -> . kwargs
    (52) function_arguments -> . positional_args , kwargs
    (53) function_arguments -> . positional_args
    (63) kwargs -> . ID = expression
    (64) kwargs -> . kwargs , id = expression
    (61) positional_args -> . expression
    (62) positional_args -> . positional_args , expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    )               reduce using rule 155 (empty -> .)
    ID              shift and go to state 175
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 137
    empty                          shift and go to state 331
    function_arguments             shift and go to state 332
    kwargs                         shift and go to state 173
    positional_args                shift and go to state 174
    id                             shift and go to state 59
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 307

    (27) function_call -> . ENV FROM ID { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    program                        shift and go to state 333
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 308

    (28) function_call -> . ENV { program } .
    ;               reduce using rule 28 (function_call -> . ENV { program } .)
    [               reduce using rule 28 (function_call -> . ENV { program } .)
    (               reduce using rule 28 (function_call -> . ENV { program } .)
    :               reduce using rule 28 (function_call -> . ENV { program } .)
    >               reduce using rule 28 (function_call -> . ENV { program } .)
    <               reduce using rule 28 (function_call -> . ENV { program } .)
    &               reduce using rule 28 (function_call -> . ENV { program } .)
    ^               reduce using rule 28 (function_call -> . ENV { program } .)
    |               reduce using rule 28 (function_call -> . ENV { program } .)
    EQ_GREATER      reduce using rule 28 (function_call -> . ENV { program } .)
    EQ_LESS         reduce using rule 28 (function_call -> . ENV { program } .)
    NOT_EQEQ        reduce using rule 28 (function_call -> . ENV { program } .)
    EQEQ            reduce using rule 28 (function_call -> . ENV { program } .)
    %               reduce using rule 28 (function_call -> . ENV { program } .)
    *               reduce using rule 28 (function_call -> . ENV { program } .)
    /               reduce using rule 28 (function_call -> . ENV { program } .)
    -               reduce using rule 28 (function_call -> . ENV { program } .)
    +               reduce using rule 28 (function_call -> . ENV { program } .)
    ,               reduce using rule 28 (function_call -> . ENV { program } .)
    }               reduce using rule 28 (function_call -> . ENV { program } .)
    ?               reduce using rule 28 (function_call -> . ENV { program } .)
    IN              reduce using rule 28 (function_call -> . ENV { program } .)
    ]               reduce using rule 28 (function_call -> . ENV { program } .)
    )               reduce using rule 28 (function_call -> . ENV { program } .)
    {               reduce using rule 28 (function_call -> . ENV { program } .)
    SANDBOX         reduce using rule 28 (function_call -> . ENV { program } .)
    LIMPORT         reduce using rule 28 (function_call -> . ENV { program } .)
    .               reduce using rule 28 (function_call -> . ENV { program } .)
    IMPORT          reduce using rule 28 (function_call -> . ENV { program } .)
    ID              reduce using rule 28 (function_call -> . ENV { program } .)
    RETURN          reduce using rule 28 (function_call -> . ENV { program } .)
    DEL             reduce using rule 28 (function_call -> . ENV { program } .)
    !               reduce using rule 28 (function_call -> . ENV { program } .)
    FOR             reduce using rule 28 (function_call -> . ENV { program } .)
    DEBUG           reduce using rule 28 (function_call -> . ENV { program } .)
    SKIP            reduce using rule 28 (function_call -> . ENV { program } .)
    BREAK           reduce using rule 28 (function_call -> . ENV { program } .)
    @               reduce using rule 28 (function_call -> . ENV { program } .)
    WHILE           reduce using rule 28 (function_call -> . ENV { program } .)
    #               reduce using rule 28 (function_call -> . ENV { program } .)
    NAMESPACE       reduce using rule 28 (function_call -> . ENV { program } .)
    CLASS           reduce using rule 28 (function_call -> . ENV { program } .)
    FUNC            reduce using rule 28 (function_call -> . ENV { program } .)
    PYTHON_CODE_EXEC reduce using rule 28 (function_call -> . ENV { program } .)
    PYTHON_CODE     reduce using rule 28 (function_call -> . ENV { program } .)
    IF              reduce using rule 28 (function_call -> . ENV { program } .)
    CHAR            reduce using rule 28 (function_call -> . ENV { program } .)
    STRING          reduce using rule 28 (function_call -> . ENV { program } .)
    FALSE           reduce using rule 28 (function_call -> . ENV { program } .)
    TRUE            reduce using rule 28 (function_call -> . ENV { program } .)
    FLOAT           reduce using rule 28 (function_call -> . ENV { program } .)
    HEX             reduce using rule 28 (function_call -> . ENV { program } .)
    INT             reduce using rule 28 (function_call -> . ENV { program } .)
    NULL            reduce using rule 28 (function_call -> . ENV { program } .)
    $end            reduce using rule 28 (function_call -> . ENV { program } .)


state 309

    (42) variable_assignment -> ID ID = [ HEX . , ID ] ;
    (142) hex -> HEX .
  ! shift/reduce conflict for , resolved as shift
    ,               shift and go to state 334
    >               reduce using rule 142 (hex -> HEX .)
    <               reduce using rule 142 (hex -> HEX .)
    &               reduce using rule 142 (hex -> HEX .)
    ^               reduce using rule 142 (hex -> HEX .)
    |               reduce using rule 142 (hex -> HEX .)
    EQ_GREATER      reduce using rule 142 (hex -> HEX .)
    EQ_LESS         reduce using rule 142 (hex -> HEX .)
    NOT_EQEQ        reduce using rule 142 (hex -> HEX .)
    EQEQ            reduce using rule 142 (hex -> HEX .)
    %               reduce using rule 142 (hex -> HEX .)
    *               reduce using rule 142 (hex -> HEX .)
    /               reduce using rule 142 (hex -> HEX .)
    -               reduce using rule 142 (hex -> HEX .)
    +               reduce using rule 142 (hex -> HEX .)
    [               reduce using rule 142 (hex -> HEX .)
    (               reduce using rule 142 (hex -> HEX .)
    :               reduce using rule 142 (hex -> HEX .)
    ]               reduce using rule 142 (hex -> HEX .)


state 310

    (43) variable_assignment -> ID ID = expression ; .
    SANDBOX         reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    LIMPORT         reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    .               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    IMPORT          reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    ID              reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    RETURN          reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    DEL             reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    !               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    FOR             reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    DEBUG           reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    SKIP            reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    BREAK           reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    @               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    [               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    WHILE           reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    ?               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    #               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    NAMESPACE       reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    CLASS           reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    FUNC            reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    PYTHON_CODE     reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    IF              reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    <               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    (               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    +               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    -               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    *               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    &               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    {               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    CHAR            reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    STRING          reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    FALSE           reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    TRUE            reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    FLOAT           reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    HEX             reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    INT             reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    NULL            reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    $end            reduce using rule 43 (variable_assignment -> ID ID = expression ; .)
    }               reduce using rule 43 (variable_assignment -> ID ID = expression ; .)


state 311

    (126) expression -> ID ID [ expression ] .
    [               reduce using rule 126 (expression -> ID ID [ expression ] .)
    (               reduce using rule 126 (expression -> ID ID [ expression ] .)
    :               reduce using rule 126 (expression -> ID ID [ expression ] .)
    >               reduce using rule 126 (expression -> ID ID [ expression ] .)
    <               reduce using rule 126 (expression -> ID ID [ expression ] .)
    &               reduce using rule 126 (expression -> ID ID [ expression ] .)
    ^               reduce using rule 126 (expression -> ID ID [ expression ] .)
    |               reduce using rule 126 (expression -> ID ID [ expression ] .)
    EQ_GREATER      reduce using rule 126 (expression -> ID ID [ expression ] .)
    EQ_LESS         reduce using rule 126 (expression -> ID ID [ expression ] .)
    NOT_EQEQ        reduce using rule 126 (expression -> ID ID [ expression ] .)
    EQEQ            reduce using rule 126 (expression -> ID ID [ expression ] .)
    %               reduce using rule 126 (expression -> ID ID [ expression ] .)
    *               reduce using rule 126 (expression -> ID ID [ expression ] .)
    /               reduce using rule 126 (expression -> ID ID [ expression ] .)
    -               reduce using rule 126 (expression -> ID ID [ expression ] .)
    +               reduce using rule 126 (expression -> ID ID [ expression ] .)
    ,               reduce using rule 126 (expression -> ID ID [ expression ] .)
    }               reduce using rule 126 (expression -> ID ID [ expression ] .)
    ;               reduce using rule 126 (expression -> ID ID [ expression ] .)
    ?               reduce using rule 126 (expression -> ID ID [ expression ] .)
    IN              reduce using rule 126 (expression -> ID ID [ expression ] .)
    ]               reduce using rule 126 (expression -> ID ID [ expression ] .)
    )               reduce using rule 126 (expression -> ID ID [ expression ] .)
    {               reduce using rule 126 (expression -> ID ID [ expression ] .)
    SANDBOX         reduce using rule 126 (expression -> ID ID [ expression ] .)
    LIMPORT         reduce using rule 126 (expression -> ID ID [ expression ] .)
    .               reduce using rule 126 (expression -> ID ID [ expression ] .)
    IMPORT          reduce using rule 126 (expression -> ID ID [ expression ] .)
    ID              reduce using rule 126 (expression -> ID ID [ expression ] .)
    RETURN          reduce using rule 126 (expression -> ID ID [ expression ] .)
    DEL             reduce using rule 126 (expression -> ID ID [ expression ] .)
    !               reduce using rule 126 (expression -> ID ID [ expression ] .)
    FOR             reduce using rule 126 (expression -> ID ID [ expression ] .)
    DEBUG           reduce using rule 126 (expression -> ID ID [ expression ] .)
    SKIP            reduce using rule 126 (expression -> ID ID [ expression ] .)
    BREAK           reduce using rule 126 (expression -> ID ID [ expression ] .)
    @               reduce using rule 126 (expression -> ID ID [ expression ] .)
    WHILE           reduce using rule 126 (expression -> ID ID [ expression ] .)
    #               reduce using rule 126 (expression -> ID ID [ expression ] .)
    NAMESPACE       reduce using rule 126 (expression -> ID ID [ expression ] .)
    CLASS           reduce using rule 126 (expression -> ID ID [ expression ] .)
    FUNC            reduce using rule 126 (expression -> ID ID [ expression ] .)
    PYTHON_CODE_EXEC reduce using rule 126 (expression -> ID ID [ expression ] .)
    PYTHON_CODE     reduce using rule 126 (expression -> ID ID [ expression ] .)
    IF              reduce using rule 126 (expression -> ID ID [ expression ] .)
    CHAR            reduce using rule 126 (expression -> ID ID [ expression ] .)
    STRING          reduce using rule 126 (expression -> ID ID [ expression ] .)
    FALSE           reduce using rule 126 (expression -> ID ID [ expression ] .)
    TRUE            reduce using rule 126 (expression -> ID ID [ expression ] .)
    FLOAT           reduce using rule 126 (expression -> ID ID [ expression ] .)
    HEX             reduce using rule 126 (expression -> ID ID [ expression ] .)
    INT             reduce using rule 126 (expression -> ID ID [ expression ] .)
    NULL            reduce using rule 126 (expression -> ID ID [ expression ] .)
    $end            reduce using rule 126 (expression -> ID ID [ expression ] .)


state 312

    (41) variable_assignment -> ID < ID > ID . = expression ;
    =               shift and go to state 335


state 313

    (58) for_loop -> ! FOR expression IN expression . { program }
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    {               shift and go to state 336
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 314

    (59) for_loop -> FOR expression IN expression { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    expression                     shift and go to state 22
    program                        shift and go to state 337
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 315

    (39) variable_assignment -> @ ID ID = expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 338
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 316

    (46) variable_assignment -> [ HEX , ID ] . = expression ;
    =               shift and go to state 339


state 317

    (60) while_loop -> WHILE ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    expression                     shift and go to state 22
    program                        shift and go to state 340
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 318

    (84) else_statement -> ELSE { program } .
    SANDBOX         reduce using rule 84 (else_statement -> ELSE { program } .)
    LIMPORT         reduce using rule 84 (else_statement -> ELSE { program } .)
    .               reduce using rule 84 (else_statement -> ELSE { program } .)
    IMPORT          reduce using rule 84 (else_statement -> ELSE { program } .)
    ID              reduce using rule 84 (else_statement -> ELSE { program } .)
    RETURN          reduce using rule 84 (else_statement -> ELSE { program } .)
    DEL             reduce using rule 84 (else_statement -> ELSE { program } .)
    !               reduce using rule 84 (else_statement -> ELSE { program } .)
    FOR             reduce using rule 84 (else_statement -> ELSE { program } .)
    DEBUG           reduce using rule 84 (else_statement -> ELSE { program } .)
    SKIP            reduce using rule 84 (else_statement -> ELSE { program } .)
    BREAK           reduce using rule 84 (else_statement -> ELSE { program } .)
    @               reduce using rule 84 (else_statement -> ELSE { program } .)
    [               reduce using rule 84 (else_statement -> ELSE { program } .)
    WHILE           reduce using rule 84 (else_statement -> ELSE { program } .)
    ?               reduce using rule 84 (else_statement -> ELSE { program } .)
    #               reduce using rule 84 (else_statement -> ELSE { program } .)
    NAMESPACE       reduce using rule 84 (else_statement -> ELSE { program } .)
    CLASS           reduce using rule 84 (else_statement -> ELSE { program } .)
    FUNC            reduce using rule 84 (else_statement -> ELSE { program } .)
    PYTHON_CODE_EXEC reduce using rule 84 (else_statement -> ELSE { program } .)
    PYTHON_CODE     reduce using rule 84 (else_statement -> ELSE { program } .)
    IF              reduce using rule 84 (else_statement -> ELSE { program } .)
    <               reduce using rule 84 (else_statement -> ELSE { program } .)
    (               reduce using rule 84 (else_statement -> ELSE { program } .)
    +               reduce using rule 84 (else_statement -> ELSE { program } .)
    -               reduce using rule 84 (else_statement -> ELSE { program } .)
    *               reduce using rule 84 (else_statement -> ELSE { program } .)
    &               reduce using rule 84 (else_statement -> ELSE { program } .)
    {               reduce using rule 84 (else_statement -> ELSE { program } .)
    CHAR            reduce using rule 84 (else_statement -> ELSE { program } .)
    STRING          reduce using rule 84 (else_statement -> ELSE { program } .)
    FALSE           reduce using rule 84 (else_statement -> ELSE { program } .)
    TRUE            reduce using rule 84 (else_statement -> ELSE { program } .)
    FLOAT           reduce using rule 84 (else_statement -> ELSE { program } .)
    HEX             reduce using rule 84 (else_statement -> ELSE { program } .)
    INT             reduce using rule 84 (else_statement -> ELSE { program } .)
    NULL            reduce using rule 84 (else_statement -> ELSE { program } .)
    $end            reduce using rule 84 (else_statement -> ELSE { program } .)
    }               reduce using rule 84 (else_statement -> ELSE { program } .)


state 319

    (83) else_if_statement -> ELSE IF ( expression . ) { program }
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    )               shift and go to state 341
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 320

    (54) class_declaration -> # EMBED [ ID , . ID ] string
    ID              shift and go to state 342


state 321

    (55) class_declaration -> # EMBED [ ID ] . string
    (143) string -> . CHAR
    (144) string -> . STRING
    CHAR            shift and go to state 67
    STRING          shift and go to state 68

    string                         shift and go to state 343

state 322

    (56) class_declaration -> NAMESPACE ID { program } .
    SANDBOX         reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    LIMPORT         reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    .               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    IMPORT          reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    ID              reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    RETURN          reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    DEL             reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    !               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    FOR             reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    DEBUG           reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    SKIP            reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    BREAK           reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    @               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    [               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    WHILE           reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    ?               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    #               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    NAMESPACE       reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    CLASS           reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    FUNC            reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    PYTHON_CODE     reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    IF              reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    <               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    (               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    +               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    -               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    *               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    &               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    {               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    CHAR            reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    STRING          reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    FALSE           reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    TRUE            reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    FLOAT           reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    HEX             reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    INT             reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    NULL            reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    $end            reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)
    }               reduce using rule 56 (class_declaration -> NAMESPACE ID { program } .)


state 323

    (57) class_declaration -> CLASS ID { program } .
    SANDBOX         reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    LIMPORT         reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    .               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    IMPORT          reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    ID              reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    RETURN          reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    DEL             reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    !               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    FOR             reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    DEBUG           reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    SKIP            reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    BREAK           reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    @               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    [               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    WHILE           reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    ?               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    #               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    NAMESPACE       reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    CLASS           reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    FUNC            reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    PYTHON_CODE     reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    IF              reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    <               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    (               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    +               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    -               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    *               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    &               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    {               reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    CHAR            reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    STRING          reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    FALSE           reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    TRUE            reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    FLOAT           reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    HEX             reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    INT             reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    NULL            reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    $end            reduce using rule 57 (class_declaration -> CLASS ID { program } .)
    }               reduce using rule 57 (class_declaration -> CLASS ID { program } .)


state 324

    (47) function_declaration -> FUNC ID ( empty ) . expression { program }
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 344
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 325

    (50) function_declaration -> FUNC ID ( function_arguments ) . expression { program }
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 345
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 326

    (48) function_declaration -> FUNC ID COLON_COLON ID ( . empty ) { program } TARROW expression
    (49) function_declaration -> FUNC ID COLON_COLON ID ( . function_arguments ) { program } TARROW expression
    (155) empty -> .
    (51) function_arguments -> . kwargs
    (52) function_arguments -> . positional_args , kwargs
    (53) function_arguments -> . positional_args
    (63) kwargs -> . ID = expression
    (64) kwargs -> . kwargs , id = expression
    (61) positional_args -> . expression
    (62) positional_args -> . positional_args , expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    )               reduce using rule 155 (empty -> .)
    ID              shift and go to state 175
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    empty                          shift and go to state 346
    expression                     shift and go to state 137
    function_arguments             shift and go to state 347
    kwargs                         shift and go to state 173
    positional_args                shift and go to state 174
    id                             shift and go to state 59
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 327

    (80) if_statement -> IF ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    expression                     shift and go to state 22
    program                        shift and go to state 348
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 328

    (152) assoc_array_items -> assoc_array_items , expression : expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    }               reduce using rule 152 (assoc_array_items -> assoc_array_items , expression : expression .)
    ,               reduce using rule 152 (assoc_array_items -> assoc_array_items , expression : expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 329

    (29) function_call -> expression ( empty ) FARROW { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    expression                     shift and go to state 22
    empty                          shift and go to state 2
    program                        shift and go to state 349
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 330

    (64) kwargs -> kwargs , id = . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    id                             shift and go to state 59
    expression                     shift and go to state 350
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 331

    (34) function_call -> expression : : expression ( empty . )
    (29) function_call -> expression ( empty . ) FARROW { program }
    (36) function_call -> expression ( empty . )
    )               shift and go to state 351


state 332

    (35) function_call -> expression : : expression ( function_arguments . )
    (37) function_call -> expression ( function_arguments . )
    )               shift and go to state 352


state 333

    (27) function_call -> . ENV FROM ID { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 353
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    expression                     shift and go to state 22
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 334

    (42) variable_assignment -> ID ID = [ HEX , . ID ] ;
    ID              shift and go to state 354


state 335

    (41) variable_assignment -> ID < ID > ID = . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 355
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 336

    (58) for_loop -> ! FOR expression IN expression { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    expression                     shift and go to state 22
    program                        shift and go to state 356
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 337

    (59) for_loop -> FOR expression IN expression { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 357
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    expression                     shift and go to state 22
    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 338

    (39) variable_assignment -> @ ID ID = expression ; .
    SANDBOX         reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    LIMPORT         reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    .               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    IMPORT          reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    ID              reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    RETURN          reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    DEL             reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    !               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    FOR             reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    DEBUG           reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    SKIP            reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    BREAK           reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    @               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    [               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    WHILE           reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    ?               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    #               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    NAMESPACE       reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    CLASS           reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    FUNC            reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    PYTHON_CODE     reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    IF              reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    <               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    (               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    +               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    -               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    *               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    &               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    {               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    CHAR            reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    STRING          reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    FALSE           reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    TRUE            reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    FLOAT           reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    HEX             reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    INT             reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    NULL            reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    $end            reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)
    }               reduce using rule 39 (variable_assignment -> @ ID ID = expression ; .)


state 339

    (46) variable_assignment -> [ HEX , ID ] = . expression ;
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 358
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 340

    (60) while_loop -> WHILE ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 359
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    expression                     shift and go to state 22
    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 341

    (83) else_if_statement -> ELSE IF ( expression ) . { program }
    {               shift and go to state 360


state 342

    (54) class_declaration -> # EMBED [ ID , ID . ] string
    ]               shift and go to state 361


state 343

    (55) class_declaration -> # EMBED [ ID ] string .
    SANDBOX         reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    LIMPORT         reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    .               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    IMPORT          reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    ID              reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    RETURN          reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    DEL             reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    !               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    FOR             reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    DEBUG           reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    SKIP            reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    BREAK           reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    @               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    [               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    WHILE           reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    ?               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    #               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    NAMESPACE       reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    CLASS           reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    FUNC            reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    PYTHON_CODE_EXEC reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    PYTHON_CODE     reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    IF              reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    <               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    (               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    +               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    -               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    *               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    &               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    {               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    CHAR            reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    STRING          reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    FALSE           reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    TRUE            reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    FLOAT           reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    HEX             reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    INT             reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    NULL            reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    $end            reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)
    }               reduce using rule 55 (class_declaration -> # EMBED [ ID ] string .)


state 344

    (47) function_declaration -> FUNC ID ( empty ) expression . { program }
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    {               shift and go to state 362
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 345

    (50) function_declaration -> FUNC ID ( function_arguments ) expression . { program }
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    {               shift and go to state 363
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 346

    (48) function_declaration -> FUNC ID COLON_COLON ID ( empty . ) { program } TARROW expression
    )               shift and go to state 364


state 347

    (49) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments . ) { program } TARROW expression
    )               shift and go to state 365


state 348

    (80) if_statement -> IF ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 366
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    expression                     shift and go to state 22
    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 349

    (29) function_call -> expression ( empty ) FARROW { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 367
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    expression                     shift and go to state 22
    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 350

    (64) kwargs -> kwargs , id = expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ,               reduce using rule 64 (kwargs -> kwargs , id = expression .)
    )               reduce using rule 64 (kwargs -> kwargs , id = expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 351

    (34) function_call -> expression : : expression ( empty ) .
    (29) function_call -> expression ( empty ) . FARROW { program }
    (36) function_call -> expression ( empty ) .
  ! reduce/reduce conflict for ( resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for > resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for < resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for & resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for ^ resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for | resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for EQ_GREATER resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for EQ_LESS resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for NOT_EQEQ resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for EQEQ resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for % resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for * resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for / resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for - resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for + resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for [ resolved using rule 36 (function_call -> expression ( empty ) .)
  ! reduce/reduce conflict for : resolved using rule 36 (function_call -> expression ( empty ) .)
    ;               reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    ,               reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    }               reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    ?               reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    IN              reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    ]               reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    )               reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    {               reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    SANDBOX         reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    LIMPORT         reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    .               reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    IMPORT          reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    ID              reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    RETURN          reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    DEL             reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    !               reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    FOR             reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    DEBUG           reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    SKIP            reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    BREAK           reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    @               reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    WHILE           reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    #               reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    NAMESPACE       reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    CLASS           reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    FUNC            reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    PYTHON_CODE_EXEC reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    PYTHON_CODE     reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    IF              reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    CHAR            reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    STRING          reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    FALSE           reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    TRUE            reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    FLOAT           reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    HEX             reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    INT             reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    NULL            reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    $end            reduce using rule 34 (function_call -> expression : : expression ( empty ) .)
    FARROW          shift and go to state 301
    (               reduce using rule 36 (function_call -> expression ( empty ) .)
    >               reduce using rule 36 (function_call -> expression ( empty ) .)
    <               reduce using rule 36 (function_call -> expression ( empty ) .)
    &               reduce using rule 36 (function_call -> expression ( empty ) .)
    ^               reduce using rule 36 (function_call -> expression ( empty ) .)
    |               reduce using rule 36 (function_call -> expression ( empty ) .)
    EQ_GREATER      reduce using rule 36 (function_call -> expression ( empty ) .)
    EQ_LESS         reduce using rule 36 (function_call -> expression ( empty ) .)
    NOT_EQEQ        reduce using rule 36 (function_call -> expression ( empty ) .)
    EQEQ            reduce using rule 36 (function_call -> expression ( empty ) .)
    %               reduce using rule 36 (function_call -> expression ( empty ) .)
    *               reduce using rule 36 (function_call -> expression ( empty ) .)
    /               reduce using rule 36 (function_call -> expression ( empty ) .)
    -               reduce using rule 36 (function_call -> expression ( empty ) .)
    +               reduce using rule 36 (function_call -> expression ( empty ) .)
    [               reduce using rule 36 (function_call -> expression ( empty ) .)
    :               reduce using rule 36 (function_call -> expression ( empty ) .)


state 352

    (35) function_call -> expression : : expression ( function_arguments ) .
    (37) function_call -> expression ( function_arguments ) .
  ! reduce/reduce conflict for ( resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for > resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for < resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for & resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for ^ resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for | resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for EQ_GREATER resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for EQ_LESS resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for NOT_EQEQ resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for EQEQ resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for % resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for * resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for / resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for - resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for + resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for [ resolved using rule 37 (function_call -> expression ( function_arguments ) .)
  ! reduce/reduce conflict for : resolved using rule 37 (function_call -> expression ( function_arguments ) .)
    ;               reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    ,               reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    }               reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    ?               reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    IN              reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    ]               reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    )               reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    {               reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    SANDBOX         reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    LIMPORT         reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    .               reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    IMPORT          reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    ID              reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    RETURN          reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    DEL             reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    !               reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    FOR             reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    DEBUG           reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    SKIP            reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    BREAK           reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    @               reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    WHILE           reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    #               reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    NAMESPACE       reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    CLASS           reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    FUNC            reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    PYTHON_CODE_EXEC reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    PYTHON_CODE     reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    IF              reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    CHAR            reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    STRING          reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    FALSE           reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    TRUE            reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    FLOAT           reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    HEX             reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    INT             reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    NULL            reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    $end            reduce using rule 35 (function_call -> expression : : expression ( function_arguments ) .)
    (               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    >               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    <               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    &               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    ^               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    |               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQ_GREATER      reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQ_LESS         reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    NOT_EQEQ        reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    EQEQ            reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    %               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    *               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    /               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    -               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    +               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    [               reduce using rule 37 (function_call -> expression ( function_arguments ) .)
    :               reduce using rule 37 (function_call -> expression ( function_arguments ) .)


state 353

    (27) function_call -> . ENV FROM ID { program } .
    ;               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    [               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    (               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    :               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    >               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    <               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    &               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    ^               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    |               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    EQ_GREATER      reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    EQ_LESS         reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    NOT_EQEQ        reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    EQEQ            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    %               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    *               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    /               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    -               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    +               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    ,               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    }               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    ?               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    IN              reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    ]               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    )               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    {               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    SANDBOX         reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    LIMPORT         reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    .               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    IMPORT          reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    ID              reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    RETURN          reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    DEL             reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    !               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    FOR             reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    DEBUG           reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    SKIP            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    BREAK           reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    @               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    WHILE           reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    #               reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    NAMESPACE       reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    CLASS           reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    FUNC            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    PYTHON_CODE_EXEC reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    PYTHON_CODE     reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    IF              reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    CHAR            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    STRING          reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    FALSE           reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    TRUE            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    FLOAT           reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    HEX             reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    INT             reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    NULL            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)
    $end            reduce using rule 27 (function_call -> . ENV FROM ID { program } .)


state 354

    (42) variable_assignment -> ID ID = [ HEX , ID . ] ;
    ]               shift and go to state 368


state 355

    (41) variable_assignment -> ID < ID > ID = expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 369
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 356

    (58) for_loop -> ! FOR expression IN expression { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 370
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    expression                     shift and go to state 22
    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 357

    (59) for_loop -> FOR expression IN expression { program } .
    SANDBOX         reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    LIMPORT         reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    .               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    IMPORT          reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    ID              reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    RETURN          reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    DEL             reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    !               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    FOR             reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    DEBUG           reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    SKIP            reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    BREAK           reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    @               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    [               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    WHILE           reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    ?               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    #               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    NAMESPACE       reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    CLASS           reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    FUNC            reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    PYTHON_CODE_EXEC reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    PYTHON_CODE     reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    IF              reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    <               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    (               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    +               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    -               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    *               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    &               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    {               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    CHAR            reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    STRING          reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    FALSE           reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    TRUE            reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    FLOAT           reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    HEX             reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    INT             reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    NULL            reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    $end            reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)
    }               reduce using rule 59 (for_loop -> FOR expression IN expression { program } .)


state 358

    (46) variable_assignment -> [ HEX , ID ] = expression . ;
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
    ;               shift and go to state 371
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 359

    (60) while_loop -> WHILE ( expression ) { program } .
    SANDBOX         reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    LIMPORT         reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    .               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    IMPORT          reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    ID              reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    RETURN          reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    DEL             reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    !               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    FOR             reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    DEBUG           reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    SKIP            reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    BREAK           reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    @               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    [               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    WHILE           reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    ?               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    #               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    NAMESPACE       reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    CLASS           reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    FUNC            reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    IF              reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    <               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    (               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    +               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    -               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    *               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    &               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    {               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    CHAR            reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    STRING          reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    FALSE           reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    TRUE            reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    FLOAT           reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    HEX             reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    INT             reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    NULL            reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    $end            reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)
    }               reduce using rule 60 (while_loop -> WHILE ( expression ) { program } .)


state 360

    (83) else_if_statement -> ELSE IF ( expression ) { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    expression                     shift and go to state 22
    program                        shift and go to state 372
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 361

    (54) class_declaration -> # EMBED [ ID , ID ] . string
    (143) string -> . CHAR
    (144) string -> . STRING
    CHAR            shift and go to state 67
    STRING          shift and go to state 68

    string                         shift and go to state 373

state 362

    (47) function_declaration -> FUNC ID ( empty ) expression { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    empty                          shift and go to state 2
    expression                     shift and go to state 22
    program                        shift and go to state 374
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 363

    (50) function_declaration -> FUNC ID ( function_arguments ) expression { . program }
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    expression                     shift and go to state 22
    program                        shift and go to state 375
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 364

    (48) function_declaration -> FUNC ID COLON_COLON ID ( empty ) . { program } TARROW expression
    {               shift and go to state 376


state 365

    (49) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) . { program } TARROW expression
    {               shift and go to state 377


state 366

    (80) if_statement -> IF ( expression ) { program } .
    ELSE            reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    SANDBOX         reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    LIMPORT         reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    .               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    IMPORT          reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    ID              reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    RETURN          reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    DEL             reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    !               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    FOR             reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    DEBUG           reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    SKIP            reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    BREAK           reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    @               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    [               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    WHILE           reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    ?               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    #               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    NAMESPACE       reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    CLASS           reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    FUNC            reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    IF              reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    <               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    (               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    +               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    -               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    *               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    &               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    {               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    CHAR            reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    STRING          reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    FALSE           reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    TRUE            reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    FLOAT           reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    HEX             reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    INT             reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    NULL            reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    $end            reduce using rule 80 (if_statement -> IF ( expression ) { program } .)
    }               reduce using rule 80 (if_statement -> IF ( expression ) { program } .)


state 367

    (29) function_call -> expression ( empty ) FARROW { program } .
    ;               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    [               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    (               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    :               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    >               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    <               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    &               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    ^               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    |               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_GREATER      reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    EQ_LESS         reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    NOT_EQEQ        reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    EQEQ            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    %               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    *               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    /               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    -               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    +               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    ,               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    }               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    ?               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    IN              reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    ]               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    )               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    {               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    SANDBOX         reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    LIMPORT         reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    .               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    IMPORT          reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    ID              reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    RETURN          reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    DEL             reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    !               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    FOR             reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    DEBUG           reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    SKIP            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    BREAK           reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    @               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    WHILE           reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    #               reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    NAMESPACE       reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    CLASS           reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    FUNC            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    PYTHON_CODE_EXEC reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    PYTHON_CODE     reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    IF              reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    CHAR            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    STRING          reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    FALSE           reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    TRUE            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    FLOAT           reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    HEX             reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    INT             reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    NULL            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)
    $end            reduce using rule 29 (function_call -> expression ( empty ) FARROW { program } .)


state 368

    (42) variable_assignment -> ID ID = [ HEX , ID ] . ;
    ;               shift and go to state 378


state 369

    (41) variable_assignment -> ID < ID > ID = expression ; .
    SANDBOX         reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    LIMPORT         reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    .               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    IMPORT          reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    ID              reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    RETURN          reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    DEL             reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    !               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    FOR             reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    DEBUG           reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    SKIP            reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    BREAK           reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    @               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    [               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    WHILE           reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    ?               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    #               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    NAMESPACE       reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    CLASS           reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    FUNC            reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    PYTHON_CODE     reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    IF              reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    <               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    (               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    +               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    -               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    *               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    &               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    {               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    CHAR            reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    STRING          reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    FALSE           reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    TRUE            reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    FLOAT           reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    HEX             reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    INT             reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    NULL            reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    $end            reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)
    }               reduce using rule 41 (variable_assignment -> ID < ID > ID = expression ; .)


state 370

    (58) for_loop -> ! FOR expression IN expression { program } .
    SANDBOX         reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    LIMPORT         reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    .               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    IMPORT          reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    ID              reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    RETURN          reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    DEL             reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    !               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    FOR             reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    DEBUG           reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    SKIP            reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    BREAK           reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    @               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    [               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    WHILE           reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    ?               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    #               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    NAMESPACE       reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    CLASS           reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    FUNC            reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    PYTHON_CODE_EXEC reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    PYTHON_CODE     reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    IF              reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    <               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    (               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    +               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    -               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    *               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    &               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    {               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    CHAR            reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    STRING          reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    FALSE           reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    TRUE            reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    FLOAT           reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    HEX             reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    INT             reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    NULL            reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    $end            reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)
    }               reduce using rule 58 (for_loop -> ! FOR expression IN expression { program } .)


state 371

    (46) variable_assignment -> [ HEX , ID ] = expression ; .
    SANDBOX         reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    LIMPORT         reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    .               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    IMPORT          reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    ID              reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    RETURN          reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    DEL             reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    !               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    FOR             reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    DEBUG           reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    SKIP            reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    BREAK           reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    @               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    [               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    WHILE           reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    ?               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    #               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    NAMESPACE       reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    CLASS           reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    FUNC            reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    PYTHON_CODE_EXEC reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    PYTHON_CODE     reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    IF              reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    <               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    (               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    +               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    -               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    *               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    &               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    {               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    CHAR            reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    STRING          reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    FALSE           reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    TRUE            reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    FLOAT           reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    HEX             reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    INT             reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    NULL            reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    $end            reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)
    }               reduce using rule 46 (variable_assignment -> [ HEX , ID ] = expression ; .)


state 372

    (83) else_if_statement -> ELSE IF ( expression ) { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 379
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    expression                     shift and go to state 22
    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 373

    (54) class_declaration -> # EMBED [ ID , ID ] string .
    SANDBOX         reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    LIMPORT         reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    .               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    IMPORT          reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    ID              reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    RETURN          reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    DEL             reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    !               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    FOR             reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    DEBUG           reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    SKIP            reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    BREAK           reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    @               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    [               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    WHILE           reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    ?               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    #               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    NAMESPACE       reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    CLASS           reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    FUNC            reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    PYTHON_CODE_EXEC reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    PYTHON_CODE     reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    IF              reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    <               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    (               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    +               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    -               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    *               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    &               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    {               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    CHAR            reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    STRING          reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    FALSE           reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    TRUE            reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    FLOAT           reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    HEX             reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    INT             reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    NULL            reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    $end            reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)
    }               reduce using rule 54 (class_declaration -> # EMBED [ ID , ID ] string .)


state 374

    (47) function_declaration -> FUNC ID ( empty ) expression { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 380
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    expression                     shift and go to state 22
    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 375

    (50) function_declaration -> FUNC ID ( function_arguments ) expression { program . }
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 381
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    expression                     shift and go to state 22
    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 376

    (48) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    empty                          shift and go to state 2
    program                        shift and go to state 382
    expression                     shift and go to state 22
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 377

    (49) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { . program } TARROW expression
    (1) program -> . empty
    (2) program -> . statement
    (3) program -> . program statement
    (155) empty -> .
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               reduce using rule 155 (empty -> .)
    SANDBOX         reduce using rule 155 (empty -> .)
    LIMPORT         reduce using rule 155 (empty -> .)
    .               reduce using rule 155 (empty -> .)
    IMPORT          reduce using rule 155 (empty -> .)
    ID              reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    DEL             reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    DEBUG           reduce using rule 155 (empty -> .)
    SKIP            reduce using rule 155 (empty -> .)
    BREAK           reduce using rule 155 (empty -> .)
    @               reduce using rule 155 (empty -> .)
    [               reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    ?               reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    NAMESPACE       reduce using rule 155 (empty -> .)
    CLASS           reduce using rule 155 (empty -> .)
    FUNC            reduce using rule 155 (empty -> .)
    PYTHON_CODE_EXEC reduce using rule 155 (empty -> .)
    PYTHON_CODE     reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    (               reduce using rule 155 (empty -> .)
    {               reduce using rule 155 (empty -> .)
    CHAR            reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    HEX             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    NULL            reduce using rule 155 (empty -> .)
    !               shift and go to state 29
    <               shift and go to state 35
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65

    program                        shift and go to state 383
    expression                     shift and go to state 22
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 378

    (42) variable_assignment -> ID ID = [ HEX , ID ] ; .
    SANDBOX         reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    LIMPORT         reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    .               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    IMPORT          reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    ID              reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    RETURN          reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    DEL             reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    !               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    FOR             reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    DEBUG           reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    SKIP            reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    BREAK           reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    @               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    [               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    WHILE           reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    ?               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    #               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    NAMESPACE       reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    CLASS           reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    FUNC            reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    PYTHON_CODE_EXEC reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    PYTHON_CODE     reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    IF              reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    <               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    (               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    +               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    -               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    *               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    &               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    {               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    CHAR            reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    STRING          reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    FALSE           reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    TRUE            reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    FLOAT           reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    HEX             reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    INT             reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    NULL            reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    $end            reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)
    }               reduce using rule 42 (variable_assignment -> ID ID = [ HEX , ID ] ; .)


state 379

    (83) else_if_statement -> ELSE IF ( expression ) { program } .
    ELSE            reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    SANDBOX         reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    LIMPORT         reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    .               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    IMPORT          reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    ID              reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    RETURN          reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    DEL             reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    !               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FOR             reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    DEBUG           reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    SKIP            reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    BREAK           reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    @               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    [               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    WHILE           reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    ?               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    #               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    NAMESPACE       reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    CLASS           reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FUNC            reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PYTHON_CODE_EXEC reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    PYTHON_CODE     reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    IF              reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    <               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    (               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    +               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    -               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    *               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    &               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    {               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    CHAR            reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    STRING          reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FALSE           reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    TRUE            reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    FLOAT           reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    HEX             reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    INT             reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    NULL            reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    $end            reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)
    }               reduce using rule 83 (else_if_statement -> ELSE IF ( expression ) { program } .)


state 380

    (47) function_declaration -> FUNC ID ( empty ) expression { program } .
    SANDBOX         reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    LIMPORT         reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    .               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    IMPORT          reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    ID              reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    RETURN          reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    DEL             reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    !               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    FOR             reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    DEBUG           reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    SKIP            reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    BREAK           reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    @               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    [               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    WHILE           reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    ?               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    #               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    NAMESPACE       reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    CLASS           reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    FUNC            reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    PYTHON_CODE_EXEC reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    PYTHON_CODE     reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    IF              reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    <               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    (               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    +               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    -               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    *               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    &               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    {               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    CHAR            reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    STRING          reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    FALSE           reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    TRUE            reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    FLOAT           reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    HEX             reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    INT             reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    NULL            reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    $end            reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)
    }               reduce using rule 47 (function_declaration -> FUNC ID ( empty ) expression { program } .)


state 381

    (50) function_declaration -> FUNC ID ( function_arguments ) expression { program } .
    SANDBOX         reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    LIMPORT         reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    .               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    IMPORT          reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    ID              reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    RETURN          reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    DEL             reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    !               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    FOR             reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    DEBUG           reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    SKIP            reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    BREAK           reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    @               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    [               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    WHILE           reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    ?               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    #               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    NAMESPACE       reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    CLASS           reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    FUNC            reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    PYTHON_CODE_EXEC reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    PYTHON_CODE     reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    IF              reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    <               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    (               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    +               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    -               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    *               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    &               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    {               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    CHAR            reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    STRING          reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    FALSE           reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    TRUE            reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    FLOAT           reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    HEX             reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    INT             reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    NULL            reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    $end            reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)
    }               reduce using rule 50 (function_declaration -> FUNC ID ( function_arguments ) expression { program } .)


state 382

    (48) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 384
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    expression                     shift and go to state 22
    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 383

    (49) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program . } TARROW expression
    (3) program -> program . statement
    (4) statement -> . sandbox
    (5) statement -> . import_statement
    (6) statement -> . variable_operation
    (7) statement -> . return_statement
    (8) statement -> . delete_statement
    (9) statement -> . for_loop
    (10) statement -> . break_statement
    (11) statement -> . variable_assignment
    (12) statement -> . python_code_statement
    (13) statement -> . while_loop
    (14) statement -> . conditional
    (15) statement -> . class_attribute_assignment
    (16) statement -> . function_call_statement
    (17) statement -> . class_declaration
    (18) statement -> . function_declaration
    (19) sandbox -> . SANDBOX { program }
    (20) sandbox -> . LIMPORT expression ;
    (86) import_statement -> . . SELFISH ;
    (87) import_statement -> . . GLOBAL ;
    (88) import_statement -> . IMPORT expression ;
    (65) variable_operation -> . get_index EQ_DIV expression ;
    (66) variable_operation -> . ID EQ_DIV expression ;
    (67) variable_operation -> . get_index EQ_MOD expression ;
    (68) variable_operation -> . ID EQ_MOD expression ;
    (69) variable_operation -> . get_index EQ_MUL expression ;
    (70) variable_operation -> . ID EQ_MUL expression ;
    (71) variable_operation -> . get_index EQ_SUB expression ;
    (72) variable_operation -> . ID EQ_SUB expression ;
    (73) variable_operation -> . get_index EQ_ADD expression ;
    (74) variable_operation -> . ID EQ_ADD expression ;
    (26) return_statement -> . RETURN expression ;
    (85) delete_statement -> . DEL ID ;
    (58) for_loop -> . ! FOR expression IN expression { program }
    (59) for_loop -> . FOR expression IN expression { program }
    (23) break_statement -> . DEBUG ;
    (24) break_statement -> . SKIP ;
    (25) break_statement -> . BREAK ;
    (38) variable_assignment -> . get_index = expression ;
    (39) variable_assignment -> . @ ID ID = expression ;
    (40) variable_assignment -> . ID = expression ;
    (41) variable_assignment -> . ID < ID > ID = expression ;
    (42) variable_assignment -> . ID ID = [ HEX , ID ] ;
    (43) variable_assignment -> . ID ID = expression ;
    (44) variable_assignment -> . ID - - ;
    (45) variable_assignment -> . ID + + ;
    (46) variable_assignment -> . [ HEX , ID ] = expression ;
    (22) python_code_statement -> . python_code ;
    (60) while_loop -> . WHILE ( expression ) { program }
    (76) conditional -> . if_statement else_statement
    (77) conditional -> . if_statement else_if_loop else_statement
    (78) conditional -> . if_statement else_if_loop
    (79) conditional -> . if_statement
    (75) class_attribute_assignment -> . ? !
    (21) function_call_statement -> . function_call ;
    (54) class_declaration -> . # EMBED [ ID , ID ] string
    (55) class_declaration -> . # EMBED [ ID ] string
    (56) class_declaration -> . NAMESPACE ID { program }
    (57) class_declaration -> . CLASS ID { program }
    (47) function_declaration -> . FUNC ID ( empty ) expression { program }
    (48) function_declaration -> . FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression
    (49) function_declaration -> . FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression
    (50) function_declaration -> . FUNC ID ( function_arguments ) expression { program }
    (129) get_index -> . expression [ expression ]
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (80) if_statement -> . IF ( expression ) { program }
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    }               shift and go to state 385
    SANDBOX         shift and go to state 19
    LIMPORT         shift and go to state 21
    .               shift and go to state 23
    IMPORT          shift and go to state 24
    ID              shift and go to state 26
    RETURN          shift and go to state 27
    DEL             shift and go to state 28
    !               shift and go to state 29
    FOR             shift and go to state 30
    DEBUG           shift and go to state 31
    SKIP            shift and go to state 32
    BREAK           shift and go to state 33
    @               shift and go to state 34
    [               shift and go to state 36
    WHILE           shift and go to state 41
    ?               shift and go to state 44
    #               shift and go to state 46
    NAMESPACE       shift and go to state 48
    CLASS           shift and go to state 49
    FUNC            shift and go to state 50
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52
    IF              shift and go to state 53
    <               shift and go to state 35
    (               shift and go to state 42
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    {               shift and go to state 20
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73

    expression                     shift and go to state 22
    statement                      shift and go to state 74
    sandbox                        shift and go to state 4
    import_statement               shift and go to state 5
    variable_operation             shift and go to state 6
    return_statement               shift and go to state 7
    delete_statement               shift and go to state 8
    for_loop                       shift and go to state 9
    break_statement                shift and go to state 10
    variable_assignment            shift and go to state 11
    python_code_statement          shift and go to state 12
    while_loop                     shift and go to state 13
    conditional                    shift and go to state 14
    class_attribute_assignment     shift and go to state 15
    function_call_statement        shift and go to state 16
    class_declaration              shift and go to state 17
    function_declaration           shift and go to state 18
    get_index                      shift and go to state 25
    python_code                    shift and go to state 40
    if_statement                   shift and go to state 43
    function_call                  shift and go to state 45
    string                         shift and go to state 47
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64

state 384

    (48) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } . TARROW expression
    TARROW          shift and go to state 386


state 385

    (49) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } . TARROW expression
    TARROW          shift and go to state 387


state 386

    (48) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 388
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 387

    (49) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW . expression
    (89) expression -> . assoc_array
    (90) expression -> . _numpy
    (91) expression -> . _list
    (92) expression -> . _tuple
    (93) expression -> . class_attribute
    (94) expression -> . id
    (95) expression -> . string
    (96) expression -> . bool
    (97) expression -> . float
    (98) expression -> . hex
    (99) expression -> . int
    (100) expression -> . null
    (101) expression -> . get_index
    (102) expression -> . function_call
    (103) expression -> . python_code
    (104) expression -> . ( expression )
    (105) expression -> . expression > > expression
    (106) expression -> . expression < < expression
    (107) expression -> . expression > expression
    (108) expression -> . expression < expression
    (109) expression -> . ! expression
    (110) expression -> . expression & expression
    (111) expression -> . expression ^ expression
    (112) expression -> . expression | expression
    (113) expression -> . expression EQ_GREATER expression
    (114) expression -> . expression EQ_LESS expression
    (115) expression -> . expression NOT_EQEQ expression
    (116) expression -> . expression EQEQ expression
    (117) expression -> . expression % expression
    (118) expression -> . expression * expression
    (119) expression -> . expression / expression
    (120) expression -> . expression - expression
    (121) expression -> . expression + expression
    (122) expression -> . + expression
    (123) expression -> . - expression
    (124) expression -> . * ID
    (125) expression -> . & ID
    (126) expression -> . ID ID [ expression ]
    (127) expression -> . ID ID
    (150) assoc_array -> . { assoc_array_items }
    (134) _numpy -> . ( , )
    (135) _numpy -> . ( )
    (136) _numpy -> . ( expression , )
    (137) _numpy -> . ( items , )
    (138) _numpy -> . ( items )
    (132) _list -> . [ positional_args , ]
    (133) _list -> . [ positional_args ]
    (130) _tuple -> . { positional_args , }
    (131) _tuple -> . { positional_args }
    (148) class_attribute -> . ! expression ? ID
    (149) id -> . ID
    (143) string -> . CHAR
    (144) string -> . STRING
    (146) bool -> . FALSE
    (147) bool -> . TRUE
    (145) float -> . FLOAT
    (142) hex -> . HEX
    (141) int -> . INT
    (128) null -> . NULL
    (129) get_index -> . expression [ expression ]
    (27) function_call -> . . ENV FROM ID { program }
    (28) function_call -> . . ENV { program }
    (29) function_call -> . expression ( empty ) FARROW { program }
    (30) function_call -> . < ID > expression
    (31) function_call -> . ID TARROW ID
    (32) function_call -> . # DEPENDS expression
    (33) function_call -> . # ID expression
    (34) function_call -> . expression : : expression ( empty )
    (35) function_call -> . expression : : expression ( function_arguments )
    (36) function_call -> . expression ( empty )
    (37) function_call -> . expression ( function_arguments )
    (153) python_code -> . PYTHON_CODE_EXEC
    (154) python_code -> . PYTHON_CODE
    (               shift and go to state 42
    !               shift and go to state 82
    +               shift and go to state 39
    -               shift and go to state 38
    *               shift and go to state 66
    &               shift and go to state 65
    ID              shift and go to state 83
    {               shift and go to state 20
    [               shift and go to state 84
    CHAR            shift and go to state 67
    STRING          shift and go to state 68
    FALSE           shift and go to state 69
    TRUE            shift and go to state 70
    FLOAT           shift and go to state 71
    HEX             shift and go to state 37
    INT             shift and go to state 72
    NULL            shift and go to state 73
    .               shift and go to state 85
    <               shift and go to state 35
    #               shift and go to state 86
    PYTHON_CODE_EXEC shift and go to state 51
    PYTHON_CODE     shift and go to state 52

    expression                     shift and go to state 389
    assoc_array                    shift and go to state 54
    _numpy                         shift and go to state 55
    _list                          shift and go to state 56
    _tuple                         shift and go to state 57
    class_attribute                shift and go to state 58
    id                             shift and go to state 59
    string                         shift and go to state 47
    bool                           shift and go to state 60
    float                          shift and go to state 61
    hex                            shift and go to state 62
    int                            shift and go to state 63
    null                           shift and go to state 64
    get_index                      shift and go to state 79
    function_call                  shift and go to state 80
    python_code                    shift and go to state 81

state 388

    (48) function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    LIMPORT         reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    .               reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    IMPORT          reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    ID              reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    RETURN          reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    DEL             reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    !               reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FOR             reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    DEBUG           reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    SKIP            reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    BREAK           reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    @               reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    WHILE           reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    ?               reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    #               reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    CLASS           reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FUNC            reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    IF              reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    {               reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    CHAR            reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    STRING          reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FALSE           reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    TRUE            reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    FLOAT           reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    HEX             reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    INT             reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    NULL            reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    $end            reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    }               reduce using rule 48 (function_declaration -> FUNC ID COLON_COLON ID ( empty ) { program } TARROW expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


state 389

    (49) function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .
    (105) expression -> expression . > > expression
    (106) expression -> expression . < < expression
    (107) expression -> expression . > expression
    (108) expression -> expression . < expression
    (110) expression -> expression . & expression
    (111) expression -> expression . ^ expression
    (112) expression -> expression . | expression
    (113) expression -> expression . EQ_GREATER expression
    (114) expression -> expression . EQ_LESS expression
    (115) expression -> expression . NOT_EQEQ expression
    (116) expression -> expression . EQEQ expression
    (117) expression -> expression . % expression
    (118) expression -> expression . * expression
    (119) expression -> expression . / expression
    (120) expression -> expression . - expression
    (121) expression -> expression . + expression
    (129) get_index -> expression . [ expression ]
    (29) function_call -> expression . ( empty ) FARROW { program }
    (34) function_call -> expression . : : expression ( empty )
    (35) function_call -> expression . : : expression ( function_arguments )
    (36) function_call -> expression . ( empty )
    (37) function_call -> expression . ( function_arguments )
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    SANDBOX         reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    LIMPORT         reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    .               reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    IMPORT          reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    ID              reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    RETURN          reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    DEL             reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    !               reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FOR             reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    DEBUG           reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    SKIP            reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    BREAK           reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    @               reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    WHILE           reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    ?               reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    #               reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    NAMESPACE       reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    CLASS           reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FUNC            reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE_EXEC reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    PYTHON_CODE     reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    IF              reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    {               reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    CHAR            reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    STRING          reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FALSE           reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    TRUE            reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    FLOAT           reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    HEX             reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    INT             reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    NULL            reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    $end            reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    }               reduce using rule 49 (function_declaration -> FUNC ID COLON_COLON ID ( function_arguments ) { program } TARROW expression .)
    >               shift and go to state 91
    <               shift and go to state 92
    &               shift and go to state 93
    ^               shift and go to state 94
    |               shift and go to state 95
    EQ_GREATER      shift and go to state 96
    EQ_LESS         shift and go to state 97
    NOT_EQEQ        shift and go to state 98
    EQEQ            shift and go to state 99
    %               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    -               shift and go to state 103
    +               shift and go to state 104
    [               shift and go to state 88
    (               shift and go to state 89
    :               shift and go to state 90


Conflicts:

shift/reduce conflict for < in state 26 resolved as shift
shift/reduce conflict for - in state 26 resolved as shift
shift/reduce conflict for + in state 26 resolved as shift
shift/reduce conflict for ID in state 83 resolved as shift
shift/reduce conflict for [ in state 115 resolved as shift
shift/reduce conflict for , in state 136 resolved as shift
shift/reduce conflict for [ in state 168 resolved as shift
shift/reduce conflict for > in state 182 resolved as shift
shift/reduce conflict for < in state 182 resolved as shift
shift/reduce conflict for & in state 182 resolved as shift
shift/reduce conflict for ^ in state 182 resolved as shift
shift/reduce conflict for | in state 182 resolved as shift
shift/reduce conflict for EQ_GREATER in state 182 resolved as shift
shift/reduce conflict for EQ_LESS in state 182 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 182 resolved as shift
shift/reduce conflict for EQEQ in state 182 resolved as shift
shift/reduce conflict for % in state 182 resolved as shift
shift/reduce conflict for * in state 182 resolved as shift
shift/reduce conflict for / in state 182 resolved as shift
shift/reduce conflict for - in state 182 resolved as shift
shift/reduce conflict for + in state 182 resolved as shift
shift/reduce conflict for [ in state 182 resolved as shift
shift/reduce conflict for ( in state 182 resolved as shift
shift/reduce conflict for : in state 182 resolved as shift
shift/reduce conflict for > in state 237 resolved as shift
shift/reduce conflict for < in state 237 resolved as shift
shift/reduce conflict for & in state 237 resolved as shift
shift/reduce conflict for ^ in state 237 resolved as shift
shift/reduce conflict for | in state 237 resolved as shift
shift/reduce conflict for EQ_GREATER in state 237 resolved as shift
shift/reduce conflict for EQ_LESS in state 237 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 237 resolved as shift
shift/reduce conflict for EQEQ in state 237 resolved as shift
shift/reduce conflict for % in state 237 resolved as shift
shift/reduce conflict for * in state 237 resolved as shift
shift/reduce conflict for / in state 237 resolved as shift
shift/reduce conflict for - in state 237 resolved as shift
shift/reduce conflict for + in state 237 resolved as shift
shift/reduce conflict for [ in state 237 resolved as shift
shift/reduce conflict for ( in state 237 resolved as shift
shift/reduce conflict for : in state 237 resolved as shift
shift/reduce conflict for > in state 238 resolved as shift
shift/reduce conflict for < in state 238 resolved as shift
shift/reduce conflict for & in state 238 resolved as shift
shift/reduce conflict for ^ in state 238 resolved as shift
shift/reduce conflict for | in state 238 resolved as shift
shift/reduce conflict for EQ_GREATER in state 238 resolved as shift
shift/reduce conflict for EQ_LESS in state 238 resolved as shift
shift/reduce conflict for NOT_EQEQ in state 238 resolved as shift
shift/reduce conflict for EQEQ in state 238 resolved as shift
shift/reduce conflict for % in state 238 resolved as shift
shift/reduce conflict for * in state 238 resolved as shift
shift/reduce conflict for / in state 238 resolved as shift
shift/reduce conflict for - in state 238 resolved as shift
shift/reduce conflict for + in state 238 resolved as shift
shift/reduce conflict for [ in state 238 resolved as shift
shift/reduce conflict for ( in state 238 resolved as shift
shift/reduce conflict for : in state 238 resolved as shift
shift/reduce conflict for > in state 258 resolved as shift
shift/reduce conflict for ID in state 258 resolved as shift
shift/reduce conflict for , in state 309 resolved as shift
shift/reduce conflict for < in state 388 resolved as shift
shift/reduce conflict for & in state 388 resolved as shift
shift/reduce conflict for * in state 388 resolved as shift
shift/reduce conflict for - in state 388 resolved as shift
shift/reduce conflict for + in state 388 resolved as shift
shift/reduce conflict for [ in state 388 resolved as shift
shift/reduce conflict for ( in state 388 resolved as shift
shift/reduce conflict for < in state 389 resolved as shift
shift/reduce conflict for & in state 389 resolved as shift
shift/reduce conflict for * in state 389 resolved as shift
shift/reduce conflict for - in state 389 resolved as shift
shift/reduce conflict for + in state 389 resolved as shift
shift/reduce conflict for [ in state 389 resolved as shift
shift/reduce conflict for ( in state 389 resolved as shift
reduce/reduce conflict in state 351 resolved using rule function_call -> expression ( empty )
rejected rule (function_call -> expression : : expression ( empty )) in state 351
reduce/reduce conflict in state 352 resolved using rule function_call -> expression ( function_arguments )
rejected rule (function_call -> expression : : expression ( function_arguments )) in state 352